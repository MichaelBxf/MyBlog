<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>neoFelhz&#39;s Blog</title>
  <subtitle>拾穗者的故事</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.nfz.moe/"/>
  <updated>2017-05-14T09:25:31.000Z</updated>
  <id>https://blog.nfz.moe/</id>
  
  <author>
    <name>neoFelhz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web 性能优化（5）——localstorage 存储静态文件的意义</title>
    <link href="https://blog.nfz.moe/archives/wpo-localstorage-css-js.html"/>
    <id>https://blog.nfz.moe/archives/wpo-localstorage-css-js.html</id>
    <published>2017-05-10T09:27:00.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>localstorage 并不仅仅只是”狂拽酷炫吊炸天“的黑科技。在一些特殊场景下，甚至可能会有意想不到的收获。</p>
<a id="more"></a>
<h1 id="缘由"><a href="# 缘由" class="headerlink" title="缘由"></a>缘由 </h1><p> 之前阅读 JerryQu 的博客时，看到他在介绍他的博客的优化方案时提到说：</p>
<blockquote>
<p>我将常规外链转成了 inline 输出，同时存入 localStorage，之后不再输出。</p>
</blockquote>
<p>2015 年在知乎上时，localstorage 技术就已经被热烈地讨论过了（<a href="https://www.zhihu.com/question/28467444" target="_blank" rel="external">静态资源（JS/CSS）存储在 localStorage 有什么缺点？为什么没有被广泛应用？</a>）。在知乎上，很多前端大牛都对 localstorage “颇有微词”。所以，我决定简单地研究这一方案，并表达一下我个人的看法。</p>
<h1 id="localstorage- 的优点"><a href="#localstorage- 的优点" class="headerlink" title="localstorage 的优点"></a>localstorage 的优点 </h1><p> 在知乎对于该问题的回答中，最激烈的反对意见是这样的：</p>
<blockquote>
<p>浏览器都帮你缓存好了，干嘛多此一举缓存到 LS 里？</p>
</blockquote>
<p>很好，那就让我们从浏览器的缓存开始说起。</p>
<p>对于 css/js 传统的优化方法，最常见的便是将小的静态文件直接 inline 减少请求，大的文件、甚至全站都完整的接入 CDN，直接将文件就近推送以加快加载速度。</p>
<blockquote>
<p>相对于 inline，HTTP2 协议下的多路复用的特性和 Server Push 的支持（Server Push 即是将一些资源文件和 HTML 在同一请求内同时从服务端推送给浏览器），可以使 inline 变得不那么重要。</p>
</blockquote>
<p>CDN 除了可以就近分发，还可以设置缓存头提示浏览器缓存一些静态文件，这样当页面二次加载便不需要发起 HTTP 请求。但是，外链资源即使合理配置了强缓存头，<strong>浏览器依然会在用户主动刷新时发起协商请求（响应码通常是 304，虽无响应正文，但依然需要建立连接）</strong>；会在强刷时发起 <code>cache-control:no-cache</code> 和 <code>pragma:no-cache</code> 的 Request Header，忽略所有缓存，触发服务端的 200 响应。虽然用户不一定都会强制刷新，但在网络环境较差的环境下，使用 304 协商响应依然颇花费时间。</p>
<blockquote>
<p>在微信内置的 WebView 当中有其它的坑：WebView 退出 10 分钟后，js/css 缓存便会失效，触发 304；WebView 进程一旦退出和重新进入后，缓存便会作废，触发 200。</p>
</blockquote>
<p>所以，使用 localstorage 等效于无视用户主动刷新行为的本地强缓存，而且可以存储较大体积的数据（最小是 2M），而且永久有效。如果把 js 和 css 存储在 localstorage 中，可以省去发送 HTTP 请求从而改善用户的浏览体验。</p>
<h1 id="localstorage- 的缺点"><a href="#localstorage- 的缺点" class="headerlink" title="localstorage 的缺点"></a>localstorage 的缺点 </h1><p> 前端大牛们当时主要关心的时 localstorage 方案的响应速度：网络环境优秀时，localstorage 的响应速度会超过 304 响应的速度么？</p>
<p>理论上，使用 localstorage 和使用 <code>from disk cache</code> 和 <code>from memory cache</code> 的速度应该是不相上下的（当然，这需要进一步的验证和测试）。在较差的网络环境下，读取 localstorage 至少要快于 304。而且移动端由于存储大小问题，手机浏览器的缓存经常会被清理，但 localstorage 被清理的几率会低一些。</p>
<p>当然，使用 localstorage 最大的问题，在于 XSS 的安全问题。一旦用户的 localstorage 被篡改，那么危险将会是持久的，即使漏洞已经被修复。这是由 localstorage 的生命周期决定的。</p>
<blockquote>
<p>关于保护 localstorage 内代码的安全，可以阅读 JerryQu 的<a href="https://imququ.com/post/enhance-security-for-ls-code.html" target="_blank" rel="external">《使用 SRI 增强 localStorage 代码安全》</a></p>
</blockquote>
<p>除此以外，大面积使用 localstorage 还需要考虑其他的问题，比如版本控制。只要一个项目还在迭代开发，就难以避免需要更新资源文件。普通的资源请求，可以根据 md5 或者在资源链接后面加上后缀 query 做标识来判断是否需要更新资源。如果用 localStorage 做，则需要一套新的缓存更新机制。</p>
<h1 id="小结"><a href="# 小结" class="headerlink" title="小结"></a>小结</h1><p>CDN 方案是加速静态文件访问的一种优秀方式，但是必须要面临缓存刷新和 CDN 的压力、回源的压力的问题。<br>localstorage 是优秀的强缓存方案，因为 localstorage 被清空的概率不大。但是要专门注意安全问题。SRI 和 CSP 都是不错的保护 localstorage 里的代码的方案。</p>
<p>所以，localstorage 的方案适合以下情况：</p>
<ul>
<li>同域下的每个页面都会用到的、频繁请求的文件</li>
<li>文件本身不需要经常更新如 jQuery、一些字体</li>
<li>为移动端或较差网络环境下的特殊加载优化</li>
<li>降低源站或 CDN 的压力</li>
<li>用 base64 存储一些小的图片减少请求并缓存</li>
</ul>
<h1 id="hexo-theme-material- 的应用方案"><a href="#hexo-theme-material- 的应用方案" class="headerlink" title="hexo-theme-material 的应用方案"></a>hexo-theme-material 的应用方案 </h1><p> 在 hexo-theme-material 的开发过程中，我们参考了 <a href="https://github.com/sexdevil/LSLoader" target="_blank" rel="external">LsLoader</a> 方案，设计了一套 localstorage 的使用方案，将项目的 css 和 js，以及 footer-sns-icon 的 svg 转换成 base64 储存在 localstorage 中，利用 localstorage 强缓存的特性加快页面加载速度，以及减少页面的 HTTP Request，达到页面优化的目的。<br>为了避免 css 加载先后出现页面抖动等问题，我们让页面默认 <code>display: none</code> 来阻止页面渲染，在 css 中写入 <code>display: block</code>，这样在 css 加载出来前，页面不会进行渲染，也不会抖动，改善了显示体验。不过在网络环境较差环境下 css 无法及时加载，就会导致页面持续白屏。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;localstorage 并不仅仅只是”狂拽酷炫吊炸天“的黑科技。在一些特殊场景下，甚至可能会有意想不到的收获。&lt;/p&gt;
    
    </summary>
    
      <category term="实验室" scheme="https://blog.nfz.moe/categories/%E5%AE%9E%E9%AA%8C%E5%AE%A4/"/>
    
    
      <category term="前端优化" scheme="https://blog.nfz.moe/tags/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/"/>
    
      <category term="localstorage" scheme="https://blog.nfz.moe/tags/localstorage/"/>
    
  </entry>
  
  <entry>
    <title>随时随地 Hexo——我是如何使用 Hexo 的</title>
    <link href="https://blog.nfz.moe/archives/use-hexo-at-any-time-any-place.html"/>
    <id>https://blog.nfz.moe/archives/use-hexo-at-any-time-any-place.html</id>
    <published>2017-05-01T04:58:27.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 是一个使用 Node.js 作为构建引擎的极速、简单且强大的静态博客架构。但 Hexo 只有在安装了 Hexo 的环境上才能运行。于是我设计了一套实现 Hexo 随时随地部署、随时随地发布的方案。</p>
<a id="more"></a>
<h1 id="同步 -Hexo- 工程"><a href="# 同步 -Hexo- 工程" class="headerlink" title="同步 Hexo 工程"></a>同步 Hexo 工程</h1><p>Hexo 和基于数据库的动态博客或者动静分离的博客不同，博客的文章等并不是储存在数据库中，而是由主题仓库、配置的 yml 文件，还有文章的 markdown 文件组成。这些我们称作是 Hexo 的工程文件。</p>
<h2 id="初始化 -Hexo- 工程文件"><a href="# 初始化 -Hexo- 工程文件" class="headerlink" title="初始化 Hexo 工程文件"></a>初始化 Hexo 工程文件 </h2><p> 安装完 Hexo 后，博客的目录中会包括以下内容：</p>
<pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">ls</span> -la
total 2043
drwxr-xr-x 1 Admin 197121       0 5 月   1 09:28 ./
drwxr-xr-x 1 Admin 197121       0 4 月  30 19:45 <span class="token punctuation">..</span>/
drwxr-xr-x 1 Admin 197121       0 5 月   1 11:03 .git/
-rw-r--r-- 1 Admin 197121      65 4 月   5 03:16 .gitignore
-rw-r--r-- 1 Admin 197121    2124 4 月  30 23:03 _config.yml
-rw-r--r-- 1 Admin 197121 1725099 5 月   1 10:39 db.json
-rw-r--r-- 1 Admin 197121   45375 4 月  22 13:04 debug.log
drwxr-xr-x 1 Admin 197121       0 4 月  28 22:31 drafts/
drwxr-xr-x 1 Admin 197121       0 5 月   1 09:19 node_modules/
-rw-r--r-- 1 Admin 197121     796 5 月   1 09:27 package.json
drwxr-xr-x 1 Admin 197121       0 5 月   1 09:28 public/
drwxr-xr-x 1 Admin 197121       0 4 月   5 03:16 scaffolds/
drwxr-xr-x 1 Admin 197121       0 4 月  29 12:08 source/
drwxr-xr-x 1 Admin 197121       0 4 月  30 23:03 themes/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这就是博客工程文件了。</p>
<p>同步文件的方法有很多种，常见的就是通过 云盘 同步和通过 Git 管理。<br>在这里我介绍的是通过 Git 管理和同步博客的工程文件。</p>
<blockquote>
<p>当然，Git 是 Hexo 的 dependencies，如果你装好了 Hexo，你肯定也装好了 Git。</p>
</blockquote>
<p>在你的 Hexo 的目录下使用 <code>git init</code> 初始化一个 Git 仓库。并在 <code>.gitignore</code> 中填入以下内容来排除不需要同步的部分：</p>
<pre><code>.DS_Store
Thumbs.db
db.json
*.log
node_modules/
public/
.deploy*/
</code></pre><p>然后自然是 <code>git remote add</code> <code>git add .</code> <code>git commit -m</code> <code>git push</code> 将你的博客工程文件推送到远端 Repo 当中。我的博客工程文件托管在 Coding 和 Gitlab 的私有库中。</p>
<h2 id="同步 -Hexo- 到另一台设备"><a href="# 同步 -Hexo- 到另一台设备" class="headerlink" title="同步 Hexo 到另一台设备"></a>同步 Hexo 到另一台设备 </h2><p> 一般教程上介绍的都是需要在远端重新安装一遍完整的 Hexo 并也初始化一个 Git 仓库，还需要 <code>git reset --hard</code> 来重置。。。我介绍另一种办法。</p>
<p>首先，在另一台终端上，使用 <code>npm install hexo-cli -g</code> 安装 Hexo 的基本命令行。这个是需要全局安装的。</p>
<blockquote>
<p>如果你安装了其它辅助工具，如我使用了 gulp 压缩 html，这时候就又需要额外全局安装 gulp。</p>
</blockquote>
<p>新建一个目录，并使用 <code>git clone</code> 将你的博客远端文件拉下来。cd 到你 clone 下来的目录里，直接使用 <code>npm install</code> 安装依赖。</p>
<blockquote>
<p>这一步中 npm 会使用 <code>package.json</code> 安装依赖。<code>package.json</code> 里面已经保存了 Hexo 的必备资源包信息, 包括基本的 Hexo、你曾经安装过的插件等等。<code>npm install</code> 后 Hexo 环境就建立起来了。</p>
</blockquote>
<p>等安装完了以后，迁移就完成了。以后在不同的设备上管理 Hexo 就像和管理 Git Repo 一样，使用 <code>git pull</code> <code>git add</code> <code>git commit</code> <code>git push</code> 指令即可。</p>
<p>我后来编写了一个 shell 脚本，可以实现在任何安装了 Git、Nodejs 的终端上完成一键安装 <code>hexo-cli</code> <code>gulp</code> 和执行 <code>npm install</code>（懒喵）</p>
<h2 id="在移动端使用 -Hexo"><a href="# 在移动端使用 -Hexo" class="headerlink" title="在移动端使用 Hexo"></a>在移动端使用 Hexo</h2><p>如果你想在移动端安装 Hexo，你可以读一读这篇文章：<a href="http://droid-max.github.io/2016/12/01/Share-1/" target="_blank" rel="external">《手机端部署 hexo 博客到 GithubPage》</a></p>
<p>但是，我并不建议这么做：手机端运行的速度远远不如电脑端，甚至不如 CI。我在手机端运行一次 <code>hexo g</code> 需要花费 37s，在 CI 只需要 11s，在我的电脑上是 2.7s。所以我在移动端依然是用 Git 管理 Hexo，然后，将页面生成的部分交给 CI 平台。这就是我接下来要讲的：</p>
<h1 id="用 -CI- 实现 -Hexo- 持续集成"><a href="# 用 -CI- 实现 -Hexo- 持续集成" class="headerlink" title="用 CI 实现 Hexo 持续集成"></a>用 CI 实现 Hexo 持续集成 </h1><p> 在一些情况下，你不能在某个设备上安装 Hexo，比如公共电脑之类的，有时你甚至只能在代码托管的网页端用 Web Editor 修改和发布博客。这样如何实现 Hexo 的发布呢？<br>你需要借助 CI，借助 CI 可以实现静态页面在远端生成和自动远端部署。</p>
<p>如何在 CI 平台上部署 Hexo，你可以阅读我的下列文章：</p>
<ul>
<li><a href="https://blog.nfz.moe/archives/hexo-auto-deploy-with-daocloud.html">《Hexo 持续自动化部署》</a></li>
<li><a href="https://blog.nfz.moe/archives/hexo-auto-deploy-with-flow-ci.html">《用 Flow.CI 让 Hexo 持续集成》</a></li>
<li><a href="https://blog.nfz.moe/archives/hexo-auto-deploy-with-gitlab-ci.html">《使用 Gitlab CI 实现 Hexo 持续部署》</a></li>
</ul>
<blockquote>
<p>你也可以将持续集成移植到 Travis CI 或者其它 CI 平台中。在 CI 安装 Hexo 和同步工程文件的过程可以参考本文之前的“同步 Hexo 到另一台设备”。</p>
</blockquote>
<h1 id="部署 -Hexo"><a href="# 部署 -Hexo" class="headerlink" title="部署 Hexo"></a>部署 Hexo</h1><p>如果你的博客是直接在部署到 Pages 服务上的话，那么就没什么需要担心的了。因为绝大部分 Pages 都支持 Git 部署。你只要根据文档配置 <code>hexo-deploy-git</code> 即可。<br>但是我的博客部署在自己独立的 WebServer 上，所以需要把生成的静态页面部署到我的 WebServer。为了安全，我没有直接在 WebServer 上部署 Repo，这样就不能直接一步到位地把静态页面 deploy 到 WebServer 上。</p>
<p>所以，这就是我的方案：<br>首先，我需要将我生成的页面部署到一个公开的 Git Repo 中，在这里我选择了 Github 新建一个 Repo。至于部署方式，我之前选择使用 SSH 连接 Github 的 Repo，后来改成使用 Github 的 <code>Personal access token</code> 来获得对 Repo 的写入权限。</p>
<p>通过 CI 的环境变量保管 SSH 或者 <code>Personal access token</code> 是最安全的选择。在 CI 的后台添加一个环境变量，将 <code>Personal access token</code> 写入其中。然后新建一个 <code>deploy.sh</code> 文件，写入以下内容：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ./public <span class="token comment" spellcheck="true">#生成的静态页面会存储在 public 目录下</span>
<span class="token function">git</span> init
<span class="token function">git</span> config --global push.default matching
<span class="token function">git</span> config --global user.email <span class="token string">"username@example.com"</span> <span class="token comment" spellcheck="true">#填入 GitHub 的邮箱地址</span>
<span class="token function">git</span> config --global user.name <span class="token string">"username"</span> <span class="token comment" spellcheck="true">#填入 GitHub 的用户名</span>
<span class="token function">git</span> add --all <span class="token keyword">.</span> <span class="token comment" spellcheck="true">#提交所有内容</span>
<span class="token function">git</span> commit -m <span class="token string">"Site updated with CI"</span> <span class="token comment" spellcheck="true">#自动构建后的内容将全部以此信息提交</span>
<span class="token function">git</span> push --quiet --force https://<span class="token punctuation">{</span>设置的环境变量名<span class="token punctuation">}</span><span class="token punctuation">}</span>@github.com/ 你的 GitHub 用户名 / 你的代码仓库名.git master
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>使用 SSH 也可以通过类似的方案实现。</p>
</blockquote>
<p>在 CI 的 workflow 中调用这个脚本即可实现 <code>hexo-deploy-git</code> 的效果。</p>
<blockquote>
<p>由于我在使用 Gitlab 的私有库保管工程文件，使用 Gitlab CI 持续集成。所以我直接“肆无忌惮”地直接 <code>hexo d</code> 的目标 <code>{Personal access token}@github.com/neoFelhz/MyBlog.git</code> 写进了 <code>hexo-deploy-git</code> 的配置中。严格来讲，这是非常不安全的。</p>
</blockquote>
<p>然后，在 WebServer 上部署一个 WebHook，然后在 Github 的 Repo 设定中添加该 WebHook，这样可以实现 Github 上 Repo 有更新时通知 WebServer 拉去静态页面的内容到 WebServer。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo 是一个使用 Node.js 作为构建引擎的极速、简单且强大的静态博客架构。但 Hexo 只有在安装了 Hexo 的环境上才能运行。于是我设计了一套实现 Hexo 随时随地部署、随时随地发布的方案。&lt;/p&gt;
    
    </summary>
    
      <category term="博客栈" scheme="https://blog.nfz.moe/categories/%E5%8D%9A%E5%AE%A2%E6%A0%88/"/>
    
    
      <category term="博客" scheme="https://blog.nfz.moe/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="https://blog.nfz.moe/tags/Hexo/"/>
    
      <category term="Git" scheme="https://blog.nfz.moe/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Web 性能优化（4）——探讨 data URI 的性能</title>
    <link href="https://blog.nfz.moe/archives/wpo-data-uri-performance.html"/>
    <id>https://blog.nfz.moe/archives/wpo-data-uri-performance.html</id>
    <published>2017-04-28T13:16:18.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>业内常会有 Data URI 的利与弊、用与不用的讨论，即使在最有经验的前端开发者眼中，也会形成对 data URI 截然不同的看法。</p>
<a id="more"></a>
<h1 id="什么是 -Data-URI"><a href="# 什么是 -Data-URI" class="headerlink" title="什么是 Data URI"></a>什么是 Data URI</h1><p>减少 Request，一直是业内公认的一项优化网站加载的方案。过去，对于众多图标类的小图片，通常都会采用雪碧图的方法合并多张小图片为一张大图片、来减少请求。现在，data URI 成为了新的选择。</p>
<p><a href="https://tools.ietf.org/html/rfc2397" target="_blank" rel="external">RFC2397</a> 中首次定义了 data URI 的规范和格式如下：</p>
<pre><code>data:[&lt;mime type&gt;][;charset=&lt;charset&gt;][;base64],&lt;encoded data&gt;
</code></pre><p>在这种格式中，data: 就是 URI 的协议，表明这是一个 data URI。<br><code>mime type</code>可能是 <code>image/png</code> 之类的，如果不填，默认是 <code>text/plain</code>。</p>
<h1 id="性能神器 - 还是弃之可惜的鸡肋"><a href="# 性能神器 - 还是弃之可惜的鸡肋" class="headerlink" title="性能神器 还是弃之可惜的鸡肋"></a>性能神器 还是弃之可惜的鸡肋 </h1><h2 id="节省请求全等于优化性能？"><a href="# 节省请求全等于优化性能？" class="headerlink" title="节省请求全等于优化性能？"></a> 节省请求全等于优化性能？</h2><p>首先，如果直接在 <code>&lt;img&gt;</code> 标签的 src 中使用 base64 时，图片出现很多次时就会需要把 base64 图片的文本内容重复很多次，导致 HTML 变大。虽然多次重复的内容很适合 Gzip，但对于浏览器来说，导入 HTML 并生成 DOM 则会被阻碍。而且多次重复的 data URI 浏览器会不断的暂停渲染和进行解码，如果使用 data URI 的文件过多过大，就会阻碍页面的渲染。<br>当然，你可以说，在 <code>style.css</code> 里写好 <code>background</code> 可以应对这个问题。<br>固然，将 data URI 写进 CSS 以后，似乎是减少了请求。但是这样做的缺点就没那么容易发现了。<strong>样式表会变得很大，从而阻塞关键下载和渲染</strong>。通俗地讲，图片文件的体积被转移到了 HTML 或 CSS 中，而后者的体积直接影响渲染，导致用户会长时间注视空白屏幕。HTML 和 CSS 阻塞渲染，图片不会。</p>
<blockquote>
<p>这是用户打开网页时浏览器加载页面的过程：</p>
<ul>
<li>下载 HTML 文档。HTML 内容准备就绪后，浏览器解析字节并构建 DOM 树。</li>
<li>在浏览器构建我们这个简单页面的 DOM 时，在文档的 head 部分遇到了一个 link 标签，该标记引用一个外部 CSS 样式表 <code>style.css</code>。由于预见到需要利用该资源来渲染页面，它立即发出了对该资源的请求。</li>
<li>与处理 HTML 时一样，我们需要将收到的 CSS 转换成浏览器能够理解和处理的东西。因此浏览器会重复解析过程，不过是为解析 CSS，而不是 HTML。它需要提取并解析 CSS 文件以构建页面。</li>
<li>在浏览器构建页面时，如果遇到了 <img> 标签，它意识到需要该资源来渲染页面，就会把该资源加入到请求队列。但是图片的暂时缺失不影响浏览器渲染其他部分。因此图片不会阻塞关键路径渲染。</li>
</ul>
</blockquote>
<p><img src="https://ooo.0o0.ooo/2017/04/28/59034895edcce.png" alt="0000089.png"></p>
<h2 id="Gzip- 能缓解这一切？"><a href="#Gzip- 能缓解这一切？" class="headerlink" title="Gzip 能缓解这一切？"></a>Gzip 能缓解这一切？</h2><p>Gzip 又是什么？</p>
<blockquote>
<p>Gzip 是在 Web 端最常用的一种压缩文本的方法。Gzip 压缩算法分两步。第一步，采用 LZ77 算法的一个变种替换字符串，第二步，使用 Huffman 树来储存出现的位置和长度。</p>
</blockquote>
<p>看不懂？我也看不懂。。不过我找到了下面这张图，这样就形象多了。</p>
<p><img src="https://ooo.0o0.ooo/2017/04/28/5903493366c89.png" alt="0000090.png"></p>
<p>HTML 中重复出现大量的 HTML 标签以及类名等，CSS 中重复出现大量的属性，JavaScript 中重复的函数调用等（即使经过混淆）。因此 HTML、CSS、JavaScript 的 Gzip 压缩率都是很高的。但是由于 base64 近乎于乱码的文本是无规律的，所以在 Gzip 中不达不到较高的压缩率。</p>
<h2 id="考虑考虑缓存？"><a href="# 考虑考虑缓存？" class="headerlink" title="考虑考虑缓存？"></a>考虑考虑缓存？</h2><p>如果我们把样式、图片文件合并到变成一个资源，我们就无法再分别为它们配置缓存时间，以及更新资源。而图片、HTML 和 CSS 的更新频率都是不一样的。<br>然而 CSS 文件的修改频率还算是较高的，图片其次。我们一般会为不同类型的文件利用缓存头设置不同的缓存失效时间，以及在更新某个文件之后单独更新这个文件的时间戳。但是混在一起之后，即使我们只是想更新 CSS 规则里面一个字号，整个巨大的文件就会重新生成。用户不得不在每次更新后重新下载整个大文件，这违背了基本的缓存原则。</p>
<hr>
<p>总结一下：</p>
<ul>
<li>base64 会让样式文件变得很大而阻塞关键下载和渲染</li>
<li>css 因 base64 增加的体积无法通过 Gzip 很好地压缩</li>
<li>浏览器渲染方面，增加了解析 css 的耗时</li>
<li>在 css 文件中过多使用 base64 会让首次渲染时间大幅增加，移动端影响可能更大</li>
</ul>
<h1 id="Data-URI- 的实践"><a href="#Data-URI- 的实践" class="headerlink" title="Data URI 的实践"></a>Data URI 的实践 </h1><p> 在 hexo-theme-material 1.4.0 版本的开发中为了优化页面加载，我们开始考虑应用 data URI。<br>由于 Material 主题 1.4.0 版本的前期开发中已经引进了一套基于 localstorage 的缓存方案，不怕强制刷新和禁用缓存，极大程度上优化了二次加载。<br>在这基础上，我将 footer sns 的 icon 独立了出来，使用 base64 加码，并独立存储在一个 css 当中。这个 css 便不需要经常更新。</p>
<p>Material 主题的 footer sns icon 是 svg。svg 的格式是：</p>
<pre class="line-numbers language-svg"><code class="language-svg">&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox= ...>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">...</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>不同的 svg 中，只有定义图像的 <code>&lt;path&gt;</code> 部分会有所不同，开头定义规范的部分之类的都完全相同，所以这一部分也是可以被 Gzip 压缩的，一定程度上缓解了传输文件大小的问题。</p>
<p>在实际测试中，直接加载外链的 svg，即使用了支持 HTTP2 的 CDN 可以连接多路复用，加载一个 svg 仍然需要 25ms，而且这一部分是最后加载的，直接影响了 DOMContentLoaded 的触发。采用该方案以后，DOMContentLoaded 提前了将近 15ms 左右触发，效果虽然不明显，但是说明这个方案毕竟是可行的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;业内常会有 Data URI 的利与弊、用与不用的讨论，即使在最有经验的前端开发者眼中，也会形成对 data URI 截然不同的看法。&lt;/p&gt;
    
    </summary>
    
      <category term="实验室" scheme="https://blog.nfz.moe/categories/%E5%AE%9E%E9%AA%8C%E5%AE%A4/"/>
    
    
      <category term="前端优化" scheme="https://blog.nfz.moe/tags/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/"/>
    
      <category term="base64" scheme="https://blog.nfz.moe/tags/base64/"/>
    
  </entry>
  
  <entry>
    <title>本博客的优化汇总</title>
    <link href="https://blog.nfz.moe/archives/optimization-of-my-blog.html"/>
    <id>https://blog.nfz.moe/archives/optimization-of-my-blog.html</id>
    <published>2017-04-23T08:25:00.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.nfz.moe/uploads/2017/04/0000087.png" alt="0000087.png"></p>
<p>我一直在关注我的博客的浏览体验，其中，网站的加载速度对于浏览体验来说是非常重要的。<a id="more"></a>我见过很多菊苣的博客，他们的博客加载速度却很一般（偷笑）我现在也在写一些 WPO 方面的文章，我并不想在写如何做好优化性能的同时，自己的博客却十分缓慢。<br>除了 Pageseed、YSlow 常见提到的颇有些老生常谈的一些优化手段以外，我的博客也用了其它一些零散的优化点。我把它们列举在这里。</p>
<h2 id="静态资源优化"><a href="# 静态资源优化" class="headerlink" title="静态资源优化"></a>静态资源优化 </h2><p> 如果你打开 Dev Tools，你会发现我的博客加载时除了一个用于网站统计的 <code>piwik.js</code> 以外，没有再引用任何大段的 css、js。</p>
<p><img src="https://ooo.0o0.ooo/2017/04/23/58fc6a439112b.png" alt="0000088.png"></p>
<p>这是 <code>hexo-theme-material</code> 的一个实验性特性，首次加载利用 XMLHttpRequest 从外部加载资源并异步执行，同时将其存入 localstorage，以后加载都通过 localstorage 加载，不再发起请求。<br>这样做的好处有：</p>
<ol>
<li>后续访问减少连接数</li>
<li>不怕刷新和强刷</li>
</ol>
<p>同时，我把这些文件部署在了又拍云的 CDN，这样在页面首次加载时也不会阻塞页面的加载。</p>
<blockquote>
<p>localstorage 这项特性将在 <code>hexo-theme-material</code> 1.4.0 版本中发布。</p>
</blockquote>
<h2 id="图片优化"><a href="# 图片优化" class="headerlink" title="图片优化"></a>图片优化 </h2><p><code>hexo-theme-material</code> 是很漂亮的、图文并茂的主题，这就意味着主题需要加载大量图片资源。不加载用户看不见的图片是一项最基本的优化（图片采用 lazyload）。这是老生常谈的话题，<code>hexo-theme-material</code> 也已经实现，在这里略过不谈。<br> 除了 lazyload 博客首页的缩略图以外，博客很多小而碎的图片都使用了 <code>date URI</code> 的方式来减少小资源的引用，避免增加 Request。比如博客侧边栏抽屉的又拍云的 svg 格式的 logo、比如页脚的 SNS 的几个图标（页脚的图标则是将 svg 格式转码成 base64 予以输出）</p>
<h2 id="Piwik- 统计优化"><a href="#Piwik- 统计优化" class="headerlink" title="Piwik 统计优化"></a>Piwik 统计优化</h2><p>Piwik 的统计和一般的统计不同在于，他们的 JS 是剥离出来的，统计时 <code>piwik.js</code> 可以不和架设 Piwik 的 WebServer 同源加载。所以我将 JS 托管在了又拍云的 CDN 上，同时改造了我的站点统计代码部分，将 JS 改到了又拍云上的 URI。以下是我修改过的示例代码。</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> _paq <span class="token operator">=</span> _paq <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
_paq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"setDomains"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string">"*.example.com"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _paq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"enableCrossDomainLinking"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _paq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"trackPageView"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _paq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"enableLinkTracking"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>_paq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"setTrackerUrl"</span><span class="token punctuation">,</span> <span class="token string">"https://piwik.nfz.moe/piwik.php"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _paq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"setSiteId"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> e <span class="token operator">=</span> document<span class="token punctuation">,</span>
        a <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        p <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    a<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/javascript"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>defer <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"//cdn.example.com/piwik/piwik.js"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>除此以外，和其它统计代码不同，我直接将其放在了页面底部。相比放在 <code>&lt;head&gt;</code> 标签之内，将 Piwik 统计代码放在页脚直接使 DOMContentLoaded 提前了 70ms 触发（大雾）</p>
</blockquote>
<h2 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h2><p>静态内容非常适合做缓存，来加速页面的访问。我的博客使用了 Service Worker 技术，利用 Service Worker 获取和 “劫持” 请求，可以大大改善博客的二次加载的时长，还可以实现离线访问已经被缓存的页面，改善了用户的体验。</p>
<hr>
<p>实际上，我的博客加载不逊于 BAT 主流网站，使用了 Hexo 静态博客框架也是一个很重要的原因。Hexo 是一款基于 NodeJS 的快速、简洁且高效的博客框架，能在几秒内渲染出上百个静态页面。静态博客相对于使用动态的博客，不需要查询数据库、动态生成页面等后端延迟，可以大大提升网站加载所需的时间。除此以外，我的博客部署于香港的主机，对国内和海外的线路都有很有优势。除此以外，我还部署了位于 Linode 的海外节点，又拍云 CDN 也有位于亚太和北美的海外节点，这改善了海外用户访问我的博客的体验（也就改善了那些挂着代理访问我博客的用户的浏览体验）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.nfz.moe/uploads/2017/04/0000087.png&quot; alt=&quot;0000087.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;我一直在关注我的博客的浏览体验，其中，网站的加载速度对于浏览体验来说是非常重要的。
    
    </summary>
    
      <category term="博客栈" scheme="https://blog.nfz.moe/categories/%E5%8D%9A%E5%AE%A2%E6%A0%88/"/>
    
    
      <category term="Hexo" scheme="https://blog.nfz.moe/tags/Hexo/"/>
    
      <category term="前端优化" scheme="https://blog.nfz.moe/tags/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>为博客启用 PWA 支持</title>
    <link href="https://blog.nfz.moe/archives/pwa-support-for-my-blog.html"/>
    <id>https://blog.nfz.moe/archives/pwa-support-for-my-blog.html</id>
    <published>2017-04-08T11:30:27.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>对于 native app 和 PWA 的纷争我不想发表太多看法，但是有一件事是确定的——PWA 极大改善了移动端用户的体验。</p>
</blockquote>
<a id="more"></a>
<p>好消息是改造你的网站为 Progressive Web Apps（PWAs）并不困难。这就是本文想介绍的——我是如何改造我的博客使之成为 PWA 的。</p>
<h1 id="启用全站 -HTTPS"><a href="# 启用全站 -HTTPS" class="headerlink" title="启用全站 HTTPS"></a>启用全站 HTTPS</h1><p>这是使用 PWA 的第一步。<br>这是由于一些显而易见的原因（其中，PWA 需要借助 ServiceWorker 是最主要的原因）<br>我旗下所有网站都已经启用了 HTTPS 支持。</p>
<h1 id="创建一个 -Service-Worker"><a href="# 创建一个 -Service-Worker" class="headerlink" title="创建一个 Service Worker"></a>创建一个 Service Worker</h1><p>ServiceWorker 是一个可以拦截和响应你的网络请求的编程接口，具备有可以高效的缓存、提供通知和离线访问的特性。<br>Service Worker 很复杂，你可以修改示例代码来达到自己的目的。<a href="https://gist.github.com/neoFelhz/50800b701d00dc6d874be95da2cd7655" target="_blank" rel="external">这里 </a> 是一个标准的 Web Worker，浏览器用一个单独的线程来下载和执行它。它没有调用 DOM 和其他页面 API 的能力，但它可以拦截网络请求，包括页面切换，静态资源下载。你要做的不过是启用它。<br>关于如何用上述示例代码启用一个最简单的 ServiceWorker，你可以阅读<a href="https://blog.nfz.moe/archives/wpo-by-service-worker.html">《Web 性能优化（2）——浅尝 Service Worker》</a>。</p>
<h1 id="创建 -Web-App-Manifest"><a href="# 创建 -Web-App-Manifest" class="headerlink" title="创建 Web App Manifest"></a>创建 Web App Manifest</h1><p>manifest 文件提供了一些我们网站的信息，例如 name，description 和需要在主屏使用的图标的图片，启动屏的图片等。<br>manifest 文件是一个 JSON 格式的文件，位于你项目的根目录。它必须用 <code>Content-Type: application/manifest+json</code> 或者 <code>Content-Type: application/json</code> 这样的 HTTP 头来请求。</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"name"</span>              <span class="token operator">:</span> <span class="token string">"PWA Website"</span><span class="token punctuation">,</span>
  <span class="token property">"short_name"</span>        <span class="token operator">:</span> <span class="token string">"PWA"</span><span class="token punctuation">,</span>
  <span class="token property">"description"</span>       <span class="token operator">:</span> <span class="token string">"An example PWA website"</span><span class="token punctuation">,</span>
  <span class="token property">"start_url"</span>         <span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>
  <span class="token property">"display"</span>           <span class="token operator">:</span> <span class="token string">"standalone"</span><span class="token punctuation">,</span>
  <span class="token property">"orientation"</span>       <span class="token operator">:</span> <span class="token string">"any"</span><span class="token punctuation">,</span>
  <span class="token property">"background_color"</span>  <span class="token operator">:</span> <span class="token string">"#ACE"</span><span class="token punctuation">,</span>
  <span class="token property">"theme_color"</span>       <span class="token operator">:</span> <span class="token string">"#ACE"</span><span class="token punctuation">,</span>
  <span class="token property">"icons"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">"src"</span>           <span class="token operator">:</span> <span class="token string">"/images/logo/logo072.png"</span><span class="token punctuation">,</span>
      <span class="token property">"sizes"</span>         <span class="token operator">:</span> <span class="token string">"72x72"</span><span class="token punctuation">,</span>
      <span class="token property">"type"</span>          <span class="token operator">:</span> <span class="token string">"image/png"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">"src"</span>           <span class="token operator">:</span> <span class="token string">"/images/logo/logo192.png"</span><span class="token punctuation">,</span>
      <span class="token property">"sizes"</span>         <span class="token operator">:</span> <span class="token string">"192x192"</span><span class="token punctuation">,</span>
      <span class="token property">"type"</span>          <span class="token operator">:</span> <span class="token string">"image/png"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">"src"</span>           <span class="token operator">:</span> <span class="token string">"/images/logo/logo256.png"</span><span class="token punctuation">,</span>
      <span class="token property">"sizes"</span>         <span class="token operator">:</span> <span class="token string">"256x256"</span><span class="token punctuation">,</span>
      <span class="token property">"type"</span>          <span class="token operator">:</span> <span class="token string">"image/png"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">"src"</span>           <span class="token operator">:</span> <span class="token string">"/images/logo/logo512.png"</span><span class="token punctuation">,</span>
      <span class="token property">"sizes"</span>         <span class="token operator">:</span> <span class="token string">"512x512"</span><span class="token punctuation">,</span>
      <span class="token property">"type"</span>          <span class="token operator">:</span> <span class="token string">"image/png"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是一个 PWA Manifest 的示例。你可以通过简单修改它后在自己的网站上启用。<br>可选的属性有：</p>
<ul>
<li>name —— 网页显示给用户的完整名称</li>
<li>short_name —— 当空间不足以显示全名时的网站缩写名称</li>
<li>description —— 关于网站的详细描述</li>
<li>start_url —— 网页的初始 相对 URL（比如 /）</li>
<li>scope —— 导航范围。比如，<code>`/app/</code>的 scope 就限制 <code>app</code> 在这个文件夹里。</li>
<li>background-color —— 启动屏和浏览器的背景颜色</li>
<li>theme_color —— 网站的主题颜色，一般都与背景颜色相同，它可以影响网站的显示</li>
<li>orientation —— 首选的显示方向：any, natural, landscape, landscape-primary, landscape-secondary, portrait, portrait-primary, 和 portrait-secondary。</li>
<li>display —— 首选的显示方式：fullscreen, standalone (看起来像是 native app)，minimal-ui (有简化的浏览器控制选项) 和 browser (常规的浏览器 tab)</li>
<li>icons —— 定义了 src URL, sizes 和 type 的图片对象数组，用来定义 PWA 的 icon。</li>
</ul>
<blockquote>
<p>你可以在 <a href="https://developer.mozilla.org/en-US/docs/Web/Manifest" target="_blank" rel="external">MDN</a> 中找到对 <code>manifest</code> 详细说明。</p>
</blockquote>
<p>最后，在 HTML 内引用这个文件。</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>manifest<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/manifest.json<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="调试"><a href="# 调试" class="headerlink" title="调试"></a>调试 </h1><p> 现代浏览器都提供了完善的调试工具。本文以 Chrome 为例。</p>
<h2 id="调试 -Manifest"><a href="# 调试 -Manifest" class="headerlink" title="调试 Manifest"></a>调试 Manifest</h2><p>在开发者工具中的 <code>Application</code> 选项卡左边有 <code>Manifest</code> 选项，你可以验证你的 manifest JSON 文件，并提供了 <code>Add to homescreen</code>。执行操作，检查控制台日志是否有报错。</p>
<p><img src="https://img.nfz.moe/uploads/2017/04/0000085.png" alt="0000085.png"></p>
<h2 id="调试 -ServiceWorker"><a href="# 调试 -ServiceWorker" class="headerlink" title="调试 ServiceWorker"></a>调试 ServiceWorker</h2><p>在开发者工具中的 <code>Application</code> 选项卡左边的 <code>Application</code> 选项中你可以轻松地调试你的 ServiceWorker。</p>
<p><img src="https://img.nfz.moe/uploads/2017/04/0000086.png" alt="0000086.png"></p>
<p>点击 <code>Offline</code>，检查你的离线页面是否正常工作。</p>
<blockquote>
<p>在 <code>Clear storage</code> 选项中你可以清除 ServiceWorker 的缓存。</p>
<p>技巧：用 隐身窗口 来测试你的 PWA，这样在你关闭这个窗口之后缓存就不会保留下来。</p>
</blockquote>
<hr>
<p>上述调试都通过了？把你的网站部署上生产环境吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;对于 native app 和 PWA 的纷争我不想发表太多看法，但是有一件事是确定的——PWA 极大改善了移动端用户的体验。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="博客栈" scheme="https://blog.nfz.moe/categories/%E5%8D%9A%E5%AE%A2%E6%A0%88/"/>
    
    
      <category term="PWA" scheme="https://blog.nfz.moe/tags/PWA/"/>
    
      <category term="Web" scheme="https://blog.nfz.moe/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Web 性能优化（3）——AppCache</title>
    <link href="https://blog.nfz.moe/archives/wpo-using-appcache.html"/>
    <id>https://blog.nfz.moe/archives/wpo-using-appcache.html</id>
    <published>2017-04-08T09:29:27.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p> 虽然所有浏览器都有缓存机制，还有基于 304 的响应，但它们并不可靠，也不一定总能起到预期的作用。HTML5 使用 <a href="https://html.spec.whatwg.org/#applicationcache" target="_blank" rel="external">ApplicationCache</a> 接口解决了缓存问题。</p>
<a id="more"></a>
<blockquote>
<p> 注意！AppCache 由于一些问题，已经逐渐被弃用；而且生成 AppCache 的 manifest 较为麻烦。推荐使用 Service Worker。<br> 如果你的网站同时启用了 AppCache 和 ServiceWorker，而且浏览者的浏览器支持 ServiceWorker，那么 AppCache 不会生效。</p>
</blockquote>
<p> 想要体验 ServiceWorker 的效果，可以使用 Chrome 访问我的博客。如果想要体验 AppCache 的效果，可以用任何较为现代的浏览器访问我的个人主页。<br> 现在我简单介绍如何启用 AppCache。</p>
<h1 id="AppCache-Manifest"><a href="#AppCache-Manifest" class="headerlink" title="AppCache Manifest"></a>AppCache Manifest</h1><h2 id="Manifest- 基本结构"><a href="#Manifest- 基本结构" class="headerlink" title="Manifest 基本结构"></a>Manifest 基本结构 </h2><pre><code>CACHE MANIFEST
index.html
https://cdn.example.com/css/style.css
img/logo.png
js/index.min.js
</code></pre><p> 这是一个基本的 Manifest 的结构。这个文件会指定浏览器强制加载这些资源。</p>
<h2 id="Manifest- 进阶"><a href="#Manifest- 进阶" class="headerlink" title="Manifest 进阶"></a>Manifest 进阶 </h2><pre><code>CACHE MANIFEST
# 201704081742
CACHE:
/favicon.ico
index.html
https://cdn.example.com/css/style.css
img/logo.png
js/index.min.js

# Resources that require the user to be online.
NETWORK:
login.php
/myapi
https://api.nfz.moe

FALLBACK:
images/large/ images/offline.svg
*.html /offline.html
</code></pre><p>Manifest 提供以下几种用法：</p>
<ul>
<li>CACHE（这是条目的默认部分。浏览器会在首次访问时下载此标头下或紧跟在 CACHE MANIFEST 后列出的的文件，并对这些文件加以显式缓存）</li>
<li>NETWORK（此部分下列出的文件是需要连接到服务器的白名单资源。无论用户是否处于离线状态，对这些资源的所有请求都会绕过缓存；可使用通配符）</li>
<li>FALLBACK（此部分是可选的，用于指定无法访问资源时的后备网页。其中第一个 URI 代表资源，第二个代表后备网页。两个 URI 必须相关，并且必须与清单文件同源；可使用通配符）</li>
</ul>
<h2 id="引用 -Manifest"><a href="# 引用 -Manifest" class="headerlink" title="引用 Manifest"></a> 引用 Manifest</h2><p> 在编写了 Manifest 以后，你需要在 HTML 里引用它。将 Manifest 命名成 <code>name.appcache</code>，并在 <code>&lt;html&gt;</code> 标签内引用。</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">manifest</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name.appcache<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p> 清单文件可使用任何文件扩展名，但必须以正确的 MIME 类型提供。</p>
<h1 id="AppCache- 规范"><a href="#AppCache- 规范" class="headerlink" title="AppCache 规范"></a>AppCache 规范 </h1><ul>
<li> 缓存的文件大小总和不得超过 5 MB</li>
<li>Manifest 中的几个部分可按任意顺序排列，且每个部分均可在同一清单中重复出现。</li>
<li><ul>
<li><code>CACHE MANIFEST</code> 必须在 Manifest 文件开头 </li>
</ul>
</li>
<li> 浏览器会自动缓存引用 Manifest 的 HTML 文件。但是我依然建议把需要的 HTML 都添加进去 </li>
<li>Manifest 在引用时可指向绝对网址或相对路径，但绝对网址必须与相应的网络应用同源 </li>
<li>Manifest 必须以 <code>appcahe</code> 的 MIMETYPE 形式加载 </li>
<li> 如果清单文件或其中指定的资源无法下载，就无法进行整个缓存更新进程。此时浏览器将继续使用之前缓存的文件 </li>
<li> 带 HTTP 缓存头、以及通过 SSL 提供的网页设置的缓存可实现离线运行 </li>
<li>AppCache 不会自动刷新缓存，除非：<ul>
<li> 用户清除了浏览器对您网站的数据存储 </li>
<li> 清单文件经过修改 </li>
<li> 更新清单中列出的某个文件并不意味着浏览器会重新缓存该资源 </li>
</ul>
</li>
</ul>
<blockquote>
<p> 在 Manifest 内添加一行带注释的版本号是一种控制缓存刷新的有效方法。</p>
</blockquote>
<h1 id="Can-I-Use"><a href="#Can-I-Use" class="headerlink" title="Can I Use?"></a>Can I Use?</h1><p><a href="http://caniuse.com/#feat=offline-apps" target="_blank" rel="external">http://caniuse.com/#feat=offline-apps</a></p>
<p><img src="https://img.nfz.moe/uploads/2017/04/0000084.png" alt="0000084.ong"></p>
<p>AppCache 是 HTML5 的基本规范之一，所以对大部分浏览器来说都是兼容的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然所有浏览器都有缓存机制，还有基于 304 的响应，但它们并不可靠，也不一定总能起到预期的作用。HTML5 使用 &lt;a href=&quot;https://html.spec.whatwg.org/#applicationcache&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ApplicationCache&lt;/a&gt; 接口解决了缓存问题。&lt;/p&gt;
    
    </summary>
    
      <category term="实验室" scheme="https://blog.nfz.moe/categories/%E5%AE%9E%E9%AA%8C%E5%AE%A4/"/>
    
    
      <category term="前端优化" scheme="https://blog.nfz.moe/tags/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/"/>
    
      <category term="AppCache" scheme="https://blog.nfz.moe/tags/AppCache/"/>
    
  </entry>
  
  <entry>
    <title>妄想 Paranoia 歌词 API 文档</title>
    <link href="https://blog.nfz.moe/archives/delasaka-paranoia-api.html"/>
    <id>https://blog.nfz.moe/archives/delasaka-paranoia-api.html</id>
    <published>2017-04-04T08:26:00.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>封面：β<br>取自 <a href="http://www.bilibili.com/video/av8264026/" target="_blank" rel="external">妄想症系列专辑预热宣传</a> 视频封面</p>
</blockquote>
<a id="more"></a>
<h1 id="妄想症 -Paranoia-API"><a href="# 妄想症 -Paranoia-API" class="headerlink" title="妄想症 Paranoia API"></a>妄想症 Paranoia API</h1><blockquote>
<p>API 内收录所有歌词，版权归 妄想症系列 策划 / 作词 <a href="http://weibo.com/sakacastle" target="_blank" rel="external">雨狸</a> 所有！</p>
</blockquote>
<ul>
<li>更新：2017 年 4 月 4 日 上线</li>
<li>问题反馈：neofelhz@gmail.com</li>
<li>调用实例：数据获取</li>
<li>技术支持：Hadestack 提供思路</li>
</ul>
<h1 id="数据获取方式"><a href="# 数据获取方式" class="headerlink" title="数据获取方式"></a>数据获取方式</h1><ul>
<li>请求地址：<a href="https://api.nfz.moe/paranoia/" target="_blank" rel="external">https://api.nfz.moe/paranoia/</a> （仅支持 HTTPS。域名已启用 HSTS 响应头）</li>
<li>请求方式：GET</li>
<li>请求参数：<ul>
<li>charset：字符集，支持 GBK/UTF-8</li>
<li>encode：数据可返回函数名为 <code>paranoia</code> 的 JavaScript 脚本用于同步调用</li>
</ul>
</li>
</ul>
<h1 id="实例"><a href="# 实例" class="headerlink" title="实例"></a>实例 </h1><h2 id="直接请求"><a href="# 直接请求" class="headerlink" title="直接请求"></a> 直接请求</h2><ul>
<li>请求：<a href="https://api.nfz.moe/paranoia/" target="_blank" rel="external">https://api.nfz.moe/paranoia/</a></li>
<li>返回：<code>我享受一场爱恋 在现下的时光中间 餐桌精巧的糕点 他俊朗的容颜</code></li>
</ul>
<h2 id="Javascript-HTML"><a href="#Javascript-HTML" class="headerlink" title="Javascript + HTML"></a>Javascript + HTML</h2><p>脚本地址：<code>https://api.nfz.moe/paranoia/?encode=js</code></p>
<p>在 <code>&lt;body&gt;</code> 标签内引用 JavaScript：</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://api.nfz.moe/paranoia/?encode<span class="token punctuation">=</span>js&amp;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在你需要展示一句话的地方加上：</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>paranoiaapi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>paranoia()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>支持其它 css 样式。</p>
<blockquote>
<p><a href="https://api.nfz.moe/paranoia/paranoia.html" target="_blank" rel="external">HTML 调用实例</a></p>
</blockquote>
<p>该脚本实质为使用 document.write 的脚本。</p>
<h1 id="源码"><a href="# 源码" class="headerlink" title="源码"></a>源码 </h1><p> 受限于歌词版权，本人不开源使用的 妄想 Paranoia 歌词 API 所用源码。其 API 的核心部分源码择日开源。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;封面：β&lt;br&gt;取自 &lt;a href=&quot;http://www.bilibili.com/video/av8264026/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;妄想症系列专辑预热宣传&lt;/a&gt; 视频封面&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="实验室" scheme="https://blog.nfz.moe/categories/%E5%AE%9E%E9%AA%8C%E5%AE%A4/"/>
    
    
      <category term="API" scheme="https://blog.nfz.moe/tags/API/"/>
    
      <category term="VOCALOID" scheme="https://blog.nfz.moe/tags/VOCALOID/"/>
    
  </entry>
  
  <entry>
    <title>独立博客 200 天统计</title>
    <link href="https://blog.nfz.moe/archives/blog-analytics-of-first-200-days.html"/>
    <id>https://blog.nfz.moe/archives/blog-analytics-of-first-200-days.html</id>
    <published>2017-04-03T00:29:00.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>转瞬间，我的博客已经存在了 200 天了。这期间，我的博客几经辗转，域名也一换再换。最终终于“安顿”下来，我却依然在不懈地折腾。折腾，也许是我的博客最好的概括和写照吧。</p>
<h1 id="过去的辗转和周折"><a href="# 过去的辗转和周折" class="headerlink" title="过去的辗转和周折"></a>过去的辗转和周折 </h1><p> 在 moehentai 的一篇文章的帮助下，我注册了 Hostinger 的免费主机，走上了建站的道路。</p>
<blockquote>
<p>话说回来，当初是 moehentai 带我走上了建站的道路。结果后来我很快自学了一点点微小的前端的知识、参与了 material 主题的开发以后，他作为切换到使用 material 主题的用户，却开始向我请教了。<br>还有，Hostinger 的主机是真的良心。虽然是免费的虚拟主机，却有独立 IP，套餐也非常诱人，而且从来没有宕机或者跑路，200 天来一直稳定的运行着。现在我拿它架设了一个奇怪的图床，用来放一些奇奇怪怪的东西。</p>
</blockquote>
<p>那时一直在用分销的主机。除了 Hostinger，我还用过 Byehost 旗下的很多分销的主机，例如 FreeCloudHost。后来在 <a href="https://blackyau.cc" target="_blank" rel="external"> 蠢黑通行 </a> 和<a href="https://letitfly.me" target="_blank" rel="external">让技术飞 </a> 的推荐和帮助之下，我购买了 <a href="https://www.rkecloud.com/?refcode=d5c140a80c" target="_blank" rel="external"> 锐壳云 </a> 的虚拟主机，走上正经建站的道路。</p>
<blockquote>
<p>不知道以现在极致追求网站加载速度的我来看那时候的免费主机，会不会被气死~</p>
</blockquote>
<p>域名之前也一直在用免费的。从 Afraid.org 注册了不少二级域名 neofelhz.labodev.com、neofelhz.mooo.com。还有后来的 neofelhz.ga、neofz.ga。之后在锐壳云花了 40 元买了四年的 neofelhz.space 域名（现在这个域名依然绑定着我网站的一些服务）。在这些挠痒痒之后，我痛下决心，在 NameSilo 上花费 89 元购入了现在的这个还算挺短的域名：<strong>nfz.moe</strong></p>
<p>之前在使用 Typecho（那时候就是因为 Via 浏览器作者在使用 Typecho，那时对这个简洁快速的博客驱动系统特别感兴趣），后来看见了 Material 主题，愈发坚定了使用 Typecho 的决心。</p>
<blockquote>
<p>也就是那时候起，我开始知道了 viosey 这个名字。我自己那时候也没有想到，我自己也能参与到 Material 主题的开发。喵呜~</p>
</blockquote>
<p>这些故事和心得，我并没有完整地写在 <a href="https://blog.nfz.moe/history.html"> 小站历史</a>，直到现在我在这里写出来。</p>
<h1 id="博客文章统计"><a href="# 博客文章统计" class="headerlink" title="博客文章统计"></a>博客文章统计 </h1><p> 本博客最早一篇文章创建于 2016 年 8 月 29 日，是<a href="https://blog.nfz.moe/archives/how-to-choose-customlized-rom-and-stock-ui.html">《如何选择 AOKP 类 ROM 和厂商定制 UI》</a>。那时候还在用 Typecho 写博客。后来切换到了 Hexo，并迁移了大部分文章。<br>200 天以来，我总共写了 40 篇文章（算上这篇，就有 41 篇啦）。这 41 篇文章中分别属于以下 5 个分类：</p>
<ul>
<li>分享镜：来分享一些资源和使用教程</li>
<li>博客栈：记录了我折腾博客的经历</li>
<li>实验室：技术向的一些内容，包括 Android 和 Web 方面的东西</li>
<li>异闻堂：讲述一些 Android 和 Web 方面一些奇闻轶事</li>
<li>自言语：抛去技术和开发，用小说或者故事来讲述自己的一些故事</li>
</ul>
<p>我写了这 40 多篇文章中，实验室、博客栈和异闻堂三个分类独占鳖头。总的来说，我想要做一个技术型的博客的初心是没有改变的。毕竟，如果不是为了这个初衷，我根本没有必要架设一个独立运营的博客。</p>
<h1 id="访问统计"><a href="# 访问统计" class="headerlink" title="访问统计"></a>访问统计 </h1><p> 本站从 2016 年 11 月 25 日起，弃用 Typecho 和 Typecho 的 Access 统计插件，开始使用开源的 Piwik 程序、架设自己的网站访问数据统计服务。</p>
<h2 id="PV-amp-UV"><a href="#PV-amp-UV" class="headerlink" title="PV &amp; UV"></a>PV &amp; UV</h2><p>本博客从 2016 年 11 月 25 日起至今总共迎来了 14452    名访客，总计 63052 的 PV。</p>
<p><img src="https://img.nfz.moe/uploads/2017/04/0000080.png" alt="0000080.jpg"></p>
<p>2016 年 12 月 22 日，我第一次在酷安分享我的博客，引发了第一次访问高峰（还吃掉了七牛 1G 的流量）<br>2017 年 1 月 23 日，我写了 <a href="https://blog.nfz.moe/archives/lets-check-and-study-wechat-trojan.html">《拨开云雾见天明——解析酷安新出现的微信盗号木马》</a>，并把文章同步发布在了知乎和酷安。<br> 访问高峰最后于 2 月末结束，我的博客又成为鲜有访问的状态了。</p>
<h2 id="操作系统与浏览器"><a href="# 操作系统与浏览器" class="headerlink" title="操作系统与浏览器"></a>操作系统与浏览器 </h2><p> 作为一个致力于做技术性的博客站点，我来展示一下我的访客使用的设备。</p>
<p><img src="https://img.nfz.moe/uploads/2017/04/0000082.png" alt="0000082.jpg"></p>
<p>显然，访问我博客的以移动端为主，这与我之前主要在酷安推广我的博客有关。<br>我的博客无论是在界面还是加载方面，都有对移动端做了特殊的优化。</p>
<p><img src="https://img.nfz.moe/uploads/2017/04/0000081.png" alt="0000081.jpg"></p>
<p>我的访客主要使用 Chrome 和 Chrome Mobile，几乎没有 IE 和 Edge 这类 outdated 浏览器。这意味着我可以很自由地使用各种新的技术来优化我博客加载和界面，为用户提供最好的访问体验。</p>
<h2 id="访问者来源"><a href="# 访问者来源" class="headerlink" title="访问者来源"></a>访问者来源</h2><p><img src="https://img.nfz.moe/uploads/2017/04/0000083.png" alt="0000083.jpg"></p>
<p>我的网站访客主要来自知乎，这与我在知乎推广了《拨开云雾见天明——解析酷安新出现的微信盗号木马》一文有重要关系。其次是我的个人主页（neofelhz.space 是我的旧的域名）和酷安。<br>还有，我和一些站点互换了的友链也为我带来了来源。感谢 <a href="https://letitfly.me" target="_blank" rel="external"> 让技术飞</a>、<a href="https://viosey.com" target="_blank" rel="external">Viosey</a> 以及其他网站给我带来的流量！</p>
<h1 id="写在最后"><a href="# 写在最后" class="headerlink" title="写在最后"></a>写在最后 </h1><p> 架设独立博客其实很容易，坚持写原创的东西也很不容易。我也目睹了一些站点的消失、目睹了一些网站停止更新。<br>不忘初心，方得始终。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转瞬间，我的博客已经存在了 200 天了。这期间，我的博客几经辗转，域名也一换再换。最终终于“安顿”下来，我却依然在不懈地折腾。折腾，也许是我的博客最好的概括和写照吧。&lt;/p&gt;
&lt;h1 id=&quot;过去的辗转和周折&quot;&gt;&lt;a href=&quot;# 过去的辗转和周折&quot; class=&quot;he
    
    </summary>
    
      <category term="博客栈" scheme="https://blog.nfz.moe/categories/%E5%8D%9A%E5%AE%A2%E6%A0%88/"/>
    
    
      <category term="博客" scheme="https://blog.nfz.moe/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="https://blog.nfz.moe/tags/Hexo/"/>
    
      <category term="Typecho" scheme="https://blog.nfz.moe/tags/Typecho/"/>
    
  </entry>
  
  <entry>
    <title>Web 性能优化（2）——分析 Prefetch</title>
    <link href="https://blog.nfz.moe/archives/wpo-by-prefetch.html"/>
    <id>https://blog.nfz.moe/archives/wpo-by-prefetch.html</id>
    <published>2017-03-26T07:22:18.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>预加载的作用并不是直接加快网站的加载速度。预加载是提前准备好你所需要的资源，然后当需要的时候即可直接调用、直接完成页面的渲染，不造成阻塞。</p>
<a id="more"></a>
<h1 id="常见 -Prefetch- 用法"><a href="# 常见 -Prefetch- 用法" class="headerlink" title="常见 Prefetch 用法"></a>常见 Prefetch 用法 </h1><p> 资源预加载是另一个性能优化技术，我们可以使用该技术来预先告知浏览器某些资源可能在将来会被使用到。如果我们正确使用这些预获取技术，可以显著提升用户的体验。</p>
<h2 id="DNS- 预解析 -Prefetch"><a href="#DNS- 预解析 -Prefetch" class="headerlink" title="DNS 预解析 Prefetch"></a>DNS 预解析 Prefetch</h2><p>DNS 预解析告诉浏览器将来我们可能会从哪里获取文件，从而提前完成 <code>DNS Look Up</code> 的操作。这意味着当浏览器真正请求该域中的某个资源时，DNS 的解析就已经完成了。<br>实现 DNS-Prefetch 只需要在 <code>&lt;head&gt;</code> 内加入：</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//example.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>实际上，单纯执行 DNS-Prefetch 只能够微小的提升浏览性能，因为大部分现代浏览器也都内置了预解析的功能，<del>甚至在你在地址栏输入域名时就完成了预解析。开启这个优化算是聊胜于无吧。</del><br>更正一下，后来我阅读了 Chormium 的文档，得到以下信息：</p>
<ul>
<li>不用对超链接做手动 dns prefetching，因为 chrome 会自动做 dns prefetching</li>
<li>chrome 会自动把当前页面的所有带 href 的 link 的 dns 都 prefetch 一遍</li>
<li>但是。对于一些需要跳转的域名做好预解析，最多可以减少 300~500ms 的加载时间</li>
</ul>
</blockquote>
<h2 id="预连接 -Preconnect"><a href="# 预连接 -Preconnect" class="headerlink" title="预连接 Preconnect"></a>预连接 Preconnect</h2><p>和 DNS 预解析有些类似，不过 Preconnect 的预连接的特点在于不仅完成 DNS 预解析，同时还将进行 TCP 握手和建立传输层协议，预先建立 socket 连接，从而消除昂贵的 DNS 查找、TCP 握手和 TLS 往返开销。<br>实现 <code>Preconnect</code> 只需要在 <code>&lt;head&gt;</code> 中加入：</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>preconnect<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://example.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="预获取 -Prefetching"><a href="# 预获取 -Prefetching" class="headerlink" title="预获取 Prefetching"></a>预获取 Prefetching</h2><p>如果我们确定某个资源将来一定会被使用到，我们可以让浏览器预先请求并下载该资源并放入浏览器缓存中。<br>Prefetching 有两种用法。其中 <code>prefetch</code> 为将来的页面提供了一种低优先级的资源预加载方式，而 <code>subresource</code> 为当前页面提供了一种高优先级的资源预加载。所以，如果资源是当前页面必须的，或者资源需要尽快可用，那么最好使用 <code>subresource</code>。用法如下：</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subresource<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>styles.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="Can-I-Use"><a href="#Can-I-Use" class="headerlink" title="Can I Use?"></a>Can I Use?</h1><ul>
<li>DNS Prefetch</li>
</ul>
<p><a href="http://caniuse.com/#feat=link-rel-dns-prefetch" target="_blank" rel="external">http://caniuse.com/#feat=link-rel-dns-prefetch</a></p>
<p><img src="https://ooo.0o0.ooo/2017/03/26/58d770e8a3d41.png" alt="0000074.png"></p>
<ul>
<li>Preconnect</li>
</ul>
<p><a href="http://caniuse.com/#feat=link-rel-preconnect" target="_blank" rel="external">http://caniuse.com/#feat=link-rel-preconnect</a></p>
<p><img src="https://ooo.0o0.ooo/2017/03/26/58d77154e5da9.png" alt="0000075.png"></p>
<ul>
<li>Prefetching</li>
</ul>
<p><a href="http://caniuse.com/#feat=link-rel-prefetch" target="_blank" rel="external">http://caniuse.com/#feat=link-rel-prefetch</a></p>
<p><img src="https://ooo.0o0.ooo/2017/03/26/58d7718a1ad13.png" alt="0000076.png"></p>
<blockquote>
<p>连 IE 都支持了，Safari 和 iOS 你个辣鸡~</p>
</blockquote>
<ul>
<li>Subrecource</li>
</ul>
<p><a href="http://caniuse.com/#feat=subresource-integrity" target="_blank" rel="external">http://caniuse.com/#feat=subresource-integrity</a></p>
<p><img src="https://ooo.0o0.ooo/2017/03/26/58d772131b272.png" alt="0000077.png"></p>
<h1 id="实际意义"><a href="# 实际意义" class="headerlink" title="实际意义"></a>实际意义 </h1><p> 介绍了这么多，预加载和预解析有什么用呢？</p>
<p>首先，大家通常知道 <code>&lt;script&gt;</code> 标签有必要放在 <code>&lt;body&gt;</code> 的尾部，css 要尽可能早的加载，这已经是“业界规范”了。</p>
<blockquote>
<p>虽然 <a href="http://delai.me/code/js-and-performance/" target="_blank" rel="external"> 这篇文章 </a> 得出 <code>&lt;script&gt;</code> 的位置网页渲染对其实无影响。</p>
</blockquote>
<p>但无论如何不可否认，CSS 严重影响网站的渲染，所有 CSS 尽早加载是减少首屏时间的最关键。那么在浏览器加载 DOM 树时预加载 CSS 文件可以加快网站加载速度。<br>既然 Web 性能优化的手段并不是非黑即白的，对于 JS 的意见不一，预加载也不是什么坏事，尤其是使用了 CDN 从引用 JS。</p>
<p>还有 Fonts。Fonts 大部分都是 DOMLoad 以后才会开始加载的。所以我们可以通过预加载的方式获取到字体，这样 DOMLoad 完用字体对页面进行重新渲染时就不需要再发起请求加载字体。</p>
<p>实际运用时，要根据实际情况使用预加载和预解析的技巧，可以有效加快网站访问速度。</p>
<hr>
<p>本文参考资料</p>
<ul>
<li><a href="http://bubkoo.com/2015/11/19/prefetching-preloading-prebrowsing/" target="_blank" rel="external">前端性能优化 - 资源预加载</a></li>
<li><a href="http://delai.me/code/dns-prefetching/" target="_blank" rel="external">预加载系列一：DNS Prefetching 的正确使用姿势</a></li>
<li><a href="https://developers.google.com/web/fundamentals/" target="_blank" rel="external">Google Web Fundamentals</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;预加载的作用并不是直接加快网站的加载速度。预加载是提前准备好你所需要的资源，然后当需要的时候即可直接调用、直接完成页面的渲染，不造成阻塞。&lt;/p&gt;
    
    </summary>
    
      <category term="实验室" scheme="https://blog.nfz.moe/categories/%E5%AE%9E%E9%AA%8C%E5%AE%A4/"/>
    
    
      <category term="Hexo" scheme="https://blog.nfz.moe/tags/Hexo/"/>
    
      <category term="HTTPS" scheme="https://blog.nfz.moe/tags/HTTPS/"/>
    
      <category term="前端优化" scheme="https://blog.nfz.moe/tags/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Web 性能优化（1）——浅尝 Service Worker</title>
    <link href="https://blog.nfz.moe/archives/wpo-by-service-worker.html"/>
    <id>https://blog.nfz.moe/archives/wpo-by-service-worker.html</id>
    <published>2017-03-26T05:01:18.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>静态内容的特性使其非常适合做缓存来加速页面的访问，除了使用 CDN 实现加速之外，通过客户端也可以实现更好的访问体验。本文就利用 Service Worker 来探讨静态页面的加速方案。</p>
<a id="more"></a>
<blockquote>
<p>ServiceWorker 对动态页面依然有效，但是效果不如静态站效果显著。</p>
</blockquote>
<p>Service worker 是 PWA 这类 WebApp 的重要支持，因为可以使 web 支持离线体验。除此以外，Service Worker 还支持通知推送和后台同步。当然这里我们用的是它离线加载的特性来优化网站体验。</p>
<h1 id="启用 -Service-Worker- 支持"><a href="# 启用 -Service-Worker- 支持" class="headerlink" title="启用 Service Worker 支持"></a>启用 Service Worker 支持 </h1><h2 id="在首页添加 -Service-Worker- 注册代码"><a href="# 在首页添加 -Service-Worker- 注册代码" class="headerlink" title="在首页添加 Service Worker 注册代码"></a> 在首页添加 Service Worker 注册代码</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
if ('serviceWorker' in navigator) {navigator.serviceWorker.register('/sw.js');
}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这段代码表示检测浏览器是否支持 Service Workers。如果支持就会根据 <code>sw.js</code> 注册 Service Workers 服务。如果浏览器不支持就不会注册。</p>
<h2 id="添加 -Service-Workers- 所需文件"><a href="# 添加 -Service-Workers- 所需文件" class="headerlink" title="添加 Service Workers 所需文件"></a>添加 Service Workers 所需文件 </h2><p> 你可以从 <a href="https://gist.github.com/neoFelhz/50800b701d00dc6d874be95da2cd7655" target="_blank" rel="external"> 这里 </a> 下载到所需的文件，将其放在网站根目录下。</p>
<ul>
<li><code>sw.js</code></li>
<li><code>offline.svg</code></li>
<li><code>offline.html</code> 你可以用 Hexo 生成一个独立页面，也可以自己写一个。</li>
</ul>
<blockquote>
<p>由于 Service Worker 的离线加载特性，在浏览者离线以后依然可以访问已经缓存了的页面。但是对于没有缓存的页面和图片，你可以通过 <code>offline.svg</code> 和 <code>offline.html</code> 加以提示。</p>
</blockquote>
<p>修改 <code>sw.js</code> 中的下述内容。</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> ignoreFetch <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token regex">/https?:\/\/cdn.bootcss.com\//</span><span class="token punctuation">,</span>
  <span class="token regex">/https?:\/\/www.google-analytics.com\//</span><span class="token punctuation">,</span>
  <span class="token regex">/chrome-extension:\/\//</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这部分定义了你不需要缓存的资源，用的是正则表达式对资源进行匹配。这里给出了按域名进行排除的例子。如果你无法判断哪些资源不需要缓存，请用 F12 打开 Dev Tools 的 Source 选项卡逐个加以筛选；如果还不会，就把你看到的所有不是源站的域名统统输进去。</p>
<h1 id="加速效果"><a href="# 加速效果" class="headerlink" title="加速效果"></a>加速效果 </h1><p> 这是第一次访问的效果。</p>
<p><img src="https://ooo.0o0.ooo/2017/03/26/58d75f2313397.png" alt="0000071.png"></p>
<p>可以看到，第一次访问不能算太理想，花费 1.39s 才完成了 DOMLoad，所需资源全部加载完实际上花了 1.69s。</p>
<blockquote>
<p>可以看到，实际上网络资源花费了 3.11s 才加载完。我特意截图了最后加载的几个有齿轮标识的资源。这些是 ServiceWorker 在 <code>sw.js</code> 里加载的资源——offline.svg 和 offline.html。</p>
</blockquote>
<p><img src="https://ooo.0o0.ooo/2017/03/26/58d760b09786e.png" alt="0000072.png"></p>
<p>这是第二次访问的效果。DOMLoad 只花费了 571ms，全部资源加载只需要 608ms。可以看到，很多资源 <code>from  ServiceWorker</code>。说明 ServiceWorker 拦截了请求，直接从 ServiceWorker 获得资源。</p>
<blockquote>
<p>看见没有？连 <code>blog.nfz.moe</code> 都被 ServiceWorker 拦截了，现在你知道为什么可以离线加载了吧。</p>
</blockquote>
<h1 id="先决条件"><a href="# 先决条件" class="headerlink" title="先决条件"></a>先决条件 </h1><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p> 你的网站必须 <strong>完整使用  HTTPS 进行加密</strong>！ServiceWorker 一旦被注册，除非有进行定义、或者访问者手动在 Dev Tools 内 Unregister 了 ServiceWorker，否则你的资源都将被 ServiceWorker 接管，一旦访问者第一次加载资源时被攻击或者被劫持，后果则不堪设想。在开发过程中，可以通过 <code>localhost</code> 予以调试，但是生产环境必须高度可靠。</p>
<h2 id="Can-I-Use"><a href="#Can-I-Use" class="headerlink" title="Can I Use?"></a>Can I Use?</h2><p><a href="http://caniuse.com/#feat=serviceworkers" target="_blank" rel="external">http://caniuse.com/#feat=serviceworkers</a></p>
<p><img src="https://ooo.0o0.ooo/2017/03/26/58d7654274a08.png" alt="0000073.png"></p>
<p>根据 Google 的文档表明，Chorme、Firefox 和 Opera 都支持；Microsoft Edge 现在表示公开支持。Safari 也暗示未来会进行相关开发。 </p>
<hr>
<p>参考文章：</p>
<ul>
<li><a href="https://yangbo.tech/2017/01/15/2017-01-15-speedy-and-offline-site-by-service-worker/" target="_blank" rel="external">使用 Service worker 实现加速 / 离线访问静态 blog 网站</a></li>
<li><a href="https://www.anotherhome.net/2954" target="_blank" rel="external">Service Workers 实现网站加速和离线缓存</a></li>
<li><a href="https://segmentfault.com/a/1190000008491458" target="_blank" rel="external">Service Workers 与离线缓存</a></li>
</ul>
<p>以及 Google 的 <a href="https://developer.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external">ServiceWorker</a> 有关文档。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;静态内容的特性使其非常适合做缓存来加速页面的访问，除了使用 CDN 实现加速之外，通过客户端也可以实现更好的访问体验。本文就利用 Service Worker 来探讨静态页面的加速方案。&lt;/p&gt;
    
    </summary>
    
      <category term="实验室" scheme="https://blog.nfz.moe/categories/%E5%AE%9E%E9%AA%8C%E5%AE%A4/"/>
    
    
      <category term="前端优化" scheme="https://blog.nfz.moe/tags/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/"/>
    
      <category term="ServiceWorker" scheme="https://blog.nfz.moe/tags/ServiceWorker/"/>
    
  </entry>
  
  <entry>
    <title>为 Hexo 博客添加评论系统</title>
    <link href="https://blog.nfz.moe/archives/add-comment-system-to-hexo.html"/>
    <id>https://blog.nfz.moe/archives/add-comment-system-to-hexo.html</id>
    <published>2017-03-23T13:49:10.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> 由于 Hexo 本身已经弃用了 swig 支持，所以本文教程是根据 ejs 语言来写的。如果使用了如 NexT 等基于 swig 的 Hexo 主题，请自行切换。</p>
</blockquote>
<p>Hexo 是一款静态博客，所以不像 WordPress 或者 Typecho 这类动态博客一样支持原生评论系统，所以一般需要引入第三方评论系统。国内常见的评论系统有多说、友言、畅言等，国外的有 Disqus 和 Moss。</p>
<blockquote>
<p>在写作本文的时候，多说已经宣布即将暂停服务，很多使用多说的人都在寻找解决方案；加上网络上找到的解决方案大多都不具备通用性，而且也不具备太多指导意义，这也是为什么我写作本文的原因。</p>
<p><strong>强烈建议：</strong>在阅读本文并根据本文进行操作前，请仔细阅读 Hexo 的 API 和主题开发的有关文档！</p>
</blockquote>
<h1 id="修改主题配置文件"><a href="# 修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件 </h1><p> 在主题文件夹下的 <code>_config.yml</code> （以下简称主题配置文件）合适位置中加入以下内容：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">comment</span><span class="token punctuation">:</span> 
    <span class="token key atrule">use</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">shortname</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>YOUR_SHORTNAME<span class="token punctuation">}</span>
    <span class="token key atrule">thread_key</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>IDENTIFIER<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意，这些评论系统的配置内容仅供参考。有的评论系统可能需要配置更多信息或者不需要配置某些信息（如友言需要配置 conf、appid 而不是 shortname），请自行根据需求进行修改。</p>
<blockquote>
<p>如果你的修改只是给你一个人使用，这一步可以忽略。但是如果你想把你的成果分享出去或提交给上游，建议通过主题配置文件的方法配置这些属性，这样可以方便更多人使用。</p>
</blockquote>
<h1 id="添加评论 -ejs"><a href="# 添加评论 -ejs" class="headerlink" title="添加评论 ejs"></a>添加评论 ejs</h1><p>在主题内的合适位置新建一个 ejs 文件，命名如 <code>comment.ejs</code>，填入评论框的公共代码（即包括引用有关 js 文件等的代码）加上评论框的代码。</p>
<blockquote>
<p>对于评论系统的公共代码，你也可以插入在其它位置。以 Material 主题为例，typecho-theme-material 的评论公共代码在侧边栏，hexo-theme-material 的评论公共代码在 footer。</p>
</blockquote>
<p>然后，替换提供的代码中的有关变量。常见的变量有 shortname、page_identifier 等。这些变量可以通过 Hexo 的 API 进行调用。比如你可以使用 <code>&lt;%= theme.comment.shortname %&gt;</code> 这样的 API  即可调用你在主题配置文件中的 <code>comment.hortname</code> 属性中赋的值。</p>
<blockquote>
<p>当然，正如我在上一步所说，如果你的修改只是供你一个人使用，你可以直接将你的变量值替换到这段代码中，而不需要额外通过主题配置文件进行调用。</p>
</blockquote>
<h1 id="在文章页面添加评论"><a href="# 在文章页面添加评论" class="headerlink" title="在文章页面添加评论"></a>在文章页面添加评论 </h1><p> 在类似于 <code>post.ejs</code> 的文件中，在文章结尾处插入<code>&lt;%- partial(&#39;/THE_PATH_TO/comment&#39;) %&gt;</code> 来调用 <code>/YOUR PATH/comment.ejs</code> 文件。这样在 Hexo 生成静态页面时就会把评论部分插入进去。</p>
<h1 id="实践"><a href="# 实践" class="headerlink" title="实践"></a>实践 </h1><p> 以上内容是 Hexo 主题加入评论系统的方法。现在介绍一下 <a href="https://material.viosey.com" target="_blank" rel="external">Material</a> 主题的评论系统是如何添加的。</p>
<p>Material 主题涉及到评论系统的组件有：</p>
<ul>
<li>post.ejs（文章页面，引用评论系统）</li>
<li>layout/_partial/comment.ejs（评论框）</li>
<li>layout/_partial/footer-option.ejs（评论系统公共代码）</li>
<li>layout/_widget/disqus.ejs（Disqus 评论框组件）</li>
<li>layout/_widget/duoshuo.ejs（多说评论框组件）</li>
</ul>
<p>首先，我们在主题配置文件中，写入以下内容：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Comment Systems</span>
<span class="token comment" spellcheck="true"># Available value of "use":</span>
<span class="token comment" spellcheck="true">#     duoshuo | disqus</span>
<span class="token key atrule">comment</span><span class="token punctuation">:</span>
    <span class="token key atrule">use</span><span class="token punctuation">:</span>
    <span class="token key atrule">shortname</span><span class="token punctuation">:</span>
    <span class="token key atrule">duoshuo_thread_key_type</span><span class="token punctuation">:</span> path
    <span class="token key atrule">duoshuo_embed_js_url</span><span class="token punctuation">:</span> <span class="token string">"https://static.duoshuo.com/embed.js"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>这些用来定义评论系统在主题配置文件中的变量。</p>
</blockquote>
<p>然后，在 <code>footer-options.ejs</code> 加入下述代码：</p>
<pre class="line-numbers language-html"><code class="language-html">&lt;% if(theme.comment.use === 'duoshuo') { %>
    <span class="token comment" spellcheck="true">&lt;!-- 多说公共 js 代码 start --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        queue.offer(function(){
            var duoshuoQuery = {short_name: '&lt;%= theme.comment.shortname %>'};
            (function() {var ds = document.createElement('script');
                ds.type = 'text/javascript';
                ds.async = true;
                ds.src = '&lt;%= theme.comment.duoshuo_embed_js_url %>';
                ds.charset = 'UTF-8';
                (document.getElementsByTagName('head')[0]
                 || document.getElementsByTagName('body')[0]).appendChild(ds);
            })();});
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 多说公共 js 代码 end --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>

&lt;% if(theme.comment.use === 'disqus') { %>
    <span class="token comment" spellcheck="true">&lt;!-- 使用 DISQUS js 代码 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dsq-count-scr<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//&lt;%<span class="token punctuation">=</span> theme.comment.shortname %<span class="token punctuation">></span>.disqus.com/count.js<span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>这一段包括了一个判断，那就是通过判断用户在主题配置文件里配置的值来判断用户选择的评论系统，并选择加载哪一段代码。</p>
</blockquote>
<p>接下来是创建 <a href="https://github.com/viosey/hexo-theme-material/blob/master/layout/_widget/disqus.ejs" target="_blank" rel="external"><code>duoshuo.ejs</code></a> 和 <a href="https://github.com/viosey/hexo-theme-material/blob/master/layout/_widget/duoshuo.ejs" target="_blank" rel="external"><code>disqus.ejs</code></a>。这个是评论框的组件。里面的一些变量换成了由 Hexo 的主题配置文件里的变量。</p>
<blockquote>
<p>下面这个是 <code>duoshuo.ejs</code> 的内容。</p>
</blockquote>
<pre class="line-numbers language-html"><code class="language-html">&lt;%- css('css/duoshuo.min') %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
    <span class="token selector"><span class="token id">#ds-thread</span> <span class="token id">#ds-reset</span> <span class="token class">.ds-post-button</span></span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> &lt;<span class="token number">%</span>= theme<span class="token number">.</span>uiux<span class="token number">.</span>theme_color <span class="token number">%</span>> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token selector"><span class="token id">#ds-wrapper</span> <span class="token id">#ds-reset</span> <span class="token class">.ds-icons-32</span></span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> &lt;<span class="token number">%</span>= theme<span class="token number">.</span>uiux<span class="token number">.</span>theme_color <span class="token number">%</span>> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token selector"><span class="token id">#ds-reset</span> <span class="token class">.ds-highlight</span> </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> &lt;<span class="token number">%</span>= theme<span class="token number">.</span>uiux<span class="token number">.</span>theme_color <span class="token number">%</span>> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 多说评论框 start --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ds-thread<span class="token punctuation">"</span></span>
        <span class="token attr-name">data-thread-key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> theme.comment.duoshuo_thread_key_type <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>id<span class="token punctuation">'</span> ? page.id : page.path %<span class="token punctuation">></span><span class="token punctuation">"</span></span>
        <span class="token attr-name">data-url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- config.url + config.root + page.path %<span class="token punctuation">></span><span class="token punctuation">"</span></span>
        <span class="token attr-name">data-title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> page.title %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 多说评论框 end --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>下面这个是 <code>disqus.ejs</code> 的内容。</p>
</blockquote>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disqus_thread<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
    queue.offer(function() {var disqus_config = function () {this.page.url = '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">config.url</span> <span class="token attr-name">+</span> <span class="token attr-name">url_for(path)</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>';  // Replace PAGE_URL with your page's canonical URL variable
                this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
            };
            (function() { // DON'T EDIT BELOW THIS LINE
                var d = document;
                var s = d.createElement('script');
                s.src = '//&lt;%= theme.comment.shortname %>.disqus.com/embed.js';
                s.setAttribute('data-timestamp', + new Date());
                (d.head || d.body).appendChild(s);
            })();});
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>本文给了这两个文件在 Github 的链接。大家可以直接参考。</p>
</blockquote>
<p>然后我们创建了 <code>comment.ejs</code>，根据用户的配置，判断加载哪一个评论框。</p>
<pre class="line-numbers language-html"><code class="language-html">&lt;% if(theme.comment.use === 'duoshuo') { %>
    <span class="token comment" spellcheck="true">&lt;!-- 使用多说评论 --></span>
    &lt;%- partial('_widget/duoshuo') %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>

&lt;% if(theme.comment.use === 'disqus') { %>
    <span class="token comment" spellcheck="true">&lt;!-- 使用 DISQUS --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disqus-comment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        &lt;%- partial('_widget/disqus') %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token selector"><span class="token id">#disqus-comment</span></span><span class="token punctuation">{</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>
            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">2</span>pc<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>

&lt;% if(theme.comment.use === 'disqus_click') { %>
    <span class="token comment" spellcheck="true">&lt;!-- 使用 DISQUS_CLICK --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disqus-comment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    
        &lt;%- partial('_widget/disqus_click') %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token selector"><span class="token id">#disqus-comment</span></span><span class="token punctuation">{</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>
            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">2</span>pc<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后就是在 <code>post.ejs</code> 里引用这个模块加载评论。</p>
<pre class="line-numbers language-ejs"><code class="language-ejs"><%- partial('_partial/comment') %>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>在 Material 主题现有的框架基础上添加评论系统可以参考 Material 主题的 <a href="https://github.com/viosey/hexo-theme-material/pull/247" target="_blank" rel="external">Pull Request #247</a>，这是一位 Contributer 为 Material 主题添加了畅言评论系统的支持。</p>
</blockquote>
<p>由于多说的关闭，Material 主题接下来也会去除对多说评论系统的支持。 大家可以根据本文的思路自己更换为新的评论系统。我们也欢迎大家把你的改动贡献到给 Material 主题，来 Open a new pull request 吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 由于 Hexo 本身已经弃用了 swig 支持，所以本文教程是根据 ejs 语言来写的。如果使用了如 NexT 等基于 swig 的 Hexo 主题，请自行切换。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hexo 是一款静态博客，所以不像 Wo
    
    </summary>
    
      <category term="实验室" scheme="https://blog.nfz.moe/categories/%E5%AE%9E%E9%AA%8C%E5%AE%A4/"/>
    
    
      <category term="博客" scheme="https://blog.nfz.moe/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="评论" scheme="https://blog.nfz.moe/tags/%E8%AF%84%E8%AE%BA/"/>
    
      <category term="Hexo" scheme="https://blog.nfz.moe/tags/Hexo/"/>
    
      <category term="多说" scheme="https://blog.nfz.moe/tags/%E5%A4%9A%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>使用 Gitlab CI 实现 Hexo 持续部署</title>
    <link href="https://blog.nfz.moe/archives/hexo-auto-deploy-with-gitlab-ci.html"/>
    <id>https://blog.nfz.moe/archives/hexo-auto-deploy-with-gitlab-ci.html</id>
    <published>2017-03-04T05:25:00.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>自从使用 Hexo 博客以来，我一直在研究如何实现在任何平台上自由编写和发布 Hexo 博客。<a id="more"></a>之前我在 <a href="https://blog.neofelhz.space/archives/hexo-auto-deploy-with-daocloud.html" target="_blank" rel="external">《Hexo 持续自动化部署》</a> 和<a href="https://blog.neofelhz.space/archives/hexo-auto-deploy-with-flow-ci.html" target="_blank" rel="external">《用 Flow.CI 让 Hexo 持续集成》</a>两篇文章中分别讲述了使用 DaoCloud 的 Docker 和 Flow.CI 的 Sass 平台部署持续集成的 Hexo，但是如今 DaoCloud 部署越来越慢，Flow.CI 也已经转向收费；所以我不得不寻找新的替代方案。</p>
<blockquote>
<p>我的博客是部署在我的 <a href="https://www.rkecloud.com/?refcode=d5c140a80c" target="_blank" rel="external"> 锐壳云 </a> 上的虚拟空间，外加香港的 CDN 服务商进行加速，我使用的是 ftpsync 的 deploy 方式，我的 ftp 的用户密码都存储在 <code>_config.yml</code> 中。这意味着我的 <code>_config.yml</code> 必须存储在私有库中，这就意味着常见的 Github+Travi.CI 并不符合我的要求。我目前用的是 Coding 的私有库管理我的 Hexo 博客的工程文件，确保尽可能不要被第三方获得我的 ftp 帐号密码。</p>
</blockquote>
<p>很早就听说了 Gitlab。</p>
<blockquote>
<p>就是那个最近因为不小心使用 <code>rm rf</code> 把自家数据库删光、还在 YouTube 上直播修库、让失误的程序员看了 10 小时的 <em>nyancat</em> 的那个 Gitlab。</p>
</blockquote>
<p>Gitlab 有面向企业的计划、有开发独立的服务端程序，所以和主要面向平民化的码农天堂 Github 一口气亏损 6600 亿美元不同，Gitlab 至少并没有亏损。这一点和 Coding 颇为类似——无论是运营方式还是盈利方式，甚至是网站 UI 交互层面。</p>
<p>接下来事情就很简单了。</p>
<h1 id="准备工作"><a href="# 准备工作" class="headerlink" title="准备工作"></a>准备工作 </h1><p> 首先，在 Gitlab 创建一个新的私有库，用来存储我的博客工程文件；在我的本地的 Hexo 博客工程文件中的 Repository 里添加一个新的 Remote 到 Gitlab。然后从 Coding 上 <code>git pull</code>，并 <code>git push</code> 到 Gitlab。<br>现在我在 Coding 和 Gitlab 上都有了 Hexo 博客的工程文件。接下来就是直接部署 CI 平台了。</p>
<h1 id="编写 -workflow"><a href="# 编写 -workflow" class="headerlink" title="编写 workflow"></a>编写 workflow</h1><p>和 Github 的 Travis.CI 类似，你只需要在 Repository 的根目录上新建一个 <code>.gitlab-ci.yml</code> 你就可以实现 Gitlab 的 CI 平台执行自动部署。</p>
<blockquote>
<p>在 Gitlab，CI 和 Repository 是高度集成的。你可以在 <code>pipeline</code> 里看到你的 CI 运行信息。</p>
</blockquote>
<p>在 <code>.gitlab-ci.yml</code> 中填入下述内容：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">image</span><span class="token punctuation">:</span> node<span class="token punctuation">:</span>6.6.0
<span class="token key atrule">pages</span><span class="token punctuation">:</span>
  <span class="token key atrule">cache</span><span class="token punctuation">:</span>
    <span class="token key atrule">paths</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> node_modules/

  <span class="token key atrule">script</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> npm install
  <span class="token punctuation">-</span> npm install hexo<span class="token punctuation">-</span>cli <span class="token punctuation">-</span>g
  <span class="token punctuation">-</span> hexo deploy
  <span class="token key atrule">artifacts</span><span class="token punctuation">:</span>
    <span class="token key atrule">paths</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> public
  <span class="token key atrule">only</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> master
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>上述脚本会自动在每次 push 后帮你生成 Hexo 静态文件并部署到 Gitlab 的 Pages 服务上。至于 <code>hexo deploy</code>，你需要事先部署好 Deploy 方式。</p>
<p>至于这些脚本的原理，你可以直接参考我之前那两篇关于 CI 部署 Hexo 的博客。</p>
</blockquote>
<h1 id="SSH- 有关"><a href="#SSH- 有关" class="headerlink" title="SSH 有关"></a>SSH 有关 </h1><p> 一些人可能在用 Github Pages 或者 Coding Pages，或者是使用的自己的 VPS（git 部署）。这样一来你就可能需要使用 SSH 连接你的 webserver 仓库。（当然，用 Caddy 做 webserver 和定时 git pull 那个算是异类）。这些你可以在 Gitlab CI 的 wiki 上查看到 <a href="https://docs.gitlab.com/ee/ci/ssh_keys/README.html" target="_blank" rel="external"> 相关内容</a>。我也会在我的项目  <a href="https://github.com/neoFelhz/HexoAutoBuildScript" target="_blank" rel="external"><code>HexoAutoBuildScript</code></a> 中更新有关的 Wiki。</p>
<blockquote>
<p>值得一提的是，和 DaoCloud 和 Flow.CI 不同，Gitlab 可以通过设置 <strong>环境变量</strong> 的方式加载你的 SSH 的私钥，这样子就不需要把你的私钥放在你的项目仓库里，有效防止私钥泄露到第三方。这种环境变量的方式不仅安全，而且灵活。</p>
</blockquote>
<h1 id="小结"><a href="# 小结" class="headerlink" title="小结"></a>小结</h1><blockquote>
<p>本文就是由 Gitlab CI 生成并发布的。</p>
</blockquote>
<p>本文介绍了利用 Gitlab CI 进行持续集成 / 部署，今后的使用和之前的方式一样，向仓库提交 push 就可以触发自动部署。<br>和 Daocloud 和 Flow.CI 的代码构建相比，Gitlab CI 为持续集成 / 部署优点如下：</p>
<ul>
<li>目前使用完全免费</li>
<li>可以和 Gitlab 的 Repository 无缝兼容，无需第三方 CI 平台接入。</li>
<li>支持在 <code>hexo deploy</code> 的同时自动发布到 Gitlab Pages</li>
</ul>
<blockquote>
<p><del>同时借助这个机会，我也利用 CloudXNS 将国外用户解析到 Gitlab Pages，为我的香港 CDN 分流减压，也可以加快使用代理服务的浏览者访问我博客的加载速度。</del> 取消了，香港的网络环境算不错的，全球访问都不差，所以没有再部署  Gitlab 的 Pages。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从使用 Hexo 博客以来，我一直在研究如何实现在任何平台上自由编写和发布 Hexo 博客。
    
    </summary>
    
      <category term="博客栈" scheme="https://blog.nfz.moe/categories/%E5%8D%9A%E5%AE%A2%E6%A0%88/"/>
    
    
      <category term="Hexo" scheme="https://blog.nfz.moe/tags/Hexo/"/>
    
      <category term="持续集成" scheme="https://blog.nfz.moe/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
      <category term="CI" scheme="https://blog.nfz.moe/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>InstantClick 加载</title>
    <link href="https://blog.nfz.moe/archives/instantclick-compatiblity-code.html"/>
    <id>https://blog.nfz.moe/archives/instantclick-compatiblity-code.html</id>
    <published>2017-02-27T16:49:12.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 <a href="https://blog.neofelhz.space/archives/hexo-load-optimization.html" target="_blank" rel="external">《Hexo 前端性能优化》</a> 一文中我提到了 <code>InstantClick</code> 可以实现跳转秒开的效果。但是在 <code>InstantClick</code> 初始化之前需监听 <code>InstantClick</code> 对象的 change 事件，在事件中处理统计和渲染操作，否则在预加载中不会生效。</p>
<a id="more"></a>
<p>为了方便使用，下面我收集了一些常见的 JS 行为，你们可以直接挑出你需要的行为，放在页脚的 <code>&lt;script&gt;</code> 标签内即可。</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">InstantClick<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>isInitialLoad<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isInitialLoad <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">// Duoshuo Comment</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".ds-thread"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
    DUOSHUO<span class="token punctuation">.</span><span class="token function">EmbedThread</span><span class="token punctuation">(</span><span class="token string">".ds-thread"</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true">// Duoshuo Recent Comment </span>
    DUOSHUO<span class="token punctuation">.</span><span class="token function">RecentCommentsWidget</span><span class="token punctuation">(</span><span class="token string">".ds-recent-comments"</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true">// Baidu_Share</span>
    window<span class="token punctuation">.</span>_bd_share_main<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true">// Baidu_analytics</span>
    _hmt<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'_trackPageview'</span><span class="token punctuation">,</span> location<span class="token punctuation">.</span>pathname <span class="token operator">+</span> location<span class="token punctuation">.</span>search<span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true">// MathJax</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> MathJax <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span>
    MathJax<span class="token punctuation">.</span>Hub<span class="token punctuation">.</span><span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"Typeset"</span><span class="token punctuation">,</span>MathJax<span class="token punctuation">.</span>Hub<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// Google_analytics</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> ga <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// support google analytics</span>
    <span class="token function">ga</span><span class="token punctuation">(</span><span class="token string">'send'</span><span class="token punctuation">,</span> <span class="token string">'pageview'</span><span class="token punctuation">,</span> location<span class="token punctuation">.</span>pathname <span class="token operator">+</span> location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// Google_code_prettify</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> prettyPrint <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// support google code prettify</span>
    <span class="token function">prettyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// Prism</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Prism <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span>
    Prism<span class="token punctuation">.</span><span class="token function">highlightAll</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token comment" spellcheck="true">// Piwik</span>
    _paq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'setDocumentTitle'</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span>title<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _paq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'trackPageView'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// If you enable some other Piwik's function such as 'trackPageLink' , you should add the activity code here.</span>


    <span class="token comment" spellcheck="true">// Syntax Highlighter</span>
    SyntaxHighlighter<span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

InstantClick<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;https://blog.neofelhz.space/archives/hexo-load-optimization.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Hexo 前端性能优化》&lt;/a&gt;一文中我提到了 &lt;code&gt;InstantClick&lt;/code&gt; 可以实现跳转秒开的效果。但是在 &lt;code&gt;InstantClick&lt;/code&gt; 初始化之前需监听 &lt;code&gt;InstantClick&lt;/code&gt; 对象的 change 事件，在事件中处理统计和渲染操作，否则在预加载中不会生效。&lt;/p&gt;
    
    </summary>
    
      <category term="实验室" scheme="https://blog.nfz.moe/categories/%E5%AE%9E%E9%AA%8C%E5%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>不仅仅只是锦上添花——谈启用 HTTPS 的重要性</title>
    <link href="https://blog.nfz.moe/archives/the-importance-of-using-https.html"/>
    <id>https://blog.nfz.moe/archives/the-importance-of-using-https.html</id>
    <published>2017-02-22T14:39:00.000Z</published>
    <updated>2017-04-08T08:41:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>HTTPS 早就不是锦上添花的可有可无项，它已经逐渐成为 WEB 服务的标配。——JerryQu</p>
</blockquote>
<a id="more"></a>
<h1 id="HTTPS- 是什么"><a href="#HTTPS- 是什么" class="headerlink" title="HTTPS 是什么"></a>HTTPS 是什么</h1><p>HTTPS 是 <code>Hypertext Transfer Protocol Secure</code> 的缩写。HTTPS 利用 SSL/TLS 来加密数据包。HTTPS 开发的主要目的，是提供对网络服务器的身份认证，保护交换数据的隐私与完整性。</p>
<h1 id="HTTP- 的安全性问题"><a href="#HTTP- 的安全性问题" class="headerlink" title="HTTP 的安全性问题"></a>HTTP 的安全性问题 </h1><p> 众所周知，对 web 服务启用 HTTPS 普遍地比 HTTP 安全。HTTP 协议固然简单方便，易于部署，但是在设计之初也没有考虑安全性，所有内容都是使用明文传输，也就为现在的安全问题埋下了隐患。用户在基于 HTTP 协议的 web 应用上的传输内容都可以被中间者轻易查看和修改。</p>
<blockquote>
<p>这里所谓的中间者是指网络传输内容需要经过的网络节点，既有硬件也有软件，比如代理服务器、DNS、路由、通信基站 . . . . . . 这里面最容易拿到用户内容的就是各种通信服务运营商和二级网络带宽提供商。</p>
</blockquote>
<p>我们身边就时常发生中间人攻击，比如：</p>
<ul>
<li>使用移动数据浏览网页时运营商添加的流量球</li>
<li>浏览网页时底部莫名冒出来的广告</li>
<li>在下载文件时却得到了另外别的文件</li>
<li>等等等等 . . . .</li>
</ul>
<h1 id="HTTPS- 为什么更加安全"><a href="#HTTPS- 为什么更加安全" class="headerlink" title="HTTPS 为什么更加安全"></a>HTTPS 为什么更加安全 </h1><p> 通俗一点讲，HTTPS 有以下一些安全方面的优势。</p>
<ul>
<li>内容在传输过程中使用了对称加密，所以不会被第三方查看到。就像快递员运输的包裹都进行了封装，别人无法知道里面装了什么东西。</li>
<li>数据完整性。及时发现被第三方篡改的传输内容。就像快递员虽然不知道包裹里装了什么东西，但他有可能中途掉包，数据完整性就是指如果被掉包，我们能轻松发现并拒收。</li>
<li>身份校验。保证数据到达用户期望的目的地。就像我们邮寄包裹时，虽然是一个封装好的未掉包的包裹，但必须确定这个包裹不会送错地方。</li>
</ul>
<h1 id="HTTPS- 的劣 -wu- 势 -qu"><a href="#HTTPS- 的劣 -wu- 势 -qu" class="headerlink" title="HTTPS 的劣 (wu) 势(qu)"></a>HTTPS 的劣 (wu) 势(qu)</h1><p>在种种反对 HTTPS 的呼声中，我挑选了一些具有代表性的看法列举在这里，并加以讨论——</p>
<h2 id="HTTPS- 导致性能下降？"><a href="#HTTPS- 导致性能下降？" class="headerlink" title="HTTPS 导致性能下降？"></a>HTTPS 导致性能下降？</h2><p>HTTPS 链接和 HTTP 链接都建立在 TCP 协议之上。HTTP 链接比较单纯，使用三个握手数据包建立连接之后，就可以发送内容数据了。但是 HTTPS 链接在这三步结束以后，它还有一个 SSL/TLS 握手的环节，再加上 HTTPS 应用数据传输需要经过对称加密。所以使用 HTTPS 连接的过程的确会比 HTTP 复杂。<br>但是，随着服务器、浏览器在性能上的大幅提升，经过良好优化后 HTTPS 带来的性能损耗完全可以接受。更何况，部署 HTTPS 便可以启用 HTTP/2，大大提升 WEB 性能。所有浏览器都只支持 HTTP/2 Over TLS。也就是说，<strong>浏览器可以使用的 HTTP/2 必须基于 HTTPS 部署</strong>。</p>
<h2 id="HTTPS- 并不非常可靠？"><a href="#HTTPS- 并不非常可靠？" class="headerlink" title="HTTPS 并不非常可靠？"></a>HTTPS 并不非常可靠？</h2><p>是的。但是，并没有任何一种协议和加密方式是彻底安全的。HTTPS 在一定程度上，依旧可以保证用户传输数据的安全。</p>
<p><strong>HTTPS 的几个常见安全问题</strong>：</p>
<ul>
<li>web 服务提供商没有做自动从 HTTP 跳转到 HTTPS，所以用户可能还是会通过不安全的 HTTP 访问提供的 web 服务。</li>
<li>就算 web 服务提供商设置了从 HTTP 用 301 或者 302 跳转到 HTTPS，首次连接也需要使用 HTTP，中间人依然可以在第一次连接时发起攻击。</li>
<li>就算启用了 HSTS，让浏览器在以后访问该站点时都默认永久在浏览器本地预先用 307 做好从 HTTP 跳转到 HTTPS，并杜绝不安全的 HTTPS 链接，但第一次访问时浏览器才可能得到 HSTS 响应头，中间人甚至可以在第一次连接时入侵并劫持和替换成攻击者自己的证书（心血漏洞）。</li>
</ul>
<blockquote>
<p>心血漏洞的一个典型案例就是，在今日头条的官网下载手机客户端，就算已使用 HTTPS 访问，每次按下下载按钮下载下来的安装包的 MD5 检验都是不一样的（由 WJXXBSH 发现）</p>
<p>目前我的域名已经加入了 HSTS Preload List，内置在现代的浏览器内，通过浏览器更新分发到全球各地。这是目前唯一可以避免心血漏洞的办法。</p>
</blockquote>
<h2 id="启用 -HTTPS- 很复杂？"><a href="# 启用 -HTTPS- 很复杂？" class="headerlink" title="启用 HTTPS 很复杂？"></a>启用 HTTPS 很复杂？</h2><p>从 HTTP 切换成 HTTPS 确实会引入很多新工作，例如生成 CSR 和获取证书、SSL 配置、全站资源替换、配置 web 服务端环境，等等等等。从 HTTP 切换到 HTTPS 的过程是比较麻烦，但是一旦完成了所有工作，之后就不需要投入太多精力在这上面。<br>我切换 HTTP 到 HTTPS 花了我一晚上，我觉得是绝对值得的。</p>
<h2 id="HTTPS- 成本很高？"><a href="#HTTPS- 成本很高？" class="headerlink" title="HTTPS 成本很高？"></a>HTTPS 成本很高？</h2><p>为了让浏览器确认你的 HTTPS 安全，你的证书必须要从根证书颁发机构购买浏览器和客户端能够识别的 SSL 证书。但是对于个人来说，有很多零费用的证书方案可供选择，比如 Let’s Encrypt。而对于中大型企业来说，HTTPS 证书采购成本基本可以忽略不计。</p>
<blockquote>
<p>我的博客就采用了 Let’s Encrypt 的 SSL 证书，<del>我的个人主页则是用 TrustAsia 的 SSL 证书</del>（个人主页更换主机商，已经主动将 TrustAsia 的免费 SSL 吊销。现在旗下所有网站都在用 Let’s Encrypt）。我用的这些证书都是免费的。</p>
</blockquote>
<h2 id="我的网站没有敏感内容，所以不需要 -HTTPS"><a href="# 我的网站没有敏感内容，所以不需要 -HTTPS" class="headerlink" title="我的网站没有敏感内容，所以不需要 HTTPS"></a>我的网站没有敏感内容，所以不需要 HTTPS</h2><blockquote>
<p>这就是 “一句” 的开发者所坚持的 “HTTPS 无用论” 观点的核心内容。</p>
</blockquote>
<p>实际上，并不是只有银行、电商等跟钱打交道的网站才需要部署 HTTPS。首先正如我之前列举和说明的，非 HTTPS 网站很容易被劫持和攻击、插入广告，严重影响用户体验。再比如，一些流量很大的热门网站，如果不部署 HTTPS 很容易被别有用心的人利用，例如 2015 年国内某著名大型网站的 JS 就被某些“自己人”主动劫持，用来 DDoS 攻击 Github。</p>
<blockquote>
<p>当然，如果你的站点根本不在乎用户体验，当然我们也无话可说。</p>
</blockquote>
<hr>
<p>当然，并不是说部署了 HTTPS 就可以高枕无忧。HTTPS 解决的只是数据传输过程的安全性和保密性。用户客户端被病毒感染、服务端被入侵、使用有漏洞的证书签发商签发的 SSL 证书（如 <a href="https://blog.viosey.com/2016/11/06/Change-SSL-license-to-AlphaSSL" target="_blank" rel="external"> 沃通漏洞事件 </a> 和 CNNIC 滥签事件），SSL 证书过期或者失效，都会引起 HTTPS 环境的不安全。<br>简而言之，HTTPS 页面 <strong> 不一定是 </strong> 安全环境。但是无论如何，HTTP 页面 <strong> 一定不是 </strong> 安全环境。</p>
<p>如今，Chrome 已经开始主动把 HTTP 页面标记为 <strong>不安全</strong>， Safari 也开始推进 HTTPS。现在的 HTTPS，正如 JerryQu 所说，HTTPS 已经不再是锦上添花的可有可无项，它已经逐渐成为 WEB 服务的标配。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;HTTPS 早就不是锦上添花的可有可无项，它已经逐渐成为 WEB 服务的标配。——JerryQu&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="异闻堂" scheme="https://blog.nfz.moe/categories/%E5%BC%82%E9%97%BB%E5%A0%82/"/>
    
    
      <category term="安全" scheme="https://blog.nfz.moe/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="HSTS" scheme="https://blog.nfz.moe/tags/HSTS/"/>
    
      <category term="SSL" scheme="https://blog.nfz.moe/tags/SSL/"/>
    
      <category term="HTTPS" scheme="https://blog.nfz.moe/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>Disqus 评论加载模式思路分析</title>
    <link href="https://blog.nfz.moe/archives/how-to-show-disqus-comment-in-gfw.html"/>
    <id>https://blog.nfz.moe/archives/how-to-show-disqus-comment-in-gfw.html</id>
    <published>2017-02-21T14:35:12.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>Disqus 因为一些显而易见的问题，所以无法在一些 公正、平等、有序 的网络环境直接加载。</p>
<a id="more"></a>
<blockquote>
<p>为什么要使用 Disqus 而不使用多说，可以阅读我的另一篇博客——<a href="https://blog.neofelhz.space/archives/hello-disqus-and-goodbye-duoshuo.html" target="_blank" rel="external">《你好 Disqus，再见多说》</a></p>
<p>现在为了博客的加载速度，你可以看到我博客底部评论区新增加了一个按钮，点击按钮以后才能加载评论。由于这个不主动加载 Disqus 的设计，我博客的 DOM Load 成功减少了 0.4s。这个功能在 hexo-theme-material 主题 1.3.0 时发布。</p>
</blockquote>
<p>但是为了解决浏览者看评论的问题，由于 Disqus 的跨域加载限制，在中国国内的互联网环境下加载 Disqus，不得不另辟蹊径。</p>
<p>Disqus 提供了一套完整的 API，可以调用很多类型的数据，比如评论数量、评论内容等等数据。调用地址是 disqus.com/api，这里是 <a href="https://disqus.com/api/docs" target="_blank" rel="external">Disqus API 的文档 </a>。<br> 由于 API 返回的是字符或者 json 文件，所以这时我们就可以通过反代 API 的地址就可以成功地获取到 json 数据。接下来只需要通过 JS 解析 json，转义成列表，展现出来即可。</p>
<p>对于指定页面加载指定评论，可以在调用 API 时用参数加以限制。Disqus 的 shortname 和文章标识符可以不需要动态生成，用 Hexo 的函数和 ejs 调用即可。例如通过 <code>&lt;%= theme.comment.shortname %&gt;</code> 可以调用主题配置文件里的 Disqus Shortname，用 <code>&lt;%- page.path %&gt;</code> 获取当前页面的标识。</p>
<blockquote>
<p>以下就是你可以获取到评论列表 json 的地址。</p>
</blockquote>
<pre><code>https://YOUR.DOMAIN/api/3.0/threads/list.json?forum=&quot; + YOUR DISQUS SHORTNAME + &quot;&amp;thread=ident:&quot; + &quot;&lt;%- page.path %&gt;&quot; + &quot;&amp;api_key= YOUR API KEY&quot;
</code></pre><p>那么，什么时候用评论浏览模式，什么时候加载 Disqus，我们需要做一个判断。可以判断 Disqus 下的一些特定元素能不能加载（比如那个加载动画），一旦加载超时了，就切换到评论浏览模式。当然为了避免误判，我们可以保留那个按钮，做好切换功能。</p>
<p>当然，Disqus 的 API 的功能非常完善，除了可以加载评论列表，还可以回传评论。<a href="https://imququ.com" target="_blank" rel="external">屈哥（前端大菊苣）的博客 </a> 的 Disqus 评论就可以支持本地评论，然后服务器异步回传给 Disqus。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Disqus 因为一些显而易见的问题，所以无法在一些 公正、平等、有序 的网络环境直接加载。&lt;/p&gt;
    
    </summary>
    
      <category term="博客栈" scheme="https://blog.nfz.moe/categories/%E5%8D%9A%E5%AE%A2%E6%A0%88/"/>
    
    
      <category term="博客" scheme="https://blog.nfz.moe/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="评论" scheme="https://blog.nfz.moe/tags/%E8%AF%84%E8%AE%BA/"/>
    
      <category term="Disqus" scheme="https://blog.nfz.moe/tags/Disqus/"/>
    
  </entry>
  
  <entry>
    <title>从 Material 主题学习开源项目管理的一点技巧</title>
    <link href="https://blog.nfz.moe/archives/how-to-manage-a-open-source-project-from-material.html"/>
    <id>https://blog.nfz.moe/archives/how-to-manage-a-open-source-project-from-material.html</id>
    <published>2017-02-13T11:35:12.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>我是我博客用的 Material 主题的 <code>collaborater</code> 之一。<a href="https://material.viosey.com" target="_blank" rel="external">hexo-theme-material</a> 现在在 <a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="external">Github</a> 有 <a href="https://github.com/viosey/hexo-theme-material/stargazers" target="_blank" rel="external"><img src="https://img.shields.io/github/stars/viosey/hexo-theme-material.svg?style=flat-square" alt="GitHub stars"></a> 和 <a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="external"><img src="https://img.shields.io/github/contributors/viosey/hexo-theme-material.svg?style=flat-square" alt="GitHub contributors"></a>，即将成为 Hexo 上 star 数前三的主题。<br>现在我把我从参与这个主题里学到的开源项目的管理技巧分享出来给大家作为参考。</p>
<a id="more"></a>
<blockquote>
<p>本文博客的缩略图分别包含了 Material 主题的项目分支网络、图标，以及用主要贡献者的名字拼出来的 Material 字样。</p>
</blockquote>
<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>首先，Material 主题是在 Github 上开源的，所以 Material 主题的版本管理系统自然是 Git 。<br>目前公认的是，Git 是目前、也是未来很长一段时间、甚至有可能永远的是世界上最先进的分布式版本管理系统。</p>
<blockquote>
<p>另一种著名的版本管理系统，SVN，世界上著名的集中式版本管理系统，也在向分布式发展。但可以预见的是，在未来的很长一段时间，SVN 依然不能撼动 Git 的分布式版本管理的地位。</p>
</blockquote>
<p>Git 的几大特点包括使用于分布式模式、可以记录每次文件的改动、可以实现协同开发、无需管理不同版本的不同文件。如果想查看某次改动，只需要检索日志即可。<br>下面提到的这些项目管理的技巧全部基于 Git 的特点。</p>
<h1 id="Commit- 信息格式"><a href="#Commit- 信息格式" class="headerlink" title="Commit 信息格式"></a>Commit 信息格式</h1><p>Git 的特点是可以记录你文件的往期动态改动记录。对于代码进行版本管理、代码追溯、质量管理时，检索 commit 日志是非常重要的。所以，如果你的 commit 信息是整齐和有条理的，那么就会方便很多。</p>
<p>（而且，如果你的 commit 信息记录整齐，那么别人对你的项目印象也会好很多。新来的人参与开发时，也能很快理清楚你过去的开发脉络，更好地融入开发）</p>
<p>我们的 commit 记录分别记录了提交的类型（新特性、修复还是重构）、改动部分（侧边栏、页脚、图标还是文章页面）和改动和目的。所以我们可以现在很轻松的进行 Code Review（以及精准地抓人来背锅），在发布新版本时也明确知道这个版本都干了什么。</p>
<blockquote>
<p>这是 <a href="https://github.com/viosey/typecho-theme-material" target="_blank" rel="external">typecho-theme-material</a> 的 commit 日志记录。</p>
</blockquote>
<p><img src="https://p0.ssl.qhmsg.com/t01a374d65e134553df.png" alt="000067.PNG"></p>
<blockquote>
<p>之前只有 viosey 在开发，所有 commit 日志记录只有版本号，根本无法追溯哪一版本干了什么。后来我接坑了这个主题的开发，所以 commit 日志里简单写了这个提交干了什么。</p>
</blockquote>
<p><img src="https://p0.ssl.qhmsg.com/t017650248846472855.png" alt="000065.PNG"></p>
<blockquote>
<p>到了开发 <a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="external">hexo-theme-material</a> 时，我们从 <a href="https://github.com/viosey/hexo-theme-material/commit/40278ed1292e782cabaaec76b6d88d7a2ce8ac12" target="_blank" rel="external"><code>40278ed1292e782cabaaec76b6d88d7a2ce8ac12</code></a> 开始使用了新的 commit 信息规范。这是之后的 commit 记录。</p>
</blockquote>
<p><img src="https://p0.ssl.qhmsg.com/t0162956ac5481e91f2.png" alt="000066.PNG"></p>
<p>想要知道我们的 commit 信息规范，可以阅读 <a href="https://github.com/viosey/hexo-theme-material/wiki/Commit-message-format" target="_blank" rel="external">hexo-theme-material - Contributing Wiki - Commit message format</a>，了解我们每一次 commit 记录的详细含义和规范。</p>
<h1 id="Branches- 管理"><a href="#Branches- 管理" class="headerlink" title="Branches 管理"></a>Branches 管理 </h1><p> 有的时候，我们不得不面临一点“危机”——新加的功能或者特性实在太过冒险，最后出了严重的问题。<br>虽然 Git 提供了 Revert 功能，可以方便的直接回归某条 commit 时的代码状态。但是有一点问题就是你之前的成果都被推倒。<br>如果不 Revert，那么在你一条条 commit 来修复 Bug 和 push 到远程仓库之前你云端的仓库上的代码都是有问题的，而且对别人的协同开发造成不必要的麻烦。</p>
<p>正确做法是把有风险和较大的改动都要新建一个分支进行管理，在新的分支里进行提交。当功能已经完善以后，把分支 Pull Rquest 合并回主分支。这样，就算其它分支改残了，主分支依然是合理和完美的。而且，不同的人协同开发时，可以尽量用不同的分支，互不冲突。</p>
<blockquote>
<p>从 <a href="https://github.com/viosey/hexo-theme-material/commit/7cd11ad840317991bdee7997bf66157634b17950" target="_blank" rel="external"><code>7cd11ad840317991bdee7997bf66157634b17950</code></a> 开始，Material 主题的开发中，我们学习谷歌 Chrome，引入了 <code>canary</code> 的概念。在 Material 主题的仓库中，<code>master</code> 分支被高度保护，所有 PR 都必须经过 两个以上的项目参与者 Review 后才能入库，所以 <code>master</code> 分支是高度稳定的正式版本。以 <code>master</code> 为基础，我们 fork 出一份 <code>canary</code> 分支，用来存放所有未经过完善测试的代码。然后当需要作出较大改动或者重做一个新功能时，再以 <code>canary</code> 分支为基础 fork 一份新的分支进行开发，开发完毕以后再 Pull Request 合并回 <code>canary</code> 分支。当一定阶段的开发结束以后，会有项目参与者参与对 <code>canary</code> 分支的代码进行功能性测试。当验收完毕以后，<code>canary</code> 分支最后再会合并回 <code>master</code>。</p>
</blockquote>
<p>想要知道我们的 Branch 命名的含义，可以阅读 <a href="https://github.com/viosey/hexo-theme-material/wiki/Branch-Name-Format" target="_blank" rel="external">hexo-theme-material - Contributing Wiki - Branch Name Format</a>。</p>
<h1 id="更新日志"><a href="# 更新日志" class="headerlink" title="更新日志"></a>更新日志 </h1><p> 当一个阶段的开发以后，我们就会推出更新日志。对于开发者，这是对过去一段时间自己开发的总结；对于用户，更新日志是他们了解你开发成果的渠道。<br>一个好的更新日志可以清楚地展现你这一段时间的成果，应该包括你修复的 Bug、你新增的 Feature、你做的改动。如果有必要，你还需要列出你的突破性变更（Breaking Changes，一般这类改动会改变用户过去的操作习惯、或者需要用户对其作出新的配置，以及其它包含不向下兼容的改动）。</p>
<blockquote>
<p>从 <a href="https://github.com/viosey/hexo-theme-material/releases/tag/1.2.5" target="_blank" rel="external">1.2.5</a> 开始，Material 主题开始采用新的更新日志格式（灵感来自于我过去制作 ROM 写发包帖的经验）。然后 viosey 参考 <a href="https://github.com/angular/angular.js/blob/master/CHANGELOG.md" target="_blank" rel="external">Angular Changelog</a> 完善了更新日志格式。我们用成熟了的更新日志格式发布了 <a href="https://github.com/viosey/hexo-theme-material/releases/tag/1.2.6" target="_blank" rel="external">1.2.6</a>。</p>
</blockquote>
<p>如果想学习 Material 的更新日志规范，你可以阅读 <a href="https://github.com/viosey/hexo-theme-material/wiki/Change-log-format" target="_blank" rel="external">hexo-theme-material - Contributing Wiki - Change log format</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是我博客用的 Material 主题的 &lt;code&gt;collaborater&lt;/code&gt; 之一。&lt;a href=&quot;https://material.viosey.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-theme-material&lt;/a&gt; 现在在 &lt;a href=&quot;https://github.com/viosey/hexo-theme-material&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt; 有 &lt;a href=&quot;https://github.com/viosey/hexo-theme-material/stargazers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/viosey/hexo-theme-material.svg?style=flat-square&quot; alt=&quot;GitHub stars&quot;&gt;&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/viosey/hexo-theme-material&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors/viosey/hexo-theme-material.svg?style=flat-square&quot; alt=&quot;GitHub contributors&quot;&gt;&lt;/a&gt;，即将成为 Hexo 上 star 数前三的主题。&lt;br&gt;现在我把我从参与这个主题里学到的开源项目的管理技巧分享出来给大家作为参考。&lt;/p&gt;
    
    </summary>
    
      <category term="异闻堂" scheme="https://blog.nfz.moe/categories/%E5%BC%82%E9%97%BB%E5%A0%82/"/>
    
    
      <category term="开源" scheme="https://blog.nfz.moe/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="项目管理" scheme="https://blog.nfz.moe/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="Git" scheme="https://blog.nfz.moe/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>是时候离开了——我眼中的酷安</title>
    <link href="https://blog.nfz.moe/archives/coolapk-in-my-mind.html"/>
    <id>https://blog.nfz.moe/archives/coolapk-in-my-mind.html</id>
    <published>2017-02-11T09:52:46.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>酷安曾经是一个很 Geek 的地方——至少过去是这样子的。酷安一开始就没有考虑做单纯的应用下载市场。<br>本来酷安在我眼里是一个大家可以自由交流的地方。大家都是高质量的 Android 玩家，人人都有两把刷子；用户可以和开发者自由互动，酷友可以和管理层相互玩笑，大家一起交流心得或者有 dalao 出来普及知识。。。</p>
<p>而如今呢？</p>
<p>一知半解的小白不懂装懂，深谙技巧的机油遭到排挤；开发者开始浮躁地追逐名利，在进步和在努力的却已经潜水不见；热心分享的酷友被迫删帖，打包党和病毒开始招摇过市；抄袭蔚然成风还受到庇护，维护开源和版权却遭到批判；当年叱咤风云的酷安大 V 逐渐离开，猖狂的小学生开始涌进酷安；用户对捐赠嗤之以鼻，对公益和慈善不屑一顾；使用盗版和破解版的人高高在上，坚持入正的酷友却遭到攻击；不负责任的开发者装着委屈，拒绝 HTTPS 的开发者傲然表示无所谓；收购神器拿来作恶的公司被打脸，没经历过历练的商业“团队”辱骂用户、主动下架了自己的作品。</p>
<blockquote>
<p>这一段概括了我经历过的酷安最近的几件大事，包括 <code>没有密码找回 </code>、<code> 柯震恶 </code>、<code>feemo</code> 等大 V 离开酷安，冰箱的开发者和破解者撕逼后潜水，美化版 QQ 分享被迫全部删帖，<code> 夜之浪子 </code> 暂停了他的搬运，<code> 绿色守护 </code> 被打包病毒，<code> 妮乎 </code> 不遵守开源协议抄袭，<code> 酷安小编 </code> 批判维护开源的酷友“过年吃饱了闲的”，几个宣称会黑服务器和抓包的“小学生”给妮哩招黑，<code> 奇葩小超 </code> 的 <code> 奇葩云 </code> 公益捐款被攻击，<code>xMIUI</code> 和 <code> 拾乐 </code> 发生的正版盗版之争，<code> 妮哩萌萌 </code> 用明文传输用户名和密码，<code> 一句 </code> 的开发者坚持 “HTTPS 无用论”，<code> 阻止运行 </code> 被 <code> 猎鹰网络 </code> 收购后种种丑态，<code> 花</code> 的开发团队辱骂用户、最后主动下架。</p>
</blockquote>
<p>不记得是阿酷还是小编说过，酷安就像一个社会，社会百态都会出现，所以管理层一直看淡撕逼。是的，酷安的确像一个小的社会。<br>去过隔壁乐园吗？去过葫芦侠三楼吗？我在那两个里面都逛过一圈。隔壁乐园被自欺欺人的用户和毫无意义的评论填满；葫芦侠三楼被不懂装懂、打包抄袭的猖狂小学生充斥。似乎任何一个社区，最终都会不可避免地要走这个道路，最后堕入深渊，比如现在的知乎和贴吧，比如葫芦侠和手机乐园，比如酷安。<br>酷安小编说过，“酷安一天产生上万条动态”、“难道酷安需要你们撕逼来拉流量？” 是的，酷安的确不需要；同样的，葫芦侠和乐园它们也都不需要。</p>
<p>不记得是哪位酷友说过，酷安本身没有变，是酷友们变了。然而，酷安的灵魂就在于那足够令酷安自豪的高质量的用户。现在用户和开发者像逃离沉船一样，从酷安流失出去。不知道会不会继续有高质量的用户加入酷友的大家庭，为酷安补充新鲜的血液。</p>
<p>我也无所谓再做所谓的普及和分享了。过去一个月以来我进行了两次清理、累计清理了 1100 多条动态；现在留下来 31 条动态，用来告诉大家，我至少在酷安存在过。</p>
<p>酷安其实在转变，酷安的用户也在转变。有的用户不适合新的酷安，就会离开，大家没必要太放在心上。</p>
<hr>
<p>联系我的方式并没有改变。你们依旧可以在我的微博、我的博客、MAT BBS 上找得到我；我的 E-Mail、我的 Telegram、我的 QQ 也没有改变。我并不是从此杳无音信、无处可寻。<br>或许有那么一天，我还会回酷安看看，看看那个改变了我的 2016 年，也改变了我人生方向的那个酷安。</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;酷安曾经是一个很 Geek 的地方——至少过去是这样子的。酷安一开始就没有考虑做单纯的应用下载市场。&lt;br&gt;本来酷安在我眼里是一个大家可以自由交流的地方。大家都是高质量的 Android 玩家，人人都有两把刷子；用户可以和开发者自由互动，
    
    </summary>
    
      <category term="自言语" scheme="https://blog.nfz.moe/categories/%E8%87%AA%E8%A8%80%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>为什么安装 Xposed 以后会导致卡顿</title>
    <link href="https://blog.nfz.moe/archives/why-xposed-cause-unsmooth-exprience.html"/>
    <id>https://blog.nfz.moe/archives/why-xposed-cause-unsmooth-exprience.html</id>
    <published>2017-02-01T15:55:12.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>经常有人说 Xposed 会带来卡顿的操作体验，甚至会引起掉帧等糟糕的后果。所以我再一次阅读完 Xposed  的文档以后，希望能用 <strong> 通俗的方式 </strong> 做一个回答。</p>
<a id="more"></a>
<p>Xposed 的工作原理我在 <a href="https://blog.neofelhz.space/archives/forcestopgb-lieying-brevent.html" target="_blank" rel="external">《阻止运行、猎鹰网络、黑域 始末》</a> 一文中介绍 Xposed Moudule 的权限时做了简单介绍。这里我再详细地说一遍：</p>
<blockquote>
<p>Xposed 的工作原理是通过替换或劫持 <code>/system/bin/app_process</code> 控制 <code>zygote</code>（而 <code>zygote</code> 孵化了所有应用的进程，可以形象地称之为“进程之母”），使 <code>app_process</code> 在启动过程中加载 Xposed 的重要部分 <code>XposedBridge.jar</code>，这一段 Java 包含了所有的劫持方法，从而完成对 <code>Zygote</code> 进程及其创建的 <code>Dalvik 虚拟机</code> 的劫持，Xposed 在开机的时候利用 <code>XposedBridge.jar</code> 完成在原 Function 执行的前后加上自定义代码的操作，从而完成所有的 Hook Functions。</p>
</blockquote>
<p>在 Android L 时，Xposed 是通过劫持 <code>app_process</code> 来达到 hook 的目的。到了 Android M，谷歌再一次加强了系统安全性，加强了对系统底层（主要是框架 framework）的封装。所以为了实现 hook，就不得不修改 ART（Android Run Time，Android 虚拟机执行进程的方式），从而对 app_process 提供接口。这就是为什么当时 Android L 和 M 的 Xposed 憋了老久才放出来的原因。当然这一次 Android N 的 Xposed 迟迟不出来原因主要是系统安全性的增强和由于系统分区加固而可能需要另辟蹊径 Systemless 的缘故。</p>
<p>说了这么多，还没有说 <code>hook</code> 是什么东西。<code>hook</code>，钩子的意思。那么这个钩子拿来钩什么东西？（反正不是鱼）实际上，钩子钩的是资源，进程调用的资源。让系统本来从 APP 中读取的资源重定向到第三方的模块，这样就实现了在不修改 APP 的情况下实现了对系统资源、APP 资源的替换！从 Zygote 产生出进程开始就已经完成了劫持。这里就和模块有关了。Xposed 提供了一系列钩子，这些钩子就是接口。开发 Xposed 模块的开发者只需要找到需要替换的资源、框架，用 Xposed 的钩子实现替换即可。</p>
<blockquote>
<p>为什么钩子可以实现这个？因为 APK 在运行时会进入虚拟机（Dalvik 或者 ART），然而你在虚拟机里面劫持了原本的 Java API，制作了一个新的可供操作的 API，当然可以实现资源替换、字节码替换了。</p>
</blockquote>
<p>那么 Xposed 到底消耗不消耗系统的性能？</p>
<p>Android L 以后，Xposed 会在标准的运行 <code>zygote</code> 进程的基础上制作一个新的 带有 Xpsed API 的 运行环境。所以在没有用到 Xposed 的地方，原来怎么运行的程序依然按原来的方式运行。Xposed 只有在应用启动时会根据钩子执行一些替换工作。这部分执行得是非常快的，所以你是不会意识到应用启动速度的差别的，而且这部分占用的内存是很少的。这就是为什么一些改动需要重启才能生效的原因了。所以说，单纯刷入 Xposed，是并不会引起系统卡顿的。</p>
<p>那么为什么 Xposed 会使用户觉得卡顿了呢？当 hook 没有启用时，系统是几乎无影响的。但是你一旦安装了模块以后，hook 开始发挥作用，然后开始替换系统资源为模块自己的代码（排除流氓终结者、核心破解、XPrivacy 这类仅仅篡改了返回值的模块），比如重力工具箱要 hook 系统 Framework 和 SystemUI 的资源。而且，重力工具箱要修改的地方要更底层一些，这样才能实现不重启实时完成切换切换并生效（XnubiaUI 模块，相当于 nubiaUI 上的重力工具箱，也是对 nubiaUI 的功能、界面进行调整的 Xposed 模块，它就没有做实时生效）。在这样的设计中，相当于一次要启用大量钩子随时调用，那么在 UI 层面就有大量改动需要用到钩子。于是在这些调用中，执行速度受到了一些影响。</p>
<hr>
<p>总结：单单安装 Xposed 是不会引起卡顿的，影响运行速度的并不是完全在于模块多少。是否影响卡顿取决于模块的功能本身，越需要经常 hook 替换资源的模块、需要替换大量资源的模块、hook 越接近系统底层的模块，最容易拖慢运行速度。此外，模块的功能实现设计、代码写得是否优雅等，都会影响到运行速度。此外，在目前富余的性能配置面前，Xposed 带来的系统卡顿固然不可忽略，但是一般人感觉是不会太明显的。更何况，在国内 BAT 毒瘤滥用广播接收器、毒瘤后台服务面前，我们还是使用 Xposed 模块来镇压毒瘤显得更为合适——不然造成的卡顿不是 Xposed Hook 所能够比拟的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经常有人说 Xposed 会带来卡顿的操作体验，甚至会引起掉帧等糟糕的后果。所以我再一次阅读完 Xposed  的文档以后，希望能用&lt;strong&gt;通俗的方式&lt;/strong&gt;做一个回答。&lt;/p&gt;
    
    </summary>
    
      <category term="实验室" scheme="https://blog.nfz.moe/categories/%E5%AE%9E%E9%AA%8C%E5%AE%A4/"/>
    
    
      <category term="Android" scheme="https://blog.nfz.moe/tags/Android/"/>
    
      <category term="Xposed" scheme="https://blog.nfz.moe/tags/Xposed/"/>
    
      <category term="卡顿" scheme="https://blog.nfz.moe/tags/%E5%8D%A1%E9%A1%BF/"/>
    
  </entry>
  
  <entry>
    <title>从应用“妮乎”不遵守开源协议谈谈我国开源的现状</title>
    <link href="https://blog.nfz.moe/archives/open-source-in-china.html"/>
    <id>https://blog.nfz.moe/archives/open-source-in-china.html</id>
    <published>2017-01-31T08:47:12.000Z</published>
    <updated>2017-03-13T16:52:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>身在这个奇怪的地方，被迫做着奇怪的事情，来获取本该轻易获取的东西。然而就算这样，也不能避开一群被害不浅的人，来帮他们洗地。</p>
<a id="more"></a>
<p>我本以为我应该对这种事情是睁一只眼闭一只眼的。但发生了一些事情以后，我还是选择了站出来。或许我把自己看得太高，不过，谨慎一点好。</p>
<hr>
<p>在酷安“妮乎”这个应用中因为开发者不负责任的举动、不遵守开源协议的行为的撕逼中，我可能不是最积极的，但的确是很活跃的一个存在。</p>
<p>“妮乎” 具体都干了什么，我大概列举一下就行：</p>
<ul>
<li>其开发的工具箱 “妮哩萌萌” 提供类似交流社区的服务，但是却使用明文传输用户名和密码；</li>
<li>其开发的工具箱 “妮乎” 功能不华也不实（什么振动 1 次、振动 2 次），部分功能（如抢 TIM 红包，网易云音乐 VIP 破解功能）甚至盗用了开源项目的源码。之所以称为盗用，是因为使用了开源项目的源码却不遵守开源协议。</li>
</ul>
<blockquote>
<p>具体的可以去看知乎 <a href="https://www.zhihu.com/question/55263859" target="_blank" rel="external">“如何看待“妮哩萌萌”开发出的《妮乎 ARE YOUOK》不遵守开源协议？” </a> 的回答。我的回答是 <a href="https://www.zhihu.com/question/55263859/answer/143661495" target="_blank" rel="external">https://www.zhihu.com/question/55263859/answer/143661495</a></p>
</blockquote>
<hr>
<p>当然我这篇文章不能只单纯批判妮乎，不然就没有什么意义了。</p>
<p>现在国内的开源现状是什么样的呢？用 Shadowsocks 的开发功臣 <a href="https://github.com/clowwindy" target="_blank" rel="external">clowwindy</a> 的话来讲，叫做“社会人人都围着官转，人人都巴不得当官”。</p>
<blockquote>
<p>这个是另外一个事件了，破娃酱的事情，也许经常翻越 <code>The Girl Friend Wall</code> 的人可能会知道。<br>破娃酱（Breakwa11）开发了 ShadowsocksR ，实现了 TCP 协议头混淆，但是拒绝开源，而 SSR 本来是在 SS 的基础上开发的、而后者是根据开源协议 GPL 开源的。后来那些纠葛我无需再提。最后 clowwindy 被 <code>你懂得那啥 </code> 请去喝茶了，所有 Github 的动态被冻结在 2015 年 11 月；破娃酱最后还是把 SSR 开源了；现在 SS 和 SSR 项目依然在蓬勃而富有生机地继续发展着。对于用户方面，现在服务商卖 SS 的也有，SSR 的也有。<br> 我本人对这件往事不置可否。我的个人看法是：BreakWa11 再怎么圈粉也好，最后他还算有贡献的——他至少开发了个 SSR，<strong>至少最后开源了 </strong>；他还有一个用爬虫构建的项目 gfw_whitelist，PAC 用的。这和<strong> 妮乎直接盗用、不尊重他人成果</strong>、毫无贡献，还是有一些区别的。 </p>
</blockquote>
<p>现在国内的各个手机厂商，不尊重 GPL 就算了，“把名字换成自己的”，还加点什么功能，然后加上 “官方、独家” 之类的字样。<br>比如小米的内核。众所周知，Android 内核是基于 Linux 内核的，然而 Linux 的内核是根据 GPL 协议开源的，所以各大厂商使用了 Android，就必须第一时间开源内核源码；但是小米宣称自家内核用了什么黑科技，所以拒绝开源。。。</p>
<blockquote>
<p>在国内使用 Linux 内核的手机厂商有数十家，然而遵守 GPLv2 的仅几家而已，某些个人开发者更将自己修改后的内核作为私有财产，不仅不开源，还在代码中加入诸多限制，绞尽脑汁使内核只在自己指定的环境正常工作。用户并不懂什么是开源协议，所以这些人就会去拉拢用户攻击其他试图使他遵守开源协议的开发者。<br>在国内厂商中，开源这一块做的最好的是一加。虽然做得不好——氢 OS 发布 3.0 一个月以后基于 Android N 的内核才开源出来。但是，这 <strong> 总比其它厂商做得好 </strong>——比如吧一加还开源了 device tree。看看传说中的蓝绿大厂 OPPO VIVO，连谷歌发布的 Android 安全补丁都不更新，还宣称安全，结果<strong> 被 wuxianlin 这样的真大神吊着打</strong>。呃，跑偏了。</p>
</blockquote>
<p>当然啦，大部分用户才不会管这些（不然为什么线下 OV 做的这么欢快）。<br>享受成果的人是不会去花时间去研究你是不是盗用的、有没有遵守开源协议，也不会去做道德判断，大部分人都是只要觉得好用就行。所以可以看到，这种环境下开源其实并没有什么优势，只不过为一些人抄袭提供了便利。在这种环境下最后留下来的都是这些，比如妮乎。</p>
<blockquote>
<p>clowwindy 说过，他一直想象的那种大家一起来维护一个项目的景象始终没有出现，也没有出现的迹象。他在维护 SS 时，遇到的主动分享的贡献者并不多。</p>
</blockquote>
<p>与 clowwindy 所想是不同的是，他被喝茶一年以后，SS 项目现在是活跃的，Fork 数我最近去看了一下已经 2.7k 了，全球都有人参与这个项目，为了各种目的（比如翻越限制，比如躲避审查，比如内网穿透）。<br>我认为我自己也是 Github 开源社区的受益者。我参与了我现在使用的博客主题的开发（这个主题的开源地址可以在 Footer 和侧边栏看到）——虽然贡献是微小的，但是项目老大 viosey 依然给了我 <code>collabrator</code> 的权限，我也很幸运能加入到这个项目的开发：我学到的不仅仅是如何用 ejs 开发 hexo 博客的主题，我学到的东西更多，比如如何管理一个多人协同开发的项目，比如 commit 信息怎么写符合规范便于追踪，甚至在和来自法国的小哥共同开发时略微提升了自己英语水平。<br>当然现在年轻的开发者都愿意开源的（比如我认识的 dalao 们，Aviraxp、Omico、iACN、PeterCxy、Trumeet . . . 等等）。但是 Github issue 却并不是那么景气——很多来报 bug 的人是以一种小白求大大解决问题，解决完就走人的方式来的。他们既不愿提供足够的信息（我们也不奢求日志，但是有的 issuer 提供了日志，我们找问题真的会简单很多），也不愿写一些自己尝试的过程供后人参考。他们很多连文档都不仔细阅读，所以弄出不少问题。</p>
<blockquote>
<p>事实上，就以 Material 主题为例——老大 vio 喵是建立了挺完善的文档供大家参考的（而且我们参与者都是谁开发的功能就由谁写文档~）——但是依旧有很多小白进来提问题，而其中有的问题真的可以看文档就能解决的。我又不好意思留个 <code>Please read [docs](https://material.viosey.com)</code> 作为回答然后就 close issue（至少我觉得我和其它外国项目维护者不同，他们真的会这么回答然后 close 掉 issue 的）。<br>我以前做 ROM 时，发包帖会带上一句——“请仔细阅读这个帖子的每一个字，避免错过重要信息。如果做不到，就请大声朗读本帖”。我不希望任何文档需要带上这个。</p>
</blockquote>
<p>不是我贬低什么，也不是我看不起什么，我真的是觉得最适合这个民族的其实是一群小白围着大大转，大大通过小白的夸奖获得自我满足，小白通过大大的幽默挑逗获得参与感。被迫闭源主代码库的魔趣就是这样，龙猪在贴吧和微博和用户们打情骂俏，在自己的 <a href="https://bbs.mfunz.com" target="_blank" rel="external"> 魔趣社区 </a> 搞社区经营。当然龙猪自己也和他带领的团队也是为魔趣写了不少东西的。现在魔趣 <strong> 暂时</strong>（希望以后永远是）是世界第一大安卓开源项目，希望国人能够争气一点。</p>
<blockquote>
<p>像月光这种打包他人 device tree 和开源的内核源码，还恶意诋毁他人、污言秽语人身攻击的，的确又是中国扭曲的开源现状上的又一大块污点。<br>像月光这种打包别人东西搞什么 MOS，这和 RR、AICP、DU、SultanCM 之类的 ROM 性质不同。后者的上游代码也的确都是 CM，他们的项目会严格地附上 credits，甚至是 reference ，它们是互相促进的。大家都知道，少了谁都不行。这就是为什么 CM 解散以后 Android 会有这么大动荡的原因，不过这是另一个故事了。<br>跑偏了，回来继续说。大部分开发者是很低调的，他们愿意去自己潜心做一个项目，就算被侵权被抄袭也不会说什么。他们会觉得很难受，但是不会停止开发。。也有开发者受到用户攻击和诋毁的——Nubia Z11 社区的那几个喷子那次搞起来的就是——但是说实话，几个卷入的 romer 当时其实是在那里把这个当笑话看的。</p>
</blockquote>
<p>在这种用户的群体存在，中国的开源现状就是玩笑。</p>
<p>我已经有一些明白到这个民族的前面为什么会有一堵墙了。国内的论坛和社区到处都是什么附件回帖可见，等级多少用户组可见，一个论坛一个大大供小白跪舔。不需要造墙，网民也已经地自发造墙——这些回帖可见、等级不足啥的不就是墙么？</p>
<blockquote>
<p>当然，国内清流的论坛也有，比如 <a href="https://mat.letitfly.me" target="_blank" rel="external">MAT BBS</a>，近乎于无偿地让大家一起平等地分享 MyAndroidTools 的使用经验。这样的参见蠢喵大佬的<a href="https://blackyau.cc/guozixi.html" target="_blank" rel="external">《良心不易》</a>）。</p>
</blockquote>
<p>当然，正如我所说的，“大部分用户才不会管这些”，小白跪舔时也不会选人的，他们不会判断。不然就没法理解月光打包党的微博下面为什么会有这么多评论在那里跪舔了。</p>
<p>这和国外社区是不一样的，国外社区哪有这样的环境？重新提我之前写的那一段，在国外，遇到 bug 和 issue，会有人发帖挖坑，然后很多人参与研究和造轮子，造出来以后会有自己的经历分享。我觉得这才是一个技术向的社区应该有的气氛，比如 xda-developer fourm 就是这样的一个社区。在这个全球最大的智能设备交流社区，不论技术多高，任何不遵守开源协议的开发者都会被删帖封号。国内哪个论坛会这么干？也就一加论坛和 MIUI 论坛封过臭名昭著的月光的号罢了。</p>
<hr>
<p>我自己也是华夏民族的后人，但我也知道，我的民族是一个造了几千年墙的保守的农耕民族。我不得不承认我自己的劣根性（鲁迅说过，也是整个民族都有的劣根性），也不得不承认我们有时候的确缺乏对别人的基本尊重，我们不愿意分享、喜欢遮遮掩掩，喜欢小圈子抱团，需要通过闭关锁国来获得自己需要的优越感。</p>
<blockquote>
<p>也许我颇有些数典忘祖的感觉，但是不得不承认的确是这样。</p>
</blockquote>
<p>国内的开源环境到底是什么样呢？大量开发者使用现成的开源的成果，却很少有人遵守开源协议。他们从上游 merge，却并不将自己的成果反馈回去，然后大言不惭地宣称自己的项目有多么多么强大，比事实上的上游（他们往往并不承认）牛掰多少，这与开源社区的精神背道而驰。更有甚者，如我文首提到的，毫无贡献、拿来就用，然后宣称是自己的成果（即使不是公开说出来，也是暗示性的影响。为数不多的人遵守 GPL ，更别提哪怕在 Credit 注明一下来源的了）。</p>
<hr>
<p>尾声：在我写到国外社区那一段时，妮哩萌萌找到我，告诉我侵权的网易云和谐功能已经去除。所以我把我在酷安的那条动态删掉了。更新日志说是功能“已经失效”，Aviraxp 说是“因为你抄错了”。是不是这样，我也已经不想深究，人的确是会累的，但是在做自己喜欢做的事情和自己有义务要去做的事情，我希望我会继续坚持乐此不疲。写完一篇博客，梳理自己大脑里混乱的思路，其实真的能看开很多东西。<br>最后，推荐大家读一读 <a href="https://github.com/beijinglug/fsfs-zh" target="_blank" rel="external">《自由软件，自由社会》</a>（<em>Free Software,Free Society</em>）。这本书的中文翻译在 Github 开源。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;身在这个奇怪的地方，被迫做着奇怪的事情，来获取本该轻易获取的东西。然而就算这样，也不能避开一群被害不浅的人，来帮他们洗地。&lt;/p&gt;
    
    </summary>
    
      <category term="异闻堂" scheme="https://blog.nfz.moe/categories/%E5%BC%82%E9%97%BB%E5%A0%82/"/>
    
    
      <category term="开源" scheme="https://blog.nfz.moe/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="环境" scheme="https://blog.nfz.moe/tags/%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>阻止运行、猎鹰网络、黑域 始末</title>
    <link href="https://blog.nfz.moe/archives/forcestopgb-lieying-brevent.html"/>
    <id>https://blog.nfz.moe/archives/forcestopgb-lieying-brevent.html</id>
    <published>2017-01-26T08:21:12.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>SuperSU 和阻止运行被收购和商业化无疑是一场巨变。因为 Root 和 Xposed 都是对 Android 安全、稳定运行非常重要的一部分，一旦商业化和作恶，后果不可预料。</p>
<a id="more"></a>
<h1 id="ForceStopGB（阻止运行）"><a href="#ForceStopGB（阻止运行）" class="headerlink" title="ForceStopGB（阻止运行）"></a>ForceStopGB（阻止运行）</h1><p>我来首先介绍一下阻止运行是什么。<br>阻止运行项目最早开始于 2015 年，原作者 liudongmiao 表示是写给他女朋友的一款作品，目的是为了遏制 Android 的众多毒瘤，通过 Xposed 或 Hook 系统 Framework 实现。项目完整地在 Github 上使用 WTFPL 协议完整开源并高度自由。截止到 2.3.2 版本，阻止运行已经是一款较完善的应用，名声广为流传，在酷安尤为口碑良好，甚至一度超过绿色守护。</p>
<h1 id="被收购后的阻止运行"><a href="# 被收购后的阻止运行" class="headerlink" title="被收购后的阻止运行"></a>被收购后的阻止运行</h1><p>2016 年 3 月，liudongmiao 在酷安发表一条动态称，魔趣开源项目的发起人 Martincz 发现 ForceStopGB 项目在 Github 被删库，liudongmiao 表示阻止运行项目被卖给一家叫做“猎鹰工作室”的公司，并表示阻止运行即使被收购后依然不会作恶，并且 liudongmiao 表示阻止运行依然在他可控的范围之内。</p>
<blockquote>
<p>后面大家可以看到，这一切并不是如 liudongmiao 所想的那样。</p>
</blockquote>
<h2 id="联网权限"><a href="# 联网权限" class="headerlink" title="联网权限"></a>联网权限 </h2><p> 猎鹰网络在收购发布的第一个版本 <code>2.3.3</code> 立刻就加入了联网权限，以及一个“立刻阻止”和“无法阻止？立刻上报程序猿”两个功能。猎鹰表示这个是必要权限。</p>
<blockquote>
<p>2.3.3 的阻止运行的联网权限是否必要这里我已经不想深究。不然我备用机装一个 Xposed 再装一个抓包就全部找出来了。大家如果愿意的可以去尝试一下。</p>
</blockquote>
<p>对于联网权限我想说一下，Xposed 是一把非常锋利的双刃剑，它的原理是通过替换 <code>/system/bin/app_process</code> 控制<code>zygote</code>，使 <code>app_process</code> 在启动过程中加载 <code>XposedBridge.jar</code>，从而完成对 <code>Zygote</code> 进程及其创建的 <code>Dalvik 虚拟机</code> ` 的劫持，Xposed 在开机的时候完成对所有的 Hook Function，在原 Function 执行的前后加上自定义代码。所以说，一般的权限管理软件对 Xposed Module 是毫无作用的，Xposed 无疑拥有系统的最高权限。</p>
<h2 id="百度定位 -SDK"><a href="# 百度定位 -SDK" class="headerlink" title="百度定位 SDK"></a>百度定位 SDK</h2><p>这个猎鹰工作室的高振刚（即酷安中的 ksana2016）——猎鹰老大表示是上头公司要求内置的 sdk。至于上头公司是啥我后面会讲到。<br>最早发现这个的是因为一些酷友发现阻止运行 2.3.6 版开始莫名耗电，使用写轮眼一查看可以发现里面竟然内置了百度定位的 sdk <code>com.baidu.location.f</code> 。大家结合上面我介绍的 Xposed 的介绍，以及联系 Xposed 的后台保活能力，可以联想一下这个的后果。</p>
<blockquote>
<p>其实大家想一下要定位权限有什么用？如果真的只是为了统计，为什么并没有在 <code>AndroidManiFest.xml</code> 内发现定义的其它统计有关的组件？而且，在酷友的强烈要求下，2.3.7 立刻就去掉了百度定位 sdk，说明这个组件对于应用运行是毫无影响的。</p>
</blockquote>
<p><img src="https://ooo.0o0.ooo/2017/03/23/58d3a6cd10a6c.png" style="width:50%"><br><img src="https://ooo.0o0.ooo/2017/03/23/58d3a6cd0be4e.png" style="width:50%"></p>
<blockquote>
<p>2.3.6 版本还可以在手机乐园上下载到，大家可以自取。</p>
</blockquote>
<h2 id="盗用 -UI- 设计"><a href="# 盗用 -UI- 设计" class="headerlink" title="盗用 UI 设计"></a>盗用 UI 设计 </h2><p> 在 2.3.6，阻止运行使用了一个新的 UI 设计，包括一个 <code>listviewer</code> 和一个 <code>drawer</code>。然而很快，一名 ID 为 twroc 的酷友在酷安声称该 UI 设计所有权应归他所有，并且得到了 liudongmiao 的证实。然而猎鹰工作室对于此却宣称因为该酷友不肯加入猎鹰工作室的团队、不能接受“外包私活”等理由推诿。</p>
<blockquote>
<p>这是酷友 tworc 的声明</p>
</blockquote>
<p><img src="https://ooo.0o0.ooo/2017/03/23/58d3d337b2408.png" style="width:50%"><br><img src="https://ooo.0o0.ooo/2017/03/23/58d3d337b23d2.jpg" style="width:50%"></p>
<p>最后这件事情是这样不了了之的。</p>
<p><img src="https://ooo.0o0.ooo/2017/03/23/58d3d39ebf072.png" style="width:50%"></p>
<blockquote>
<p>具体情况可以看下面</p>
</blockquote>
<h2 id="微阻止"><a href="# 微阻止" class="headerlink" title="微阻止"></a>微阻止 </h2><p> 这项功能当时 ksana2016 是这么介绍的：</p>
<p><img src="https://ooo.0o0.ooo/2017/03/23/58d3d3f7e0583.png" style="width:50%"></p>
<p>这项功能当时在酷安被大部分酷友抨击和反对。并且该功能在 2.4.0 版本终于推出以后，我们可以发现，所谓去除开屏广告不过是使广告不显示，实际上带有启动屏的广告应用启动时会有 2s 的黑屏。</p>
<h1 id="猎鹰网络"><a href="# 猎鹰网络" class="headerlink" title="猎鹰网络"></a>猎鹰网络 </h1><p> 猎鹰工作室到底是何方神圣？于是我上网进行了一番调查，结果很快就出来了。</p>
<p>这是搜狐新闻网的一篇 <a href="http://mt.sohu.com/20150928/n422296570.shtml" target="_blank" rel="external"> 报道</a>，里面介绍了一个名叫“智度投资”的投资公司全资收购了猎鹰网络和半数“应用汇”的股份。</p>
<p>这是 <a href="http://www.falconnect.cn" target="_blank" rel="external">猎鹰网络的官网</a> ，可以在公司介绍里看到这样的内容：</p>
<blockquote>
<p>猎鹰网络已成为国内领先的以大数据、机器学习、人工智能为技术驱动的新兴移动广告技术公司。</p>
</blockquote>
<p>哦，一个有着“闭环生态链”的移动广告技术公司，要收购阻止运行这种对抗毒瘤的”安卓优化神器”，还要开发广告阻止功能？一旦借助 Xposed Hook 系统底层的优势投放广告、窃取用户隐私，是颇有些令人不寒而栗的，大家联想一下百度定位 SDK、联网权限应该也就明白了。</p>
<h2 id="工作室成员行为和态度"><a href="# 工作室成员行为和态度" class="headerlink" title="工作室成员行为和态度"></a>工作室成员行为和态度 </h2><h3 id="面对盗用 -UI- 行为的态度"><a href="# 面对盗用 -UI- 行为的态度" class="headerlink" title="面对盗用 UI 行为的态度"></a> 面对盗用 UI 行为的态度</h3><p><img src="https://ooo.0o0.ooo/2017/03/23/58d3d4ae11ab8.png" style="width:50%"></p>
<blockquote>
<p>这脸打的 pia pia 的响。</p>
</blockquote>
<p><img src="https://ooo.0o0.ooo/2017/03/23/58d3d513d640a.png" style="width:50%"><br><img src="https://ooo.0o0.ooo/2017/03/23/58d3d513be7d1.png" style="width:50%"></p>
<p>对于猎鹰高振刚和酷友 twroc 在微信的对话可以在 <a href="https://ooo.0o0.ooo/2017/01/26/5889fb945e96e.jpg" target="_blank" rel="external"> 这里 </a> 看。</p>
<h3 id="对于定位 -SDK- 的态度"><a href="# 对于定位 -SDK- 的态度" class="headerlink" title="对于定位 SDK 的态度"></a>对于定位 SDK 的态度</h3><p><img src="https://ooo.0o0.ooo/2017/03/23/58d3d5677bb83.png" style="width:50%"></p>
<blockquote>
<p>我不置可否，不过把质疑用户称为嘴脸也真是没谁了。</p>
</blockquote>
<h3 id="面对质疑的态度"><a href="# 面对质疑的态度" class="headerlink" title="面对质疑的态度"></a>面对质疑的态度</h3><blockquote>
<p>如果你们的阻止运行的底线是这样，那么请问还有谁放心用？</p>
</blockquote>
<p><img src="https://ooo.0o0.ooo/2017/03/23/58d3d69d095d9.png" style="width:50%"></p>
<h1 id="补丁版黑域"><a href="# 补丁版黑域" class="headerlink" title="补丁版黑域"></a>补丁版黑域 </h1><p> 大概是这样的，liudongmiao 找到高振刚高总，申请开发基于 Android N 的补丁版“阻止运行”，即补丁版黑域项目。liudongmiao 表示新的项目只能用于 Android N、部分开源，并且不采用 Xposed 模式，于是高振刚同意了。后来补丁版黑域可以成功用于 Android 4.4-7.1 的任何版本，于是猎鹰网络威胁 liudongmiao 要起诉他。于是补丁版黑域被迫在酷安网下架，liudongmiao 被迫停更、去转向开发非补丁版黑域。</p>
<p><img src="https://ooo.0o0.ooo/2017/01/26/5889f8eb06788.png" alt="0000050.png"></p>
<p>幸运的是猎鹰网络没有（<strong>实际上也没有能力</strong>）封杀补丁版黑域，所以一键黑域打补丁项目和补丁版黑域依然可以继续使用。为了避免纠纷，酷安网页版隐藏了有关的项目，大家可以使用酷安手机客户端下载使用。</p>
<blockquote>
<p>对我而言，我认为猎鹰网络起诉 liudongmiao 是无稽之谈。补丁版黑域仅仅使用了阻止运行闭源前 2.3.2 的源码（我自己也有一份，也开源在 Github 和 Coding 上），而且那份源码是根据 WTFPL 的协议开源的，是完全自由的。补丁版黑域的实现原理和阻止运行完全不同，无论是否支持 Android N 以下都无所谓。<br>猎鹰把一个本来开源的项目弄成闭源，还彻底毁了阻止运行，这样一个优秀开源项目的名声，谁的罪过更大一清二楚。</p>
</blockquote>
<h1 id="非补丁版黑域"><a href="# 非补丁版黑域" class="headerlink" title="非补丁版黑域"></a>非补丁版黑域 </h1><p> 现在非补丁版黑域使用了全新的实现方法，通过一定的权限（如 Priv 权限或者 ADB 权限）来监听 Android 的运行日志，获取应用自启、唤醒的情况，配合 Android N 的后台机制一起对付应用毒瘤。当然，这种方法并不是那么强力。</p>
<hr>
<p>如果说，现在最终的结果绿色守护依然在不断完善，方便的 非补丁版黑域依然可以继续吊打毒瘤，补丁版黑域虽然不再提供支持、也依然可以使用，所以广大 Android 机油面对 BAT 毒瘤并不是没有方法。但是要说有什么损失，那么就是基于 Xposed 的一款开源自由的神器被迫闭源、走向了另一端，给大家留下一个商业化以后的反例。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SuperSU 和阻止运行被收购和商业化无疑是一场巨变。因为 Root 和 Xposed 都是对 Android 安全、稳定运行非常重要的一部分，一旦商业化和作恶，后果不可预料。&lt;/p&gt;
    
    </summary>
    
      <category term="异闻堂" scheme="https://blog.nfz.moe/categories/%E5%BC%82%E9%97%BB%E5%A0%82/"/>
    
    
      <category term="Android" scheme="https://blog.nfz.moe/tags/Android/"/>
    
      <category term="省电" scheme="https://blog.nfz.moe/tags/%E7%9C%81%E7%94%B5/"/>
    
      <category term="黑域" scheme="https://blog.nfz.moe/tags/%E9%BB%91%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>你好 Disqus，再见多说</title>
    <link href="https://blog.nfz.moe/archives/hello-disqus-and-goodbye-duoshuo.html"/>
    <id>https://blog.nfz.moe/archives/hello-disqus-and-goodbye-duoshuo.html</id>
    <published>2017-01-26T03:18:34.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>多说又双叒叕爆炸了！——这是我看到 <code>多说评论系统故障(9900015)，请联系客服人员</code> 报错信息时的想法。</p>
<a id="more"></a>
<h1 id="多说"><a href="# 多说" class="headerlink" title="多说"></a>多说 </h1><p> 多说是国内一款常见的社会化评论系统，常用于给没有自带评论服务的如 Hexo、Jeykll、MediaWiki 等提供评论服务，或者是为自带评论服务的如 WordPress、Typecho 等提供社会化评论服务。多说最大的优点可提供 QQ、微博、人人网、开心网、豆瓣、谷歌等一干社交媒体账号的登陆服务。但是作为国内一大评论系统，多说还是有许多不足：</p>
<ul>
<li>多说默认的样式实在太 $^[-@#(&amp;^9{ . . .</li>
<li>多说的垃圾评论拦截功能形同虚设，广告、色情评论实在泛滥</li>
<li>一段时间以来多说的服务很不稳定，经常崩坏</li>
<li>多说已经停止开发，最后一次更新停步于 2016 年 5 月</li>
<li>社交媒体的头像不支持 HTTPS（虽然这个锅应该归 BAT 毒瘤背）</li>
</ul>
<blockquote>
<p>虽然多说头像 HTTPS 可以用七牛或者 PHP 反代得以实现，但是毕竟是多说一大黑点。</p>
</blockquote>
<h1 id="Disqus"><a href="#Disqus" class="headerlink" title="Disqus"></a>Disqus</h1><p>如果说国内有一家独大的评论系统多说，那么国外对应的就是 Disqus。与多说单纯仅提供评论服务不同，Disqus 提供一套完整的社区服务和推广功能（或许这是 Disqus 没有像多说一样面临困境的最大原因）。但是 Disqus 也有它的不足：</p>
<ul>
<li>Disqus 与多说不同，并不支持自定义样式（但是说实话，Disqus 的样式比多说的默认样式不知道高到哪里去了）</li>
<li>Disqus 不建议游客参加评论——Disqus 会引导游客注册 Disqus 账户，除非评论者勾选<code>I&#39;d rather post as a guest</code></li>
<li>Disqus 仅提供 Facebook、Twitter 等国外社交媒体的社会化登陆方式</li>
<li>由于 <code>The Girl Friend Wall</code> 的存在，Disqus 在国内 <strong>开放、自由、有序</strong> 的网络环境下是不能访问的。</li>
</ul>
<h1 id="duoshuo2Disqus"><a href="#duoshuo2Disqus" class="headerlink" title="duoshuo2Disqus"></a>duoshuo2Disqus</h1><p>尽管多说有丰富的国内社交登陆方式以及无访问障碍，但是 Disqus 服务毕竟稳定可靠（没办法，洋大人的东西确实是好），而且有一整套完善的垃圾评论屏蔽功能（不会像多说一样极其容易被垃圾评论攻陷。而且国内也没有针对 Disqus 设计的垃圾评论机器人），所以我依旧决定迁移到 Disqus。<br>这里我直接用了现成的轮子 <a href="https://github.com/JamesPan/duoshuo-migrator" target="_blank" rel="external">duoshuo-migrator</a> 转换的。这个 Python 程序可以把多说导出的备份文件转换成 Disqus 支持的 WXR 格式。具体使用方法在项目的 README 里写的很清楚了。<br>不过对之前评论过的小伙伴们表示很遗憾，你们的头像都没了. . .</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多说又双叒叕爆炸了！——这是我看到 &lt;code&gt;多说评论系统故障(9900015)，请联系客服人员&lt;/code&gt; 报错信息时的想法。&lt;/p&gt;
    
    </summary>
    
      <category term="博客栈" scheme="https://blog.nfz.moe/categories/%E5%8D%9A%E5%AE%A2%E6%A0%88/"/>
    
    
      <category term="评论" scheme="https://blog.nfz.moe/tags/%E8%AF%84%E8%AE%BA/"/>
    
      <category term="多说" scheme="https://blog.nfz.moe/tags/%E5%A4%9A%E8%AF%B4/"/>
    
      <category term="Disqus" scheme="https://blog.nfz.moe/tags/Disqus/"/>
    
  </entry>
  
  <entry>
    <title>拨开云雾见天明——解析酷安新出现的微信盗号木马</title>
    <link href="https://blog.nfz.moe/archives/lets-check-and-study-wechat-trojan.html"/>
    <id>https://blog.nfz.moe/archives/lets-check-and-study-wechat-trojan.html</id>
    <published>2017-01-21T13:42:00.000Z</published>
    <updated>2017-01-23T15:47:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>一日，某不安好心者在酷安的 Xposed 模块 “App Setting” 的评论区发布了一条评论——“APP Setting 专业版”。一位用户下载使用后中招——微信密码泄露，账户被盗刷。  </p>
<a id="more"></a>
<p>随后，酷友反应，在著名 Android 优化应用 “绿色守护” 的评论区同一个人发布了所谓 “绿色守护绿色版” 同样有涉嫌病毒的嫌疑。一时间酷安疑云四起，甚至引起了酷安的多位小编对各类修改版应用的抵制，对 QQ 美化版影响尤为巨大。<br>本人有幸在那个居心叵测的人被酷安的小编们删帖之前成功地下载到了两个样本。现在我将通过逆向这个病毒，来弄清楚这个里面到底有多少猫腻。</p>
<blockquote>
<p>另外，感谢酷友 <a href="http://www.coolapk.com/u/523048" target="_blank" rel="external">DBin_K</a> 以身试毒、安装“体验”并抓包，获得了宝贵的截图和数据。</p>
</blockquote>
<h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><blockquote>
<p>工欲善其事必先利其器。这是本人使用的工具。</p>
</blockquote>
<ul>
<li>ROM IDE+</li>
<li>MT 管理器</li>
<li>Packet Capture</li>
<li>Beyond Compare</li>
<li>安装包解析工具</li>
</ul>
<blockquote>
<p>这些是病毒的样本。本人已经混淆了这些 Apk 资源，确保不会再被其它不法分子反编译、用于其它非法用途！</p>
</blockquote>
<ul>
<li><a href="https://static.neofelhz.space/wechattrojan/greenify-virus_r.apk" target="_blank" rel="external">伪装成绿色守护的安装包（已混淆）</a></li>
<li><a href="https://static.neofelhz.space/wechattrojan/appsettings-virus_r.apk" target="_blank" rel="external">伪装成 APP Setting 的安装包（已混淆）</a></li>
<li><a href="https://static.neofelhz.space/wechattrojan/timesync-virus_r.apk" target="_blank" rel="external">病毒的核心组件（已混淆）</a></li>
</ul>
<h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><p>以下是受害者酷友“阿光正传”的经历。</p>
<p><img src="https://ooo.0o0.ooo/2017/03/23/58d3a29ba6d29.png" style="width:50%"></p>
<h1 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h1><p>以被打包过的 App Setting 为例。<br>首先使用 ROM IDE+（核心是 APkTool）对正常的 APP Setting 和被打包多的 APK Setting 进行反编译，然后使用 Beyond Compare 比对反编译出来的东西有什么区别。<br>首先可以看到 <code>AndroidManiFest.xml</code> 的区别，可以看到被打包过的 App Setting 多申请了这些权限。</p>
<ul>
<li>读取设备信息</li>
<li>读写短信</li>
<li>读取联系人</li>
<li>开机自动启动</li>
<li>震动权限</li>
<li>挂载文件系统</li>
<li>读取存储</li>
<li><strong>在其它应用上层显示内容</strong></li>
</ul>
<p><img src="https://ooo.0o0.ooo/2017/01/22/5884c14978c35.png" alt="0000014.png"></p>
<blockquote>
<p>上图中左边是被打包应用的 <code>AndroidManiFest.xml</code>，右边是正常应用的 <code>AndroidManiFest.xml</code>。</p>
</blockquote>
<p><img src="https://ooo.0o0.ooo/2017/01/22/5884c1800b7af.png" alt="0000015.png"></p>
<p>除此以外还可以从第二张图里看到，被打包过的应用还额外内置了两个 Activity，分别是 <code>com.android.append.MainActivity</code> 和 <code>com.android.append.MainActivity2</code>。这两个活动所包含的包名和应用本身的包名 <code>de.robv.android.xposed.mods.appsettings</code> 并不相符。所以意味着这两个活动并没有写进打包的应用中，而是额外的独立应用。</p>
<blockquote>
<p>而且，这个应用伪装成了系统组件（这个额外的应用的包名为 com.android.append）</p>
</blockquote>
<h1 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h1><p><img src="https://ooo.0o0.ooo/2017/01/22/5884c19e06abd.png" alt="0000016.png"></p>
<p>这张图可以看到被打包的应用还新增了一个 <code>drawable</code> 文件夹，内建了一个假的微信悬浮窗和微信登陆界面的样式，可以看到微信的 icon 和登陆的界面图片，以及定义界面的 xml。随便摘录一段给大家看看。</p>
<pre class="line-numbers language-xml"><code class="language-xml">&lt;shapexmlns:android="http://schemas.android.com/apk/res/android">
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>solid</span> <span class="token attr-name"><span class="token namespace">android:</span>color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#e5fafafa<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>corners</span> <span class="token attr-name"><span class="token namespace">android:</span>radius</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5.0dip<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shape</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://ooo.0o0.ooo/2017/03/23/58d3a3915bcd4.png" style="width:50%"></p>
<p><img src="https://ooo.0o0.ooo/2017/01/22/5884c36ddb1b6.png" alt="0000018.png"></p>
<p>实际效果像这样（由 DBIn_K 提供截图）：</p>
<p><img src="https://ooo.0o0.ooo/2017/03/23/58d3a3e22424b.png" style="width:50%"></p>
<blockquote>
<p>还有模有样的，不是么？</p>
</blockquote>
<h1 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h1><p>从那张图里还可以看到，除了一些 smali 的不同，还有一个显著区别就是 <code>asset</code> 目录下竟然内置了一个小的 timesync.apk！<br>将它提取出来，用 MT 管理器和安装包解析工具加以分析：</p>
<p><img src="https://ooo.0o0.ooo/2017/01/22/5884c2f9b7903.png" alt="0000021.png"></p>
<blockquote>
<p>原来这个就是那个 <code>com.android.append</code>。伪装应用名为 SuperSU,，以便瞒天过海。</p>
</blockquote>
<p>再对其进行反编译，查看里面到底有什么猫腻。</p>
<p><img src="https://ooo.0o0.ooo/2017/01/22/5884c3248d6e2.png" alt="0000019.png"></p>
<p>查看里面的文件目录树可以看出来同样是内置了一套悬浮窗的样式，除此以外还内置了一套微信登录界面的样式。<br>同样只摘录一段给大家看看就行：</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span> <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff393a3f<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>48.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/wx_top<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>scaleType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fitStart<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span> <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#00000000<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>48.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>48.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnBack_onClick<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ffffffff<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>paddingLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>48.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 解除登录限制 <span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>14.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff999999<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>paddingLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>48.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>26.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 微信安全支付 <span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>16.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff999999<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center_horizontal<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 请输入支付密码，以验证身份 <span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>还有这一段：</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>16.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff353535<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>69.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 账  号 <span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span> <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>16.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff353535<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColorHint</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ffdddddd<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/ed_wx_account<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@null<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>220.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 微信号 / 手机号 /Email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span> <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/vw_wx_line1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff45c01a<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.5dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>13.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginBottom</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>13.0dip<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>16.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff353535<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>69.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 密  码 <span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span> <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>16.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff353535<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColorHint</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ffdddddd<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/ed_wx_password<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@null<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 密码 <span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>inputType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>textPassword<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span> <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/vw_wx_line2<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ffd8d8d8<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.5dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>13.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginBottom</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>13.0dip<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name"><span class="token namespace">android:</span>enabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>17.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/login_button_textcolor<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/btn_wx_login<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/login_button_background<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>47.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 登录 <span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Button_onClick<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15.0sp<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff576b95<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20.0dip<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 登录遇到问题 ?<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>实际效果就像这样（由以身试毒的酷友 DBin_K 提供截图）：</p>
<p><img src="https://ooo.0o0.ooo/2017/01/22/5884c458b5942.png" style="width:50%"><br><img src="https://ooo.0o0.ooo/2017/03/23/58d3a51235f21.png" style="width:50%"></p>
<blockquote>
<p>“解除登录限制”、“微信安全支付”、“请输入支付密码，以验证身份”、“登录遇到问题？” ，真的很具有迷惑性。</p>
</blockquote>
<h1 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h1><p>酷友 DBin_K 还发现病毒的核心组件还申请了 root 权限，他把 su 权限以后 SuperSU 抓到大概这些日志。</p>
<p><img src="https://ooo.0o0.ooo/2017/03/23/58d3a58b5c9fd.png" style="width:50%"><br><img src="https://ooo.0o0.ooo/2017/03/23/58d3a5dbd8a7e.png" style="width:50%"></p>
<p>这些日志都是满满的 <code>cat</code> 指令，从微信的数据文件夹 <code>/data/data/com.tencent.mm</code> 合并了很多文件到它自己的数据目录 <code>/data/user/0/com.android.append</code> 下面。具体要这些数据是为了什么还不清楚（我自己没有微信，所以没法知道它获取的这些是什么数据）</p>
<blockquote>
<p>更新：获取这些数据是为了微信跨设备登陆，具体参见 0x07。</p>
</blockquote>
<p><img src="https://ooo.0o0.ooo/2017/01/22/5884c4a035d6f.png" alt="0000020.png"></p>
<p>现在来看他病毒核心的 smali，粗略一看，里面值得我们关注的主要是三个部分，一个是基于 google 开发的解析 json 的框架 gson，一个是由 Jakewharton 开发的 DiskLruCache 缓存，一个是 loopj 开发的 android-async-http。这几个就是用来把获取到的数据传回作者的服务器。<br>本来我可以直接一个一个看 smali ，直到找到他数据回源的域名，但是后来 DBin_K 直接开了抓包，拿到了数据回源的地址：<code>uu636.com/update.aspx</code>。所以我就没有继续看下去。</p>
<p><img src="https://ooo.0o0.ooo/2017/03/23/58d3d62ba817c.png" style="width:50%"></p>
<h1 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h1><p>现在这个病毒的原理很明显了：始作俑者专找 Xposed 和 Root 类应用下手，因为这类应用有很好的后台存活性，以便随时出来作案；然后是病毒的核心组件伪装成 SuperSU 向受害者申请 root 权限，把病毒核心注入 system/app ，并收集用户的微信的数据库；接着是由于 <code>ANdroidManiFest.xml</code> 中定义了在在其它应用显示的权限，每十分钟会弹出一个假的弹窗提示你“微信登陆已过期，需要重新登陆”，从而把受害者骗进他们那个做的非常逼真的登陆界面，直到套出用户的用户名和密码；最后这些信息会被回传给始作俑者的服务器，然后很快就会用这些信息盗刷受害者的微信钱包。同时，root 权限帮助病毒核心组件长期存活，就算受害者使用 RE 管理器删除了组件，也会不断复活。</p>
<h1 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h1><blockquote>
<p>2017-01-23 更新：</p>
</blockquote>
<ol>
<li>根据学习软件工程的逆向大佬 iKirby 分析，获取微信的数据文件是为了实现跨设备微信登陆；</li>
<li>从百度贴吧可以获得的公开的资料得知，这个团伙从今年年初就已经开始作案（几次病毒的行为都高度相似），已经有将近十名受害者被骗。</li>
<li>查询一下这个域名的 Whois 信息可以看到，这个域名是在国内购买的，同时启用了域名 Whois 隐私保护，所以查不到域名所有人的信息。<br><img src="https://ooo.0o0.ooo/2017/01/23/5885b1c80d9da.png" alt="0000025.png"><br><img src="https://ooo.0o0.ooo/2017/01/23/5885b22beb322.png" alt="0000026.png"></li>
<li>查询这个域名绑定服务器所在的 IP，几个 IP 库只能得到是 IANA 和 安徽。<br><img src="https://ooo.0o0.ooo/2017/01/23/5885b2f834032.png" alt="0000028.png"><br><img src="https://ooo.0o0.ooo/2017/01/23/5885b26881f0a.png" alt="0000027.png"><br>根据全网 ping 的响应速度，的确应该是国内地区的服务器。但是又找不到备案信息，所以这个服务器应该是在香港（我用我朋友在香港沙田机房的 VPS ping 了一下发现耗时是 0ms，结果不言而喻）</li>
<li>在酷友 <a href="http://www.coolapk.com/u/554126" target="_blank" rel="external">llllllllllll666</a> 和酷安的开发组成员 <a href="http://www.coolapk.com/u/346976" target="_blank" rel="external">liubaoyua</a> 对病毒的逆向下获得了 java 部分。详见 0x08。</li>
</ol>
<h1 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h1><p>在酷友 llllllllllll666 和酷安开发组成员 liubaoyua 的反编译下发现了几个类，大概就是这些作用：</p>
<ul>
<li>劫持微信快捷方式</li>
</ul>
<p><img src="https://ooo.0o0.ooo/2017/01/23/5885f9872a537.png" alt="0000043.png"></p>
<p>代码如图，当获取到 root 权限以后木马核心会开始寻找启动器下的微信的快捷方式劫持到自己的桌面活动 <code>com.android.append.Launcher.Activity</code>，这样受害者点击微信你图标也会触发打开伪造的登陆界面。</p>
<ul>
<li>卸载微信</li>
</ul>
<p><img src="https://ooo.0o0.ooo/2017/01/23/5885fac58eab8.jpg" alt="0000044.jpg"></p>
<p>这个就简单了，仅仅只是卸载微信而已。</p>
<ul>
<li>一键变砖</li>
</ul>
<p><img src="https://ooo.0o0.ooo/2017/01/23/5885fbe777a38.png" alt="0000042.png"></p>
<p>这个是挂载 system 分区，然后删除 <code>system/framework/</code> 文件夹，也就是删除了系统框架，可以导致手机变砖。</p>
<blockquote>
<p>后面两个是服务端远程控制实现的，所以请各位“以身试毒”的大无畏者务必小心，小心 <strong> 被远端遥控一键变砖</strong>！！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一日，某不安好心者在酷安的 Xposed 模块 “App Setting” 的评论区发布了一条评论——“APP Setting 专业版”。一位用户下载使用后中招——微信密码泄露，账户被盗刷。  &lt;/p&gt;
    
    </summary>
    
      <category term="实验室" scheme="https://blog.nfz.moe/categories/%E5%AE%9E%E9%AA%8C%E5%AE%A4/"/>
    
    
      <category term="Android" scheme="https://blog.nfz.moe/tags/Android/"/>
    
      <category term="安全" scheme="https://blog.nfz.moe/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="病毒" scheme="https://blog.nfz.moe/tags/%E7%97%85%E6%AF%92/"/>
    
  </entry>
  
  <entry>
    <title>Deepin 环境搭建</title>
    <link href="https://blog.nfz.moe/archives/install-deepin-as-enviroment.html"/>
    <id>https://blog.nfz.moe/archives/install-deepin-as-enviroment.html</id>
    <published>2017-01-19T14:08:12.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>回到家了，发现家里的电脑已经崩坏了。趁此机会把 Ubuntu 的 system 分区、win10 系统分区和不重要的数据分区全部格式化和重新分区了，重建一下工作环境。</p>
<h1 id="安装 -Deepin"><a href="# 安装 -Deepin" class="headerlink" title="安装 Deepin"></a>安装 Deepin</h1><p>Deepin 和 Ubuntu Kylin 都是国人定制版的 Linux，其中后者真是辣鸡，以前安装过一次——这 TMD 是什么辣鸡？然后我一边脖子上绑着呕吐袋一边刻录 Ubuntu 16.04 LTS 的 U 盘，装完 Ubuntu 以后呕吐立刻就停下来了。<br>前者嘛也好不到哪里去，不过自带 <strong> 免费 </strong> 的 crossover 容器（在别的地方这玩意是要收费的！！）<br>首先在 Windows 环境下刻录 Deepin 的安装镜像。在 <a href="http://deepin.org" target="_blank" rel="external"> 深度 </a> 官网上下载 Deepin 15.3 的 ISO，用深度自己的安装盘刻录软件完成刻录。<br>然后用 U 盘完成 Deepin 的安装，并用由深度制作 GNU GRUB 作为系统的引导。</p>
<h1 id="安装 -Atom- 编辑器"><a href="# 安装 -Atom- 编辑器" class="headerlink" title="安装 Atom 编辑器"></a>安装 Atom 编辑器 </h1><p> 这是我最常用的、也是我最喜欢的编辑器。可以使用包安装器安装。深度内置的软件源已经自带，不需要额外再添加新的软件源。</p>
<blockquote>
<p>另外，Deepin 新版本是基于 Debian 开发的，所以和 Ubuntu 可以用 apt 指令添加软件源不同，Deepin 和 Debian 都需要通过配置系统软件源目录文件来添加软件源。</p>
</blockquote>
<pre><code>sudo apt-get update
sudo apt-get install atom
</code></pre><blockquote>
<p>当然，深度的应用商店是一个可视化的深度的软件源和包安装器。你也可以直接从深度应用商店安装 Atom 编辑器。</p>
</blockquote>
<h1 id="安装 -ShadowSocks-Qt5"><a href="# 安装 -ShadowSocks-Qt5" class="headerlink" title="安装 ShadowSocks-Qt5"></a>安装 ShadowSocks-Qt5</h1><pre><code>sudo add-apt-repository ppa:hzwhuang/ss-qt5
sudo apt-get update
sudo apt-get install shadowsocks-qt5
</code></pre><blockquote>
<p>当然，深度应用商店也能完成这个的安装。</p>
</blockquote>
<p>从服务商下载 gui-config.json 并导入线路，启动服务，在系统的控制中心启动 SOCKS 代理，地址是 127.0.0.1，端口 1080。</p>
<h1 id="安装 -nodejs"><a href="# 安装 -nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h1><p>同样用包安装器安装</p>
<pre><code>sudo apt-get install nodejs
</code></pre><blockquote>
<p>深度自带的软件源在用上述指令安装 nodejs 过后，直接在终端中输入 <code>npm -v</code>是会提示 <code>bash: command not found</code> 的；必须要使用 <code>sudo apt-get install npm</code>，日志会告诉你又安装了两个软件包。这时才可以正常使用 npm 命令。</p>
</blockquote>
<h1 id="迁移并搭建 -Hexo"><a href="# 迁移并搭建 -Hexo" class="headerlink" title="迁移并搭建 Hexo"></a>迁移并搭建 Hexo</h1><p>我的 Hexo 的工程文件是托管在 Coding 的，所以我可以直接从 Coding 里项目 clone 下来就行。</p>
<pre><code>mkdir MyBlog
cd MyBlog
git clone http://coding.net/xxxxxxx.git
</code></pre><p>然后执行 <code>npm install</code> 来安装 Hexo。</p>
<blockquote>
<p>如果遇到了安装以后不能执行 hexo 命令 not found，可以通过 <code>sudo npm install hexo-cli -g</code> 解决。</p>
</blockquote>
<h1 id="安装 -Git-GUI"><a href="# 安装 -Git-GUI" class="headerlink" title="安装 Git GUI"></a>安装 Git GUI</h1><p>对于我这种因为驾驭不了 git 命令行的人来说，有一个 GUI 客户端会好很多。</p>
<pre><code>sudo apt-get install git-gui
</code></pre><p>安装以后可以用 <code>git gui</code> 来执行即可弹出 GUI 窗口，和 Windows 上的 GUI 客户端颇有神似之处。Linux 上的 这个 GUI 客户端是用 Python 写的，相当于做了几个常用指令的快捷方式。</p>
<h1 id="安装 -OpenJDK"><a href="# 安装 -OpenJDK" class="headerlink" title="安装 OpenJDK"></a>安装 OpenJDK</h1><p>执行 <code>sudo apt-get install openjdk-8-jdk</code>即可。通过输入 <code>java -v</code> 可以检查 JDK 的版本和确认已经安装成功。</p>
<h1 id="安装 -Python"><a href="# 安装 -Python" class="headerlink" title="安装 Python"></a>安装 Python</h1><p>Ubuntu 和 Deepin 都内置好了 Python，所以只需要安装几个模块就行。</p>
<pre><code>sudo apt-get install python-pip
sudo apt-get install python-dev
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;回到家了，发现家里的电脑已经崩坏了。趁此机会把 Ubuntu 的 system 分区、win10 系统分区和不重要的数据分区全部格式化和重新分区了，重建一下工作环境。&lt;/p&gt;
&lt;h1 id=&quot;安装 -Deepin&quot;&gt;&lt;a href=&quot;# 
    
    </summary>
    
      <category term="异闻堂" scheme="https://blog.nfz.moe/categories/%E5%BC%82%E9%97%BB%E5%A0%82/"/>
    
    
      <category term="linux" scheme="https://blog.nfz.moe/tags/linux/"/>
    
      <category term="深度" scheme="https://blog.nfz.moe/tags/%E6%B7%B1%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>Goodbye,2016</title>
    <link href="https://blog.nfz.moe/archives/good-bye-2016.html"/>
    <id>https://blog.nfz.moe/archives/good-bye-2016.html</id>
    <published>2016-12-31T13:32:18.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>怎么说呢，过去的这一年发生了很多事情，无论是好事还是坏事。我摘出那些对我很重要的事情吧，也许其中一些甚至改变了我的人生。</p>
<a id="more"></a>
<hr>
<p>对我来说今年最重要事情的是莫过于我拥有了自己的个人网站和自己的独立博客，从此我有了一个可以写属于我自己的文字的地方。<br>同时借助这个机会认识了不少技术 dalao 和菊苣。比如我博客这个主题的作者 <a href="https://viosey.com" target="_blank" rel="external">Viosey</a>；建站方面给了我很多建议和帮助的 <a href="https://letitfly.me" target="_blank" rel="external">guozixi</a> 和 <a href="https://blackyau.cc" target="_blank" rel="external">蠢黑通行</a>；等等等等。</p>
<p>不得不承认因为这个我学会了很多，比如我因此学了如何 <del>正确地</del> 使用 Git 和 Github，还简单自学了一点点的 php 和 ejs，甚至还为 Material 主题的开发做了一点微小的贡献。</p>
<p>另一个重要的事件就是我来到了酷安。<br>不得不承认酷安的确像是一个社交平台而不是纯粹的应用市场。在这里可以和独立的个人开发者面对面平等谈话，也可以和其它折腾的 Android 爱好者交换心得，可以和酷安的小编们和开发团队 <del>PY 交易 </del> <del> 打情骂俏 </del> 友好交流，也可以发现很多深藏不露的 dalao。不得不承认，来酷安以后我的玩机水平和知识大有增长，获得了很多 Android 的资源，认识了很多搞<del> 基</del>机的 <del> 酷安基佬 </del> 酷友们，学会了如何更加彻底的对付 BAT 毒瘤。<br>我是 2016 年初来的酷安，也分享了一些自己的玩机技巧和资源，如今也把自己培养成了一个酷安小 V（500 出头的粉丝数，以及一堆活跃的、互粉的 <del> 酷安基佬 </del> 酷友们；仰望那些千粉的 dalao 中~）。</p>
<p>对我而言还有两件重要的事情，一件是我认识了网易云音乐（当初可能是为了找歌而且网易云的曲库比较完整吧），于是我没有像现在这样喜欢听音乐。。。音乐的确会引起人的共鸣，也是一个人与人交流的契机，而网易云和酷安一样都很看重社交。<br>还有就是我成为了中文 VOCALOID 的粉丝，自从听了那首《风中飞散的回忆》以后，就再也离不开中文 VOCALOID 了，从此我的网易云的每日推荐中就只剩下中 V 和纯音乐了。</p>
<p>还有就是有了一个自己微博（当初是我还在做 ROM 时用来和机油交流的，然后在微博上也认识了搞 Android 开发的菊苣们）。虽然渣浪微博吃枣药丸，但渣浪也好歹是一大社交媒体吧。现在在微博上也有了 500 粉丝，也能经常和一堆 dalao 们谈笑风生。</p>
<hr>
<p>突然就变成碎碎念了。。。不论怎么说，我希望我的新的一年更好吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;怎么说呢，过去的这一年发生了很多事情，无论是好事还是坏事。我摘出那些对我很重要的事情吧，也许其中一些甚至改变了我的人生。&lt;/p&gt;
    
    </summary>
    
      <category term="自言语" scheme="https://blog.nfz.moe/categories/%E8%87%AA%E8%A8%80%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>再见，CyanogenMod</title>
    <link href="https://blog.nfz.moe/archives/the-end-of-an-era-of-cyanogenmod.html"/>
    <id>https://blog.nfz.moe/archives/the-end-of-an-era-of-cyanogenmod.html</id>
    <published>2016-12-27T11:15:10.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>今年的圣诞节礼物非常特殊。CyanogenMod 的主要维护者 ciwrl 于 12 月 25 日将所有机型从服务器上的自动编译列表删除。</p>
<a id="more"></a>
<blockquote>
<ul>
<li><a href="https://github.com/CyanogenMod/hudson/commit/a46504638f2276664a9da19c570dd43dcc75efe2" target="_blank" rel="external">Github Commit Message:RIP CM</a> Change ID Ic7d4ed79f89d488d544f60ab0e361f6449cfff69</li>
<li><a href="https://u.vss.im/XKAw8" target="_blank" rel="external">CyanogenMod Code Review</a></li>
</ul>
<p><img src="https://ooo.0o0.ooo/2016/12/27/586240cfbe1df.jpg" alt="0000040.jpg"><br><img src="https://ooo.0o0.ooo/2016/12/27/586240cfa5c0c.jpg" alt="0000041.jpg"></p>
<p>正如之前 CyanogenMod 宣布的那样，将于 12 月 31 日之前，停止每夜版固件的支持。</p>
</blockquote>
<h1 id="这是一个时代的终结"><a href="# 这是一个时代的终结" class="headerlink" title="这是一个时代的终结"></a>这是一个时代的终结 </h1><p> 自从 CyanogenOS 自从 11 月停止维护以后，CyanogenMod 即将走向终点就已经不可避免了，因为 Cyan Inc 是 CyanogenMod 的财源（还管理着 CyanogenMod 的网站和编译服务器）。虽然这样的事情从 Steve Kondik 将 CyanogenMod 装入 Cyngn Inc 的篮子那一刻起就已经注定了，但还是不由的令人惋惜。</p>
<h1 id="CyanogenMod- 的意义"><a href="#CyanogenMod- 的意义" class="headerlink" title="CyanogenMod 的意义"></a>CyanogenMod 的意义</h1><p>CyanogenMod 是基于 Google 发布的 Android 源码而开发的自由及开放源代码软件，也是最早的第三方安卓开源项目，旨在为广大用户提供自由、干净、自主、功能丰富的 ROM</p>
<p>在过去的日子里，CyanogenMod 成立了开源社区，聚集了世界各地的开源开发者参与开发，作为安卓开源项目的领头羊，它一定程度上推动着整个安卓的向前发展，也帮向了用户推广了类似 AOSP 的 ROM。</p>
<p>它是一个成熟的代码分发平台，因为在大多数情况下，作为开源社区的开发个体，开发者们不可能将自己的代码一一提交到各个安卓开源项目之上。因此，CyanogenMod 扮演了代码分发的角色，所有的安卓开源项目都可以在这样一个统一的平台之上拣取自己认为有益的提交或是贡献自有版权的有益提交。</p>
<p>它更是一个规范的制订者，因为开源社区的开发者们大多以 CyanogenMod 为蓝本进行开发，作为其它开源项目，为了实现一些兼容和避免重造车轮，也不得不向其靠拢。</p>
<blockquote>
<p>记得一位 CM 和魔趣的机型适配者曾经说过，CyanogenMod 是一个伟大的开源项目，它的伟大</p>
</blockquote>
<h1 id="CyanogenMod- 消失以后"><a href="#CyanogenMod- 消失以后" class="headerlink" title="CyanogenMod 消失以后"></a>CyanogenMod 消失以后 </h1><p> 而如今，CyanogenMod 因为和 Cyngn Inc 的纠纷而倒下，不得不改头换面以 Lineage OS 这个新名称涅槃重生。</p>
<p>这可能导致无数的开发者从此流离失所，散落到各个安卓开源项目之上。对于其它开源项目来讲，这或许是发展壮大的利好，但对整个开源社区来讲，这却是一种损失。</p>
<blockquote>
<p>我认识的几名 Android 开发者、ROM 适配者，有的转而编译 Slim，有的开始为 Omini 做贡献。</p>
</blockquote>
<p>由于公司内部的纠纷和知识产权的问题，Lineage OS 失去了 cyanogenmod.org 的控制权和 CyanogenMod 名称的所有权，开发者的重新聚集并不是那么容易。好比你搬了家，经常到你家做客的朋友不可能在第一时间知晓，更不要说那些多年未见的朋友了。</p>
<p>而且，失去了背后财团的支持，就意味着没有了更好的服务，包括没有了基于最新代码编译的 Nightly 版的 ROM。</p>
<p>可想而知，虽然 CyanogenMod 开放了的源代码依然在 Github 开源（开发者依然可以继续基于此编译 CyanogenMod），然而不仅 Lineage OS 在未来发展的道路上更加艰难以外，整个安卓开源社区的发展速度可能会有一定程度的放缓。</p>
<hr>
<h1 id="LineagOS- 现状"><a href="#LineagOS- 现状" class="headerlink" title="LineagOS 现状"></a>LineagOS 现状</h1><h2 id="LineageOS- 的第一篇博客《Yes-this-is-us》"><a href="#LineageOS- 的第一篇博客《Yes-this-is-us》" class="headerlink" title="LineageOS 的第一篇博客《Yes,this is us》"></a>LineageOS 的第一篇博客《Yes,this is us》</h2><blockquote>
<p>So, yes, this is us. LineageOS will be a continuation of what CyanogenMod was. To quote Andy Rubin, this is the definition of open. A company pulling their support out of an open source project does not mean it has to die.</p>
<p>Check back for more information on Tuesday.</p>
</blockquote>
<h2 id="LineageOS- 的含义"><a href="#LineageOS- 的含义" class="headerlink" title="LineageOS 的含义"></a>LineageOS 的含义</h2><blockquote>
<p><strong>Lin·e·age</strong><br>/ˈlinēij/<br>noun</p>
<ol>
<li>lineal descent from an ancestor; ancestry or pedigree.</li>
<li>a sequence of species each of which is considered to have evolved from its predecessor.</li>
</ol>
</blockquote>
<h2 id="LineageOS- 的其它服务"><a href="#LineageOS- 的其它服务" class="headerlink" title="LineageOS 的其它服务"></a>LineageOS 的其它服务</h2><p><a href="http://status.lineageos.org/" target="_blank" rel="external">http://status.lineageos.org/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年的圣诞节礼物非常特殊。CyanogenMod 的主要维护者 ciwrl 于 12 月 25 日将所有机型从服务器上的自动编译列表删除。&lt;/p&gt;
    
    </summary>
    
      <category term="异闻堂" scheme="https://blog.nfz.moe/categories/%E5%BC%82%E9%97%BB%E5%A0%82/"/>
    
    
      <category term="CM" scheme="https://blog.nfz.moe/tags/CM/"/>
    
      <category term="ROM" scheme="https://blog.nfz.moe/tags/ROM/"/>
    
      <category term="Android" scheme="https://blog.nfz.moe/tags/Android/"/>
    
      <category term="AOKP" scheme="https://blog.nfz.moe/tags/AOKP/"/>
    
  </entry>
  
  <entry>
    <title>A Fork in the Road — CM&#39;s last blog</title>
    <link href="https://blog.nfz.moe/archives/a-fork-in-the-road-cyangenmod.html"/>
    <id>https://blog.nfz.moe/archives/a-fork-in-the-road-cyangenmod.html</id>
    <published>2016-12-26T13:35:00.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>Cyanogenmod 在他们的官网发布了最后一篇博客 <em>A Fork in the Road</em> 后，Cyanogenmod 官网和博客域名的 DNS 解析就被停了。</p>
<a id="more"></a>
<p> 所以仅有少数人读了 Cyanogenmod 这篇告别的博客。于是我将 CM 的这一篇博客转载到这里，同时衷心祝愿 Lineage OS 能够凤凰涅槃。</p>
<hr>
<p>Last week, we released the final CM-13.0 releases, updated to the latest security patches, in anticipation of what follows.</p>
<p>Yesterday, Cyanogen Inc (Cyngn) announced that they were shutting down the infrastructure behind CyanogenMod (CM). This is an action that was not unpredictable given the public departure of Kondik (cyanogen himself) from the company, and with him our last remaining advocate inside Cyngn’s leadership.</p>
<p>In addition to infrastructure being retired, we in the CM community have lost our voice in the future direction of CM – the brand could be sold to a third party entity as it was an asset that Kondik risked to start his business and dream. Even if we were to regroup and rebuild our own infrastructure, continuing development of CM would mean to operate with the threat of sale of the brand looming over our heads. Then there is the stigma that has grown to be attached to anything named ‘Cyanogen’. Many of you reading this have been champions of clarifying that the CM product and CyngnOS were distinct, yet the stain of many PR actions from Cyngn is a hard one to remove from CM. Given CM’s reliance on Cyngn for monetary support and the shared source base, it’s not hard to understand why the confusion remains.</p>
<p>It will come as no surprise that this most recent action from Cyngn is definitely a death blow for CyanogenMod.</p>
<p>However, CM has always been more than the name and more than the infrastructure. CM has been a success based on the spirit, ingenuity and effort of its individual contributors – back when it was Kondik in his home, to the now thousands of contributors past and present.</p>
<p>Embracing that spirit, we the community of developers, designers, device maintainers and translators have taken the steps necessary to produce a fork of the CM source code and pending patches. This is more than just a ‘rebrand’. This fork will return to the grassroots community effort that used to define CM while maintaining the professional quality and reliability you have come to expect more recently.</p>
<p>CM has served the community well over its 8 long years. It has been our home, bringing together friends from all over the world to celebrate our joy of building and giving. Its apt then that on this Eve of a holiday we pay our respects. We will take pride in our Lineage as we move forward and continue to build on its legacy.</p>
<p>Thank you &amp; Goodbye,<br>The CyanogenMod Team</p>
<p><a href="https://www.cyanogenmod.org/blog/a-fork-in-the-road" target="_blank" rel="external">https://www.cyanogenmod.org/blog/a-fork-in-the-road</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Cyanogenmod 在他们的官网发布了最后一篇博客 &lt;em&gt;A Fork in the Road&lt;/em&gt; 后，Cyanogenmod 官网和博客域名的 DNS 解析就被停了。&lt;/p&gt;
    
    </summary>
    
      <category term="异闻堂" scheme="https://blog.nfz.moe/categories/%E5%BC%82%E9%97%BB%E5%A0%82/"/>
    
    
      <category term="CM" scheme="https://blog.nfz.moe/tags/CM/"/>
    
      <category term="ROM" scheme="https://blog.nfz.moe/tags/ROM/"/>
    
      <category term="Android" scheme="https://blog.nfz.moe/tags/Android/"/>
    
      <category term="AOKP" scheme="https://blog.nfz.moe/tags/AOKP/"/>
    
  </entry>
  
  <entry>
    <title>Interative 调速器有关参数分析</title>
    <link href="https://blog.nfz.moe/archives/cpu-governer-interative-core-ctl.html"/>
    <id>https://blog.nfz.moe/archives/cpu-governer-interative-core-ctl.html</id>
    <published>2016-12-23T09:10:00.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Interative</code>是目前常用的一种 CPU 调速器，其特点是 CPU 频率是根据负载实现交互式反应。但是与 <code>ondemand</code> 和<code>conserative</code>不同的是，<code>interative</code>拥有一些不同的参数配置方式。</p>
<a id="more"></a>
<blockquote>
<p>所以并不像一些人说的，什么 <code>ondemand</code> 非常敏感升频降频都快、<code>interative</code>升频快降频慢、<code>conserative</code>升频慢降频快。</p>
</blockquote>
<p>Interative 可用的调速器参数有以下内容：</p>
<h1 id="负载 - 频率机制"><a href="# 负载 - 频率机制" class="headerlink" title="负载 - 频率机制"></a>负载 - 频率机制 </h1><h2 id="target-loads"><a href="#target-loads" class="headerlink" title="target_loads"></a>target_loads</h2><p> 这个参数的目的是根据 CPU 负载来调整频率：当 CPU 负载升高到该参数时，内核就会升高 CPU 的运行频率以便降低 CPU 负载。该参数的默认值为 90。</p>
<p>该参数的格式是单个固定数值，或者是频率和负载值成对出现用冒号隔开。</p>
<blockquote>
<p>比如 <code>85 1000000:90 1700000:99</code> 表示负载在 85% 以下时，CPU 频率要运行在 1GHz 以下；负载达到 90% 时，CPU 频率要运行在 1.0GHz~1.7GHz，直到 CPU 负载达到 99% 时，频率才会升到 1.7GHz 以上。</p>
</blockquote>
<p>一般地，该参数设置的越低，CPU 升频就会越快、越频繁。</p>
<h2 id="min-sample-time"><a href="#min-sample-time" class="headerlink" title="min_sample_time"></a>min_sample_time</h2><p>CPU 开始降低频率前的最小时间。也就是当负载下降到达较低的区间时还需要再经过多少时间 CPU 才开始降频（也可以简单理解成 CPU 两次降频之间的间隔值）。该值越小，对降频的反应就越敏感。该参数的默认值是 80000uS.</p>
<h2 id="timer-rate- 和 -timer-slack"><a href="#timer-rate- 和 -timer-slack" class="headerlink" title="timer_rate 和 timer_slack"></a>timer_rate 和 timer_slack</h2><p>CPU 负载采样率。 和 <code>min_sample_time</code> 不同，<code>timer_rate</code>单纯仅仅只规定采样间隔。该设定值越小，负载采样越敏感，频率调整更为敏感，但受限于 <code>min_sample_time</code> <code>above_hispeed_delay</code> 等延迟参数。但是实际上的采样间隔可能会比设定值更长，最长时间为 <code>timer_rate</code> 和 <code>timer_slack</code> 之和。当 <code>timer_clack</code> 值为 -1 时则无上限。</p>
<p>调节这个参数一般不能使手机省电。比如将该值设置的较长，固然可以降低内核探看 CPU 负载的频率，节省电量，但是内核就不能及时感知到负载的下降而及时降频。这个参数的设置取决于你手机对于长线程进程的需求。</p>
<hr>
<h1 id="应急反应机制"><a href="# 应急反应机制" class="headerlink" title="应急反应机制"></a>应急反应机制 </h1><h2 id="hispeed-freq"><a href="#hispeed-freq" class="headerlink" title="hispeed_freq"></a>hispeed_freq</h2><p> 这个参数的目的是指定面对突发的大负载做出应急的反应操作。也就是说当负载突然升高到 <code>go_hispeed_load</code> 且该核心正在运行在较低的频率时，CPU 运行频率会瞬间升高到这个参数指定的频率。这种情况一般都发生在暂时处于闲置的核心上。<code>hispeed_freq</code> 是一个理想的高性能工作频率, 假定该频率足以应对大多数高负载工作。当 CPU 运行在这个频率超过一段时间（即 <code>above_hispeed_delay</code>），CPU 才会继续升高频率。</p>
<p>这个参数如果设置得较低，那么应对突发的大负荷，CPU 的运行频率可能会较低而引起卡顿；如果该值设置的太高则比较容易引起发热。</p>
<h2 id="go-hispeed-load"><a href="#go-hispeed-load" class="headerlink" title="go_hispeed_load"></a>go_hispeed_load</h2><p>这个参数就是规定当 CPU 负载突然到达该值时且当前 CPU 处于闲置状态（离线亦或者是运行在较低频率），CPU 就会瞬间将频率升到 <code>hispeed_freq</code> 以便应对突发状况。该参数的默认值是 99。</p>
<p>一般地，这个值越低，对于突发的大负荷工作，CPU 的反应就会越敏感。如果该值设置的太高则比较容易面对一些突发负载无法立刻升频做出反应引起卡顿，设置的太低则会出现过于频繁的升频导致发热和耗电。</p>
<h2 id="above-hispeed-delay"><a href="#above-hispeed-delay" class="headerlink" title="above_hispeed_delay"></a>above_hispeed_delay</h2><p>这个参数是设置成当 CPU 频率运行在 <code>hispeed_freq</code> 甚至更高以后，突发的负载并没有立刻降低。当 CPU 运行在该频率的时间超过该参数的指定值后，CPU 就会进一步进行升频，以便应对大长线程的大负荷。该参数的默认值是 20000us。设置该参数时可以根据 CPU 所在的不同频率设置不同的延迟。</p>
<p>该参数的格式是单个固定数值，或者是频率和频率区间成对出现用冒号隔开。当参数中涉及到频率时，频率必须采用升序数列。</p>
<blockquote>
<p>比如 <code>19000 1400000:39000 1700000:19000</code> 表示当 CPU 频率在 1.4GHz 以下时 CPU 要在 <code>go_hispeed_load</code> 甚至更高的负载下运行超过 19000 us 才会进一步升频；运行频率在 1.4Ghz~1.7GHz 时延时设置为 39000us；超过 1.7GHz 时则采用 19000us 。</p>
</blockquote>
<p>当该参数设置得较小时 CPU 则会较快地升频（可能会引起卡顿），设置得较大时 CPU 可能会因为不能及时升频而引起卡顿。</p>
<hr>
<h1 id="鸡血模式"><a href="# 鸡血模式" class="headerlink" title="鸡血模式"></a>鸡血模式</h1><h2 id="boost- 和 -boostpulse-duration"><a href="#boost- 和 -boostpulse-duration" class="headerlink" title="boost 和 boostpulse_duration"></a>boost 和 boostpulse_duration</h2><p><code>boost</code> 这个参数由内核写入。如果非零，立即提高所有 CPU 的频率到该 CPU 的 <code>hispeed_freq</code> 甚至更高，直到零被写入此属性，期间无论负载是否降低都不会引起频率的改变。如果为零，则会允许 CPU 频率根据负载而降低到低于 <code>hispeed_freq</code> 设定的频率。默认值为零。<br><code>boostpulse_duration</code> 指在每次 <code>boost</code> 被写入后，CPU 的频率被提升到 <code>hispeed_freq</code> 后在该频率下运行的最低间隔。在该间隔之内，就算 <code>boost</code> 值重新设为零，CPU 仍不会降频。</p>
<hr>
<h1 id="其它参数"><a href="# 其它参数" class="headerlink" title="其它参数"></a>其它参数 </h1><h2 id="io-is-busy"><a href="#io-is-busy" class="headerlink" title="io_is_busy"></a>io_is_busy</h2><p> 这个参数决定是否根据设备的存储有关的 I/O （包括数据在存储上的读写、数据库的修改、熵的增加等）而提升 CPU 频率，以便加快 I/O 性能。</p>
<h2 id="align-windows"><a href="#align-windows" class="headerlink" title="align_windows"></a>align_windows</h2><p>是否对齐所有 CPU 的计时器窗口。对齐的优点是同时评估整个簇的 CPU 以便获得对整个簇的 CPU 的负载信息。缺点是整个簇的 CPU 会同时上线和同时离线导致性能突然增加或突然下降。现在一般都不会开启。</p>
<h2 id="scaling-min-freq- 和 -scaling-max-freq"><a href="#scaling-min-freq- 和 -scaling-max-freq" class="headerlink" title="scaling_min_freq 和 scaling_max_freq"></a>scaling_min_freq 和 scaling_max_freq</h2><p>在 CPU 的设计的容许频率范围内（一般都是由内核规定）再设定一个 CPU 的运行频率区间，内核将会在这个区间内选择 CPU 的运行频率。</p>
<h2 id="ignore-hispeed-on-notif"><a href="#ignore-hispeed-on-notif" class="headerlink" title="ignore_hispeed_on_notif"></a>ignore_hispeed_on_notif</h2><p>如果该参数非零，则频率的改变由调度程序触发，则不应用上述与频率设定相关的逻辑（比如不再根据负载控制频率）。</p>
<h2 id="fast-ramp-down"><a href="#fast-ramp-down" class="headerlink" title="fast_ramp_down"></a>fast_ramp_down</h2><p>如果非零，则不应用 <code>min_sample_time</code>。</p>
<h2 id="max-freq-hysteresis"><a href="#max-freq-hysteresis" class="headerlink" title="max_freq_hysteresis"></a>max_freq_hysteresis</h2><p>这是 <code>interave</code> 调速器的一个扩展，保持 <code>interative</code> 调速器在 <code>policy-&gt; max</code> 的时间。</p>
<h2 id="use-sched-load"><a href="#use-sched-load" class="headerlink" title="use_sched_load"></a>use_sched_load</h2><p>如果该值非零，则 <code>align_windows</code> 则不会生效。</p>
<h2 id="use-migration-notif"><a href="#use-migration-notif" class="headerlink" title="use_migration_notif"></a>use_migration_notif</h2><p>是否在所有 CPU 之间对齐定时器窗口。</p>
<hr>
<p>本文参考了 linux CPU 调速器机制文档和 CAF 的相关文档。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Interative&lt;/code&gt;是目前常用的一种 CPU 调速器，其特点是 CPU 频率是根据负载实现交互式反应。但是与&lt;code&gt;ondemand&lt;/code&gt;和&lt;code&gt;conserative&lt;/code&gt;不同的是，&lt;code&gt;interative&lt;/code&gt;拥有一些不同的参数配置方式。&lt;/p&gt;
    
    </summary>
    
      <category term="实验室" scheme="https://blog.nfz.moe/categories/%E5%AE%9E%E9%AA%8C%E5%AE%A4/"/>
    
    
      <category term="Android" scheme="https://blog.nfz.moe/tags/Android/"/>
    
      <category term="温控" scheme="https://blog.nfz.moe/tags/%E6%B8%A9%E6%8E%A7/"/>
    
      <category term="CPU" scheme="https://blog.nfz.moe/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>Android 的网络感叹号</title>
    <link href="https://blog.nfz.moe/archives/android-captive-portal.html"/>
    <id>https://blog.nfz.moe/archives/android-captive-portal.html</id>
    <published>2016-12-20T12:06:42.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>从 Android L 开始，原生和 CM 的 ROM 用户就会发现，状态栏的网络信号莫名多了一个感叹号。而且，有的时候明明连着 WIFI 用得好好的，却突然跳到数据流量。</p>
<a id="more"></a>
<h1 id="“感叹号”出现的原因和作用"><a href="#“感叹号”出现的原因和作用" class="headerlink" title="“感叹号”出现的原因和作用"></a>“感叹号”出现的原因和作用</h1><p>Android 5.0 开始引入了一种新的网络评估机制来评估网络状况，当你有网络请求时会自动选择网络连接条件最好的一个网络进行连接（也就是 WIFI 和数据之间自动切换）。自然，验证方法是连接到 Google 自家的服务器进行检查。</p>
<blockquote>
<p>这个检测的作用除了可以检查该网络是否能够使用以外，还能检查该网络是否需要登陆（就是运营商的 WiFi 如 CCMC，或者其它公共场所的免费 WiFi 的那个认证）。</p>
</blockquote>
<hr>
<p>正是这个 google 被 Wall 掉了以后导致安卓没有办法评估网络。所以，系统每隔一定时间都会重新尝试连接，就在不知不觉中消耗了数据流量。更恐怖的就是 Android 认为在 WiFi 下无法连接互联网，就让联网的程序通通走流量。于是这样就导致了那个蛋碎的感叹号一直存在，以及 WiFi 用着用着突然自动连回数据连接了。</p>
<h1 id="解决方法"><a href="# 解决方法" class="headerlink" title="解决方法"></a>解决方法 </h1><h2 id="Android-5-0-6-0"><a href="#Android-5-0-6-0" class="headerlink" title="Android 5.0-6.0"></a>Android 5.0-6.0</h2><h3 id="直接禁用验证"><a href="# 直接禁用验证" class="headerlink" title="直接禁用验证"></a> 直接禁用验证 </h3><p> 手机连接电脑开启 USB 调试，输入以下 ADB 命令：</p>
<pre class="line-numbers language-bash"><code class="language-bash">adb shell <span class="token string">"settings put global captive_portal_detection_enabled 0"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>重启设备或者开关一下飞行模式就行。</p>
<blockquote>
<p>但是，还记得我说过么，这个感叹号可以用来判断网络可用性，还可以用来判断网络是否需要登录。</p>
</blockquote>
<h3 id="更换验证地址"><a href="# 更换验证地址" class="headerlink" title="更换验证地址"></a>更换验证地址 </h3><p> 当然还有另外一个方法，就是直接把这个服务地址切换到国内的可用的地址就行了。这样既可以去除叹号，也可以检查网络可用情况。</p>
<pre class="line-numbers language-bash"><code class="language-bash">adb shell <span class="token string">"settings put global captive_portal_server your.domain"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="恢复方法"><a href="# 恢复方法" class="headerlink" title="恢复方法"></a>恢复方法 </h3><p> 如果你用的是第一种方法，恢复方法是：</p>
<pre class="line-numbers language-bash"><code class="language-bash">adb shell <span class="token string">"settings put global captive_portal_detection_enabled 1"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果你用的是第二种方法，那么你需要输入的是：</p>
<pre class="line-numbers language-bash"><code class="language-bash">adb shell <span class="token string">"settings delete global captive_portal_server"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="Android-7-0-7-1-0"><a href="#Android-7-0-7-1-0" class="headerlink" title="Android 7.0-7.1.0"></a>Android 7.0-7.1.0</h2><p>与 Android 5.0-6.0 所用的方法相同，只是验证要求从 443 端口进行，也就是说必须要支持通过 HTTPS 正常访问。</p>
<p>也可以通过 ADB 输入以下指令禁用 HTTPS：</p>
<pre class="line-numbers language-bash"><code class="language-bash">adb shell <span class="token string">"settings put global captive_portal_use_https 0"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>恢复 HTTPS 的方法是用 ADB 输入以下指令：</p>
<pre class="line-numbers language-bash"><code class="language-bash">adb shell <span class="token string">"settings put global captive_portal_use_https 1"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或者</p>
<pre class="line-numbers language-bash"><code class="language-bash">adb shell <span class="token string">"settings delete global captive_portal_use_https"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="Android-7-1"><a href="#Android-7-1" class="headerlink" title="Android 7.1+"></a>Android 7.1+</h2><p>从 Android 7.1.1 开始，系统在验证时不会自动加入 <code>generate_204</code> 的后缀了，这意味着 url 可以设计的更加灵活，同时也意味着在设置的时候需要填入完整的 url，即需要在现有的 url 验证地址后面加上 <code>/generate_204</code></p>
<p>同时也默认要求使用 HTTPS 的方法进行验证。禁用和恢复 HTTPS 检查的方法同 <a href="#Android-7-0-7-1-0">Android 7.0 ~ 7.1.0</a> 的方法。</p>
<h2 id="手机端应用"><a href="# 手机端应用" class="headerlink" title="手机端应用"></a>手机端应用 </h2><p><a href="www.noisyfox.cn"> 小狐狸 </a> 开发了这款“叹号杀手”应用实现了这个：<a href="http://www.coolapk.com/apk/org.foxteam.noisyfox.noexclamation" target="_blank" rel="external">酷安下载地址</a></p>
<p>用这款应用可以快速设置禁用验证或者更换验证地址。可能需要 root，如果没 root 可能会导致修改失败。</p>
<h1 id="架设自己的验证服务"><a href="# 架设自己的验证服务" class="headerlink" title="架设自己的验证服务"></a>架设自己的验证服务 </h1><p> 这个验证机制是访问所给地址的 <code>generate_204</code> 子目录看返回值，所以可以这么解决：</p>
<h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><p>开启 Rewrite 模块（大部分虚拟主机商都会帮你开好），在 <code>.htaccess</code> 文件中最末写入以下值：</p>
<pre class="line-numbers language-apacheconf"><code class="language-apacheconf"><span class="token directive-block tag"><span class="token directive-block tag"><span class="token punctuation">&lt;</span>IfModule</span><span class="token directive-block-parameter attr-value"> mod_rewrite.c</span><span class="token punctuation">></span></span>
  <span class="token directive-inline property">RewriteEngine</span> On
  <span class="token directive-inline property">RewriteCond</span> <span class="token variable">%{REQUEST_URI}</span><span class="token regex"> /generate_204$</span>
  <span class="token directive-inline property">RewriteRule</span><span class="token regex"> $</span> / [R=204]
<span class="token directive-block tag"><span class="token directive-block tag"><span class="token punctuation">&lt;/</span>IfModule</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Nignx"><a href="#Nignx" class="headerlink" title="Nignx"></a>Nignx</h2><p>直接在配置文件中写入：</p>
<pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">location</span> <span class="token operator">/</span>generate_204 <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">204</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="Workaround"><a href="#Workaround" class="headerlink" title="Workaround"></a>Workaround</h2><p>如果你没有服务器（比如你只用 pages 服务），或者上述设置方法全部无效，还有一个 workaround 的方法——直接建立一个名字叫做“generate_204”的空文件，因为空文件也会被 Android 当做是 204 返回（毕竟空文件绝对不会是网络登录验证咯）</p>
<h2 id="验证服务地址"><a href="# 验证服务地址" class="headerlink" title="验证服务地址"></a>验证服务地址</h2><ul>
<li>www.qualcomm.com（高通）</li>
<li>noisyfox.cn（小狐狸）</li>
<li>www.v2ex.com（V2EX）</li>
<li>bbs.mfunz.com（魔趣开源项目）</li>
<li>g.cn（谷歌中国，一个不存在的网站）</li>
<li>developer.google.cn（谷歌开发者文档中国）</li>
</ul>
<h1 id="分析 -NetWorkMonitor- 的工作原理"><a href="# 分析 -NetWorkMonitor- 的工作原理" class="headerlink" title="分析 NetWorkMonitor 的工作原理"></a>分析 NetWorkMonitor 的工作原理 </h1><h2 id="Android-5-0-6-0-1"><a href="#Android-5-0-6-0-1" class="headerlink" title="Android 5.0~6.0"></a>Android 5.0~6.0</h2><p> 以下代码摘自 <a href="https://android.googlesource.com/platform/frameworks/base/+/android-6.0.1_r70/services/core/java/com/android/server/connectivity/NetworkMonitor.java" target="_blank" rel="external">Android 6.0.1_r70 分支</a> 的 <code>NetworkMonitor</code> 第 384 行至第 425 行</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> CMD_REEVALUATE<span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>arg1 <span class="token operator">!=</span> mReevaluateToken <span class="token operator">||</span> mUserDoesNotWant<span class="token punctuation">)</span>
                <span class="token keyword">return</span> HANDLED<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// Don't bother validating networks that don't satisify the default request.</span>
            <span class="token comment" spellcheck="true">// This includes:</span>
            <span class="token comment" spellcheck="true">//  - VPNs which can be considered explicitly desired by the user and the</span>
            <span class="token comment" spellcheck="true">//    user's desire trumps whether the network validates.</span>
            <span class="token comment" spellcheck="true">//  - Networks that don't provide internet access.  It's unclear how to</span>
            <span class="token comment" spellcheck="true">//    validate such networks.</span>
            <span class="token comment" spellcheck="true">//  - Untrusted networks.  It's unsafe to prompt the user to sign-in to</span>
            <span class="token comment" spellcheck="true">//    such networks and the user didn't express interest in connecting to</span>
            <span class="token comment" spellcheck="true">//    such networks (an app did) so the user may be unhappily surprised when</span>
            <span class="token comment" spellcheck="true">//    asked to sign-in to a network they didn't want to connect to in the</span>
            <span class="token comment" spellcheck="true">//    first place.  Validation could be done to adjust the network scores</span>
            <span class="token comment" spellcheck="true">//    however these networks are app-requested and may not be intended for</span>
            <span class="token comment" spellcheck="true">//    general usage, in which case general validation may not be an accurate</span>
            <span class="token comment" spellcheck="true">//    measure of the network's quality.  Only the app knows how to evaluate</span>
            <span class="token comment" spellcheck="true">//    the network so don't bother validating here.  Furthermore sending HTTP</span>
            <span class="token comment" spellcheck="true">//    packets over the network may be undesirable, for example an extremely</span>
            <span class="token comment" spellcheck="true">//    expensive metered network, or unwanted leaking of the User Agent string.</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mDefaultRequest<span class="token punctuation">.</span>networkCapabilities<span class="token punctuation">.</span><span class="token function">satisfiedByNetworkCapabilities</span><span class="token punctuation">(</span>mNetworkAgentInfo<span class="token punctuation">.</span>networkCapabilities<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">transitionTo</span><span class="token punctuation">(</span>mValidatedState<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> HANDLED<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            mAttempts<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// Note: This call to isCaptivePortal() could take up to a minute. Resolving the</span>
            <span class="token comment" spellcheck="true">// server's IP addresses could hit the DNS timeout, and attempting connections</span>
            <span class="token comment" spellcheck="true">// to each of the server's several IP addresses (currently one IPv4 and one</span>
            <span class="token comment" spellcheck="true">// IPv6) could each take SOCKET_TIMEOUT_MS.  During this time this StateMachine</span>
            <span class="token comment" spellcheck="true">// will be unresponsive. isCaptivePortal() could be executed on another Thread</span>
            <span class="token comment" spellcheck="true">// if this is found to cause problems.</span>
            <span class="token keyword">int</span> httpResponseCode <span class="token operator">=</span> <span class="token function">isCaptivePortal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>httpResponseCode <span class="token operator">==</span> <span class="token number">204</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">transitionTo</span><span class="token punctuation">(</span>mValidatedState<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>httpResponseCode <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> httpResponseCode <span class="token operator">&lt;=</span> <span class="token number">399</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">transitionTo</span><span class="token punctuation">(</span>mCaptivePortalState<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当安卓设备联网后，如果该网络是 VPN，那么直接使用这个网络进行连接，否则调用 <code>isCaptivePortal()</code> 函数进行网络状况的判定，再根据判定结果决定是否选用此网络。这个函数就会先访问系统内指定的网址并根据返回结果来判断网络状况，而这个网址如字面所说，会产生一个 204 返回值。204 返回值的意思就是空内容。如果当 WiFi 是需要登录才可以连接，那么当试图访问 google 的服务器 WiFi 的链接就一定会自动跳转到一个登录页面，这个时候 http 请求的返回值就必然不是 204 了。就是通过这一机制，便可以区分当前 WiFi 是否需要验证，不得不佩服想出这个办法的人来。</p>
<h2 id="Android-7-0-7-1-0-1"><a href="#Android-7-0-7-1-0-1" class="headerlink" title="Android 7.0-7.1.0"></a>Android 7.0-7.1.0</h2><p>以下代码摘自 <a href="https://android.googlesource.com/platform/frameworks/base/+/android-7.1.0_r2/services/core/java/com/android/server/connectivity/NetworkMonitor.java" target="_blank" rel="external">Android 7.1.0_r2 分支</a> 的 <code>NetworkMonitor</code> 第 336 行至第 386 行。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> CMD_LAUNCH_CAPTIVE_PORTAL_APP<span class="token operator">:</span>
            <span class="token keyword">final</span> Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>ConnectivityManager<span class="token punctuation">.</span>ACTION_CAPTIVE_PORTAL_SIGN_IN<span class="token punctuation">)</span><span class="token punctuation">;</span>
            intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>ConnectivityManager<span class="token punctuation">.</span>EXTRA_NETWORK<span class="token punctuation">,</span> mNetworkAgentInfo<span class="token punctuation">.</span>network<span class="token punctuation">)</span><span class="token punctuation">;</span>
            intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>ConnectivityManager<span class="token punctuation">.</span>EXTRA_CAPTIVE_PORTAL<span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token class-name">CaptivePortal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ICaptivePortal<span class="token punctuation">.</span>Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token annotation punctuation">@Override</span>
                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">appResponse</span><span class="token punctuation">(</span><span class="token keyword">int</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">==</span> APP_RETURN_WANTED_AS_IS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                mContext<span class="token punctuation">.</span><span class="token function">enforceCallingPermission</span><span class="token punctuation">(</span>
                                        android<span class="token punctuation">.</span>Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>CONNECTIVITY_INTERNAL<span class="token punctuation">,</span>
                                        <span class="token string">"CaptivePortal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            <span class="token function">sendMessage</span><span class="token punctuation">(</span>CMD_CAPTIVE_PORTAL_APP_FINISHED<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            intent<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_BROUGHT_TO_FRONT <span class="token operator">|</span> Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_NEW_TASK<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mContext<span class="token punctuation">.</span><span class="token function">startActivityAsUser</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span>CURRENT<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> HANDLED<span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">return</span> NOT_HANDLED<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Message message <span class="token operator">=</span> <span class="token function">obtainMessage</span><span class="token punctuation">(</span>EVENT_PROVISIONING_NOTIFICATION<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
            mNetworkAgentInfo<span class="token punctuation">.</span>network<span class="token punctuation">.</span>netId<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mConnectivityServiceHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/**
* Result of calling isCaptivePortal().
* @hide
*/</span>
<span class="token annotation punctuation">@VisibleForTesting</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">CaptivePortalProbeResult</span> <span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">final</span> CaptivePortalProbeResult FAILED <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CaptivePortalProbeResult</span><span class="token punctuation">(</span><span class="token number">599</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token keyword">int</span> mHttpResponseCode<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HTTP response code returned from Internet probe.</span>
<span class="token keyword">final</span> String mRedirectUrl<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Redirect destination returned from Internet probe.</span>
<span class="token keyword">public</span> <span class="token function">CaptivePortalProbeResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> httpResponseCode<span class="token punctuation">,</span> String redirectUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mHttpResponseCode <span class="token operator">=</span> httpResponseCode<span class="token punctuation">;</span>
    mRedirectUrl <span class="token operator">=</span> redirectUrl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">boolean</span> <span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> mHttpResponseCode <span class="token operator">==</span> <span class="token number">204</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">boolean</span> <span class="token function">isPortal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mHttpResponseCode <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> mHttpResponseCode <span class="token operator">&lt;=</span> <span class="token number">399</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Android-7-1-1"><a href="#Android-7-1-1" class="headerlink" title="Android 7.1.1"></a>Android 7.1.1</h2><p>以下代码摘自 <a href="https://android.googlesource.com/platform/frameworks/base/+/android-7.1.1_r4/services/core/java/com/android/server/connectivity/NetworkMonitor.java" target="_blank" rel="external">Android 7.1.1_r4 分支 </a> 的 <code>NetworkMonitor</code> 第 611 行至第 631 行。<br> 可以看到 Android 7.1.1 开始已经不会再自动给验证 url 加上 <code>generate_204</code>。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getCaptivePortalServerHttpsUrl</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">getSetting</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> Settings<span class="token punctuation">.</span>Global<span class="token punctuation">.</span>CAPTIVE_PORTAL_HTTPS_URL<span class="token punctuation">,</span> DEFAULT_HTTPS_URL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getCaptivePortalServerHttpUrl</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">getSetting</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> Settings<span class="token punctuation">.</span>Global<span class="token punctuation">.</span>CAPTIVE_PORTAL_HTTP_URL<span class="token punctuation">,</span> DEFAULT_HTTP_URL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getCaptivePortalFallbackUrl</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">getSetting</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>
  Settings<span class="token punctuation">.</span>Global<span class="token punctuation">.</span>CAPTIVE_PORTAL_FALLBACK_URL<span class="token punctuation">,</span> DEFAULT_FALLBACK_URL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getCaptivePortalUserAgent</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">getSetting</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> Settings<span class="token punctuation">.</span>Global<span class="token punctuation">.</span>CAPTIVE_PORTAL_USER_AGENT<span class="token punctuation">,</span> DEFAULT_USER_AGENT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getSetting</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> String symbol<span class="token punctuation">,</span> String defaultValue<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">final</span> String value <span class="token operator">=</span> Settings<span class="token punctuation">.</span>Global<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> value <span class="token operator">!=</span> null <span class="token operator">?</span> value <span class="token operator">:</span> defaultValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从 Android L 开始，原生和 CM 的 ROM 用户就会发现，状态栏的网络信号莫名多了一个感叹号。而且，有的时候明明连着 WIFI 用得好好的，却突然跳到数据流量。&lt;/p&gt;
    
    </summary>
    
      <category term="实验室" scheme="https://blog.nfz.moe/categories/%E5%AE%9E%E9%AA%8C%E5%AE%A4/"/>
    
    
      <category term="Android" scheme="https://blog.nfz.moe/tags/Android/"/>
    
      <category term="Root" scheme="https://blog.nfz.moe/tags/Root/"/>
    
  </entry>
  
  <entry>
    <title>Typecho 迁移教程</title>
    <link href="https://blog.nfz.moe/archives/typecho-transfer-new-server.html"/>
    <id>https://blog.nfz.moe/archives/typecho-transfer-new-server.html</id>
    <published>2016-12-11T08:45:00.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然我自己已经迁移到了 Hexo，但是 Material 群里依然有在用 Typecho 的。最近群里的一些人在迁移 Typecho 时出现了各种问题。加上我之前曾经一直在免费空间之间来回迁移，对 Typecho 迁移还是颇有心得的。</p>
<a id="more"></a>
<h1 id="打包原站点数据"><a href="# 打包原站点数据" class="headerlink" title="打包原站点数据"></a>打包原站点数据 </h1><p> 首先你要做的是将博客所在目录下的文件全部打包然后下载下来。因为这个文件夹里面包括你的附件、你的主题、你的插件，等等。别的文件夹你都不需要下载。</p>
<blockquote>
<p>如果你是虚拟空间，你可以用在线的文件管理器打包下载。如果你用的是 VPS，你可以：<code>tar -zcvf usr.tar.gz [你博客的所在目录]</code> 。</p>
</blockquote>
<h1 id="备份数据库"><a href="# 备份数据库" class="headerlink" title="备份数据库"></a>备份数据库 </h1><p> 建议直接用 phpMyAdmin 导出 sql 文件。</p>
<hr>
<p>一个好的面板应该具备有备份功能，就可以很好的直接导出目录文件和数据库。</p>
<h1 id="切换新域名（不换域名可忽略）"><a href="# 切换新域名（不换域名可忽略）" class="headerlink" title="切换新域名（不换域名可忽略）"></a>切换新域名（不换域名可忽略）</h1><p>用 notepad++ 或者其他还用的文件编辑器打开你导出的 sql 文件，搜索你的域名，然后全部替换为新的域名。</p>
<h1 id="修改数据库配置信息"><a href="# 修改数据库配置信息" class="headerlink" title="修改数据库配置信息"></a>修改数据库配置信息 </h1><p> 在你导出的网站目录文件的根目录下应该可以看到 <code>config.inc.php</code> ，用文本编辑器打开，差不多在第 55 行，可以看到你的数据库配置信息。根据你的新的数据库用户配置进行修改。</p>
<blockquote>
<p>注意，如果之前你的 Typecho 运行在 PHP 5.2-5.6 之间，而新的 PHP 用的是 PHP 7.0.x ，那么原因是 PHP7.0 已经移除了对 MySQL 的支持了，现在主要使用 MySQLi 和 Pdo 连接 mysql。<br>所以你需要把原来 <code>config.inc.php</code> 中的</p>
<pre><code>$db = new Typecho_Db(&#39;Mysql&#39;, &#39;[你定义的 Typecho 数据表的表头，默认是 typecho_]&#39;);
</code></pre><p>改为：</p>
<pre><code>$db = new Typecho_Db(&#39;Pdo_Mysql&#39;, &#39;[你定义的 Typecho 数据表的表头，默认是 typecho_]&#39;);
</code></pre></blockquote>
<h1 id="恢复上传所有文件"><a href="# 恢复上传所有文件" class="headerlink" title="恢复上传所有文件"></a>恢复上传所有文件 </h1><p> 把修改后的站点文件全部打包，上传到新的空间上，然后再导入你的 sql 文件，迁移工作就大功告成了！</p>
<hr>
<p>如果还有别的问题，欢迎在底下评论，我尽量一一答复！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然我自己已经迁移到了 Hexo，但是 Material 群里依然有在用 Typecho 的。最近群里的一些人在迁移 Typecho 时出现了各种问题。加上我之前曾经一直在免费空间之间来回迁移，对 Typecho 迁移还是颇有心得的。&lt;/p&gt;
    
    </summary>
    
      <category term="分享镜" scheme="https://blog.nfz.moe/categories/%E5%88%86%E4%BA%AB%E9%95%9C/"/>
    
    
      <category term="Typecho" scheme="https://blog.nfz.moe/tags/Typecho/"/>
    
      <category term="迁移" scheme="https://blog.nfz.moe/tags/%E8%BF%81%E7%A7%BB/"/>
    
      <category term="主机" scheme="https://blog.nfz.moe/tags/%E4%B8%BB%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>从 Typecho 迁移到 Hexo</title>
    <link href="https://blog.nfz.moe/archives/typecho-to-hexo.html"/>
    <id>https://blog.nfz.moe/archives/typecho-to-hexo.html</id>
    <published>2016-12-05T03:15:00.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近突然心血来潮，刚好在 Typecho 上也遇到了很多坑，于是一气之下决定换用 Hexo 静态博客。</p>
<a id="more"></a>
<h1 id="安装 -Hexo"><a href="# 安装 -Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><p>安装 Hexo 是很简单的事，在电脑上安装好了 Node.js、Git 以后就可以在 Git 中直接输入 <code>npm install hexo-cli -g</code> 就完成了 hexo 的命令行安装。然后用 <code>hexo init</code> 指令初始化 Hexo。大功告成，Hexo 就安装完成了。<br>接下来就是按照文档进行 Hexo 的配置，同时安装了 Material 主题。</p>
<h1 id="迁移至 -Hexo"><a href="# 迁移至 -Hexo" class="headerlink" title="迁移至 Hexo"></a>迁移至 Hexo</h1><p>迁移至 Hexo 是不算太容易的工作——因为我的文章不多，我打算直接用复制粘贴的方式将文章迁移过来，同时重新选择新的标签。由于 Hexo 的文章迁移不是太方便，于是我安装了 hexo-hey 插件进行页面迁移。</p>
<blockquote>
<p>Hexo 的文章需要生成 Front-Matter，所以比较麻烦。然而 Hexo-hey 插件支持自动生成 Front-matter，显然就方便多了。</p>
</blockquote>
<p>当我复制粘贴到一半时，我突然心血来潮，打算测试一下 FTP 插件（用 FTP 发布我的博客到我的虚拟空间）。结果呢，我忘了配置忽略文件，于是我就只好眼睁睁的看着插件把我的 Typecho 一点一点删除。。。。<br>好了彻底死心了，现在只好用 Hexo 了（懒得再装 Typecho 了）于是我用 phpMyAdmin 完成了剩下文章的迁移。<br>全部复制粘贴完以后，使用 <code>hexo g</code> 生成静态网页。</p>
<h1 id="填坑"><a href="# 填坑" class="headerlink" title="填坑"></a>填坑 </h1><h2 id="1- 站点配置文件配置错误"><a href="#1- 站点配置文件配置错误" class="headerlink" title="1. 站点配置文件配置错误"></a>1. 站点配置文件配置错误</h2><p> 第一个坑是我的站点配置文件添加我的域名以后突然开始各种报错（<code>hexo g``hexo d``hexo s</code>等等只要和 Hexo 有关的指令都开始报错）<br>（bluebird 的有关错误）。后来才在 SF 站找到了问题出在我的站点配置文件上。</p>
<blockquote>
<pre><code>hexo g
FATAL Cannot read property &#39;replace&#39; of null
TypeError: Cannot read property &#39;replace&#39; of null
   at F:\hexo1\node_modules\.3.2.2@hexo\lib\hexo\load_config.js:34:30
   at tryCatcher (F:\hexo1\node_modules\.3.4.6@bluebird\js\release\util.js:16:23)
   at Promise._settlePromiseFromHandler (F:\hexo1\node_modules\.3.4.6@bluebird\js\release\promise.js:510:31)
   at Promise._settlePromise (F:\hexo1\node_modules\.3.4.6@bluebird\js\release\promise.js:567:18)
   at Promise._settlePromise0 (F:\hexo1\node_modules\.3.4.6@bluebird\js\release\promise.js:612:10)
   at Promise._settlePromises (F:\hexo1\node_modules\.3.4.6@bluebird\js\release\promise.js:691:18)
   at Async._drainQueue (F:\hexo1\node_modules\.3.4.6@bluebird\js\release\async.js:138:16)
   at Async._drainQueues (F:\hexo1\node_modules\.3.4.6@bluebird\js\release\async.js:148:10)
   at Immediate.Async.drainQueues (F:\hexo1\node_modules\.3.4.6@bluebird\js\release\async.js:17:14)
   at runCallback (timers.js:649:20)
   at tryOnImmediate (timers.js:622:5)
</code></pre><p>报错日志如上所示。原因是 <code>_config.yml</code> 的站点 root 目录没有设置正确（漏了<code>/</code>）。</p>
</blockquote>
<h2 id="2-CI 自动部署"><a href="#2-CI 自动部署" class="headerlink" title="2. CI 自动部署"></a>2. CI 自动部署 </h2><p> 与 Typecho 不同，Hexo 做不到随时随地可以提交博客。。。在不同机子上寄生需要重装一遍 Hexo（The GirlFriend Wall 越来越高，<code>npm install</code>执行起来越来越慢了）。就算可以装上，手机上也不能提交。<br>很显然我就只能借助 Github 或者 Coding 来托管我的博客内容，然后用 CI 持续集成平台安装 node.js 环境和 Hexo 来生成静态网页，再把静态网页发布出去。</p>
<h2 id="3- 折腾多说 -HTTPS"><a href="#3- 折腾多说 -HTTPS" class="headerlink" title="3. 折腾多说 HTTPS"></a>3. 折腾多说 HTTPS</h2><p>Typecho 时我用的是原生评论系统，但是 Hexo 是静态博客，不具备评论的功能。我只能用多说作为评论系统。然而多说的头像和表情一直是阻扰 HTTPS 的。这让我简直没办法忍。</p>
<h3 id="解决方案 -1"><a href="# 解决方案 -1" class="headerlink" title="解决方案 1"></a>解决方案 1</h3><p>我在我的个人主页域名下放了一个 php 反代脚本，用来把获得的头像从我的服务器上走一下反代。</p>
<blockquote>
<p>php 和修改后的多说 js 会开源，目前可供开放下载。下载后请将 <code>cds_php</code> 更名为<code>cds.php</code>，注意查找两个文件中所有的 example.com 替换成自己的域名。</p>
</blockquote>
<p><a href="https://dl.neofz.ga/duoshuo-https/" target="_blank" rel="external">下载地址</a></p>
<h3 id="解决方案 -2"><a href="# 解决方案 -2" class="headerlink" title="解决方案 2"></a>解决方案 2</h3><p>使用七牛 SSL 域名做反代。申请几个 Bucket，申请 https 域名，镜像源设置成为那些头像的源。然后我把多说 js 的头像域名修改成那几个七牛的 SSL 域名即可。</p>
<blockquote>
<p>参考了 <a href="https://github.com/rainwsy/duoshuo-https" target="_blank" rel="external">https://github.com/rainwsy/duoshuo-https</a> 项目的 js。<br>参考了 <a href="https://lany.me" target="_blank" rel="external">Lany</a> 的 <a href="https://lany.me/front/hexo-duoshuo/" target="_blank" rel="external"> 文章</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近突然心血来潮，刚好在Typecho上也遇到了很多坑，于是一气之下决定换用 Hexo 静态博客。&lt;/p&gt;
    
    </summary>
    
      <category term="博客栈" scheme="https://blog.nfz.moe/categories/%E5%8D%9A%E5%AE%A2%E6%A0%88/"/>
    
    
      <category term="Hexo" scheme="https://blog.nfz.moe/tags/Hexo/"/>
    
      <category term="Typecho" scheme="https://blog.nfz.moe/tags/Typecho/"/>
    
      <category term="迁移" scheme="https://blog.nfz.moe/tags/%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>用 Flow.CI 让 Hexo 持续集成</title>
    <link href="https://blog.nfz.moe/archives/hexo-auto-deploy-with-flow-ci.html"/>
    <id>https://blog.nfz.moe/archives/hexo-auto-deploy-with-flow-ci.html</id>
    <published>2016-12-01T05:40:16.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://flow.ci" target="_blank" rel="external">Flow.ci</a>是一个由著名移动应用公测平台 <a href="https://fir.im" target="_blank" rel="external">Fir.im</a> 推出的持续集成（CI）的 saas 服务平台，感觉就是中国的 Travis.CI，作用是把你 Github 或者 Coding 上的代码拉过来，通过容器技术自动化完成代码的构建、测试、交付和部署。整个对 Flow.ci 使用下来的感受就是简洁和美观，配置方便，速度很快。</p>
<a id="more"></a>
<p>虽然内测阶段我没有拿到邀请码，但是我至少参加了公测。目前 Flow.CI 依然在公测，所以依旧免费。跟 Daocloud 的代码构建相比，Flow.ci 是更纯粹的持续集成 / 部署平台。</p>
<h1 id="基本思路"><a href="# 基本思路" class="headerlink" title="基本思路"></a>基本思路</h1><ul>
<li>关闭 daocloud 持续集成功能</li>
<li>配置 flow.ci 持续集成</li>
<li>增加触发器</li>
<li>在本地提交 Hexo 主项目修改的 <code>git commit</code> 进行测试。</li>
</ul>
<h1 id="准备工作"><a href="# 准备工作" class="headerlink" title="准备工作"></a>准备工作 </h1><p> 如果之前用的是 Daocloud 的持续集成服务，首先是禁用 Daocloud 的持续集成，在 Daocloud 的控制台关掉持续集成。<br>如果以后再也不用 Daocloud 了，那么建议你把 <code>daocloud.yml</code> 和<code>dockerfile</code>两个文件删除。虽然不删除也不影响部署，但是这两个配置文件并没有起任何作用。</p>
<h1 id="创建持续集成项目"><a href="# 创建持续集成项目" class="headerlink" title="创建持续集成项目"></a>创建持续集成项目 </h1><p> 这一步很简单，按照 flow.ci 控制台里面的按钮顺着点“创建项目”-&gt; 选择 CODING 代码托管库 -&gt; 选择你的用户 -&gt; 选择你的项目。完成！</p>
<p>这时 CODING 里面的项目会有两处变化：</p>
<ul>
<li>新增了 flow.ci 的 webhook</li>
<li>新增了项目下的部署公钥（只读）</li>
</ul>
<h1 id="创建并设置工作流"><a href="# 创建并设置工作流" class="headerlink" title="创建并设置工作流"></a>创建并设置工作流 </h1><p><img src="https://img.nfz.moe/uploads/2017/03/0000035.png" alt="0000035.png"><br> 接下来点击“创建你的第一个工作流”，开始设置部署流程。<br>由于 Hexo 的所需环境是 Node.js，所以选择 Node.js，版本选择最新的 6.6.0。</p>
<p>接下来就会进入到工作流定义界面。</p>
<p><img src="https://img.nfz.moe/uploads/2017/03/0000036.png" alt="0000036.png"></p>
<h2 id="触发器"><a href="# 触发器" class="headerlink" title="触发器"></a>触发器 </h2><p> 触发器自然是选择对所有分支的 Push、对所有的 Tag 进行匹配。当然你也可以设置每天定时运行。</p>
<h2 id="初始化"><a href="# 初始化" class="headerlink" title="初始化"></a>初始化 </h2><p> 保持默认即可，初始环境变量（flow.ci 提供）和 Node.js 的组件版本等信息。</p>
<h2 id="Git- 仓库克隆"><a href="#Git- 仓库克隆" class="headerlink" title="Git 仓库克隆"></a>Git 仓库克隆 </h2><p> 保持默认即可，拉取你的仓库。</p>
<h2 id="缓存"><a href="# 缓存" class="headerlink" title="缓存"></a>缓存 </h2><p> 保持默认即可，使用缓存可以大大加快下一次部署的速度。</p>
<h2 id="安装"><a href="# 安装" class="headerlink" title="安装"></a>安装 </h2><p> 保持默认即可。使用 <code>npm install</code> 指令安装依赖项，而安装的依赖项基于你仓库中的<code>package.json</code></p>
<h2 id="自定义脚本"><a href="# 自定义脚本" class="headerlink" title="自定义脚本"></a>自定义脚本 </h2><p> 在左侧的工作流定义的“安装”与“测试”之间的 + 号，添加一个节点“自定义脚本”</p>
<p><img src="https://img.nfz.moe/uploads/2017/03/0000037.png" alt="0000037.png"></p>
<p>我们的脚本要执行的有：</p>
<ul>
<li>Hexo 命令行的安装</li>
<li>Hexo 静态站点的生成和部署</li>
</ul>
<p>在这个节点输入以下脚本：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 安装 Hexo 命令行工具</span>
flow_cmd "npm install hexo<span class="token punctuation">-</span>cli <span class="token punctuation">-</span>g" <span class="token punctuation">-</span><span class="token punctuation">-</span>echo
<span class="token comment" spellcheck="true"># 准备并安装私钥</span>
flow_cmd "cp .daocloud/id_rsa ." <span class="token punctuation">-</span><span class="token punctuation">-</span>echo
flow_cmd "chmod 600 ./id_rsa" <span class="token punctuation">-</span><span class="token punctuation">-</span>echo
flow_cmd "eval $(ssh<span class="token punctuation">-</span>agent)" <span class="token punctuation">-</span><span class="token punctuation">-</span>echo
flow_cmd "ssh<span class="token punctuation">-</span>add ./id_rsa" <span class="token punctuation">-</span><span class="token punctuation">-</span>echo
<span class="token comment" spellcheck="true"># 执行 Hexo 生成和发布</span>
flow_cmd "hexo clean" <span class="token punctuation">-</span><span class="token punctuation">-</span>echo
flow_cmd "hexo g" <span class="token punctuation">-</span><span class="token punctuation">-</span>echo
flow_cmd "hexo d" <span class="token punctuation">-</span><span class="token punctuation">-</span>echo
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="测试"><a href="# 测试" class="headerlink" title="测试"></a>测试 </h2><p> 在右上角把这个节点删除。我们不需要执行<code>npm test</code>。</p>
<h2 id="完成后"><a href="# 完成后" class="headerlink" title="完成后"></a>完成后 </h2><p> 如果你打算让 Flow.CI 每次部署成功后都给你发邮件，可以在这里设置。默认会给你的注册时用的邮箱发邮件。</p>
<h1 id="手动测试"><a href="# 手动测试" class="headerlink" title="手动测试"></a>手动测试 </h1><p> 回到构建列表，点击手动构建，选择你的分支开始构建，之后会看到整个工作流的执行过程和日志信息（绿色为成功，蓝色为正在执行，灰色为等待，红色为停止或失败）。<br>然后写一篇博客（庆祝一下你配置了 Flow.CI 嘛），然后用 <code>git commit</code> 和<code>git push</code>推送到你的仓库，看一下你的 Flow.CI 是否开始了自动运行。</p>
<h1 id="小结"><a href="# 小结" class="headerlink" title="小结"></a>小结 </h1><p> 本文介绍了从 Daocloud 进行持续集成 / 部署改造为 flow.ci 进行集成 / 部署的过程，今后的使用和之前的方式一样，向仓库提交 push 就可以触发自动部署。<br>和 Daocloud 的代码构建相比，flow.ci 为持续集成 / 部署优点如下：</p>
<ul>
<li>更简单、直观的方式，更容易理解（但是并不像配置一个 yml 那样 Geek，对吧？）</li>
<li>更加丰富的触发方式（比如支持正则表达式匹配 commit 信息）</li>
<li>方便地配置环境（而不需要像 Daocloud 一样，需要先生成一个带着 node.js 和 hexo 的 image，用来搭建一个 docker 作为运行环境）</li>
<li>控制台界面比 Daocloud 要漂亮得多（美，才是驱动开发的第一生产力！）</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://flow.ci&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flow.ci&lt;/a&gt;是一个由著名移动应用公测平台&lt;a href=&quot;https://fir.im&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fir.im&lt;/a&gt;推出的持续集成（CI）的saas服务平台，感觉就是中国的Travis.CI，作用是把你Github或者Coding上的代码拉过来，通过容器技术自动化完成代码的构建、测试、交付和部署。整个对Flow.ci使用下来的感受就是简洁和美观，配置方便，速度很快。&lt;/p&gt;
    
    </summary>
    
      <category term="博客栈" scheme="https://blog.nfz.moe/categories/%E5%8D%9A%E5%AE%A2%E6%A0%88/"/>
    
    
      <category term="Hexo" scheme="https://blog.nfz.moe/tags/Hexo/"/>
    
      <category term="持续集成" scheme="https://blog.nfz.moe/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
      <category term="CI" scheme="https://blog.nfz.moe/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 持续自动化部署</title>
    <link href="https://blog.nfz.moe/archives/hexo-auto-deploy-with-daocloud.html"/>
    <id>https://blog.nfz.moe/archives/hexo-auto-deploy-with-daocloud.html</id>
    <published>2016-11-29T12:51:00.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>用 Hexo 搭建好博客，使用起来算方便，而且静态页面使用起来很方便，但是每次还要在安装了 Hexo 环境的机器上才能写文章和发布。能不能在任何地方只要新增或修改了 post 就自动生成并部署 hexo 呢？</p>
<a id="more"></a>
<h1 id="实现思路"><a href="# 实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><ul>
<li>用 CODING 开源社区对 Hexo 项目的源码进行管理（master 分支，要配置好 Hexo 部署信息）</li>
<li>在 Daocloud 上进行 Hexo 环境的构建</li>
<li>Daocloud 通过持续集成功能自动生成静态页面</li>
<li>通过 FtpSync 插件上传到我的虚拟空间</li>
</ul>
<p><img src="https://img.nfz.moe/uploads/2017/04/0000029.jpg" alt="0000029.jpg"></p>
<h1 id="需要的东西"><a href="# 需要的东西" class="headerlink" title="需要的东西"></a>需要的东西</h1><ul>
<li><a href="https://hexo.io" target="_blank" rel="external">Hexo</a>——静态页面生成器</li>
<li><a href="https://coding.io" target="_blank" rel="external">CODING.NET</a>——中国版 Github，可以拥有免费无限私有项目。</li>
<li><a href="http://www.daocloud.io/" title="Daocloud" target="_blank" rel="external">Daocloud</a>——中国版 Docker hub，而且还能持续集成。</li>
</ul>
<h1 id="开始配置"><a href="# 开始配置" class="headerlink" title="开始配置"></a>开始配置 </h1><p> 首先自然是根据 Hexo 的官方文档对 Hexo 进行基本的配置。然后是创建一个 <strong> 私有仓库 </strong> 把 Hexo 文件夹 push 到你建好的私有仓库中。</p>
<h2 id="通过 master 构建 Hexo 基础运行环境镜像"><a href="# 通过 master 构建 Hexo 基础运行环境镜像" class="headerlink" title="通过 master 构建 Hexo 基础运行环境镜像"></a>通过 <code>master</code> 构建 Hexo 基础运行环境镜像 </h2><p> 国内貌似也没找到什么合适的、支持 Coding 的 CI 平台，最后我找到了 Daocloud。Daocloud 可以根据 dockerfile 自动构建 Docker 私有镜像并同时进行持续集成的能力。所以可以把 Hexo 及其运行环境（node.js）打包成一个镜像。</p>
<ol>
<li>编写 DockerFile。</li>
</ol>
<pre class="line-numbers language-docker"><code class="language-docker"><span class="token comment" spellcheck="true">#Dockerfile</span>
<span class="token keyword">FROM</span> node<span class="token punctuation">:</span>slim
<span class="token keyword">MAINTAINER</span> &lt; 你的用户名 <span class="token punctuation">></span> &lt; 你的邮箱 <span class="token punctuation">></span>

<span class="token comment" spellcheck="true"># 安装 git、ssh 等基本工具</span>
<span class="token keyword">RUN</span> apt<span class="token punctuation">-</span>get update &amp;&amp; apt<span class="token punctuation">-</span>get install <span class="token punctuation">-</span>y git ssh<span class="token punctuation">-</span>client ca<span class="token punctuation">-</span>certificates <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>install<span class="token punctuation">-</span>recommends &amp;&amp; rm <span class="token punctuation">-</span>r /var/lib/apt/lists/*
<span class="token comment" spellcheck="true"># 设置时区，不知道为什么？</span>
<span class="token keyword">RUN</span> echo <span class="token string">"Asia/Shanghai"</span> <span class="token punctuation">></span> /etc/timezone &amp;&amp; dpkg<span class="token punctuation">-</span>reconfigure <span class="token punctuation">-</span>f noninteractive tzdata
<span class="token comment" spellcheck="true"># 只安装 Hexo 命令行工具，其他依赖项根据项目 package.json 在持续集成过程中安装</span>
<span class="token keyword">RUN</span> npm install hexo<span class="token punctuation">-</span>cli <span class="token punctuation">-</span>g
<span class="token keyword">EXPOSE</span> 4000
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li><p>在 Daocloud 的控制面板内的代码构建选项卡内，选择“创建新项目”</p>
<ul>
<li>输入你的应用名</li>
<li>设置代码源的地方绑定你的 Coding 或 Github，并绑定你建立好的 Repository。</li>
<li>开启持续集成</li>
<li><p>执行环境设在国外（The GirlFriend Wall 越来越高了，有时连 npm 都执行不了）<br><img src="https://img.nfz.moe/uploads/2017/04/0000030.png" alt="0000030.png"></p>
</li>
<li><p>镜像选择发布在“镜像仓库”中（这个镜像仓库是私有的）</p>
</li>
</ul>
</li>
</ol>
<h2 id="通过 -DaoCloud-yml- 定义流程"><a href="# 通过 -DaoCloud-yml- 定义流程" class="headerlink" title="通过 DaoCloud.yml 定义流程"></a>通过 DaoCloud.yml 定义流程</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#Daocloud.yml</span>
<span class="token key atrule">image</span><span class="token punctuation">:</span> daocloud.io/&lt; 你的用户名 <span class="token punctuation">></span>/&lt; 你的应用名 <span class="token punctuation">></span><span class="token punctuation">:</span>latest  <span class="token comment" spellcheck="true">#使用已经在上一步创建好的 Hexo 基础环境镜像（并不包括博客项目源码）</span>
<span class="token key atrule">install</span><span class="token punctuation">:</span>
 <span class="token punctuation">-</span> npm install
<span class="token key atrule">before_script</span><span class="token punctuation">:</span>  
<span class="token key atrule">script</span><span class="token punctuation">:</span>
 <span class="token punctuation">-</span> hexo clean
 <span class="token punctuation">-</span> hexo g
 <span class="token punctuation">-</span> hexo d
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>yml 当中有一段 <code>before_script</code>，这个是用户自定义脚本。如果说你是在用 Github<br> 或者 Coding 的 Pages 服务，需要把生成的静态页面 push 到你的 Repository 中，你就需要用 SSH 使 Daocloud 和 Repository 连接。配置 SSH 的具体用法见文章最后附录。</p>
<p>在 install 过程中才进行了 npm install，并没有在镜像构建时进行依赖项安装，这是因为依赖项安装过程根据不同用户的 Hexo 的配置和安装的功能不同而不同（<code>package.json</code>中记录的不仅仅是 Hexo 依赖项，还有用户装了的插件），并没有通用性，而且本身它就属于 build 过程，尽管花费时间稍长（平均耗时 90 秒），但是这样更科学。</p>
</blockquote>
<p>接下来是对 Daocloud 进行配置。</p>
<ul>
<li>在设置选项卡中设置用 <code>daocloud.yml</code> 定义流程。</li>
<li>镜像构建中两个勾都选上。</li>
</ul>
<p><img src="https://img.nfz.moe/uploads/2017/04/0000032.png" alt="0000032.png"></p>
<ul>
<li>触发规则按照如图所示的定义。</li>
</ul>
<p><img src="https://img.nfz.moe/uploads/2017/04/0000031.png" alt="0000031.png"></p>
<h2 id="大功告成"><a href="# 大功告成" class="headerlink" title="大功告成"></a>大功告成 </h2><p> 之后写文章发布就是使用 <code>git commit</code> 而不是 <code>hexo g</code> 和<code>hexo d</code>了。只要提交以后，持续集成平台就会自动生成静态网页并发布。</p>
<h1 id="附录"><a href="# 附录" class="headerlink" title="附录"></a>附录 </h1><h2 id="关于 daocloud-yml"><a href="# 关于 daocloud-yml" class="headerlink" title="关于 daocloud.yml"></a> 关于 daocloud.yml</h2><p>Daocloud 如今已经开始用 daocloud YAML 2.0 定义流程了（1.0 版本的 YAML 于 9 月份停用了）, 然而本篇博客中的依然是 YAML 1.0，所以请自行按照网页提示进行 YAML 升级。</p>
<p><img src="https://img.nfz.moe/uploads/2017/04/0000033.png" alt="0000033.png"></p>
<h2 id="HexoAutoBuildScript 项目"><a href="#HexoAutoBuildScript 项目" class="headerlink" title="HexoAutoBuildScript 项目"></a>HexoAutoBuildScript 项目 </h2><p> 本文提到的有关的 dockerfile 和 daocloud.yml（包括 1.0 和 2.0）开源在 Github 上，并包括更加详细的使用教程</p>
<ul>
<li><a href="https://github.com/neoFelhz/HexoAutoBuildScript" target="_blank" rel="external">项目地址</a></li>
<li><a href="https://github.com/neoFelhz/HexoAutoBuildScript/wiki" target="_blank" rel="external">使用教程</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用 Hexo 搭建好博客，使用起来算方便，而且静态页面使用起来很方便，但是每次还要在安装了 Hexo 环境的机器上才能写文章和发布。能不能在任何地方只要新增或修改了 post 就自动生成并部署 hexo 呢？&lt;/p&gt;
    
    </summary>
    
      <category term="博客栈" scheme="https://blog.nfz.moe/categories/%E5%8D%9A%E5%AE%A2%E6%A0%88/"/>
    
    
      <category term="Hexo" scheme="https://blog.nfz.moe/tags/Hexo/"/>
    
      <category term="持续集成" scheme="https://blog.nfz.moe/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
      <category term="CI" scheme="https://blog.nfz.moe/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>CNAME 和 MX 解析互斥的问题</title>
    <link href="https://blog.nfz.moe/archives/resolve-mutual-exclusion-between-cname-and-mx.html"/>
    <id>https://blog.nfz.moe/archives/resolve-mutual-exclusion-between-cname-and-mx.html</id>
    <published>2016-11-20T07:51:00.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>为了防止滥用，我的主机商没有给邮箱权限。意思就是，如果我要用邮箱就必须用域名邮箱服务。于是我注册了网易域名企业邮箱服务（腾讯域名邮箱不支持.ga 域名后缀支持）。<br>如果使用邮箱，我就需要在域名解析处添加一条 MX 记录网易域名邮箱这里。<br>但是我的主机商的给我的是 CNAME，但是根据 <a href="https://zh.wikipedia.org/wiki/RFC" target="_blank" rel="external">RFC</a> 1034 的 <a href="https://zh.wikipedia.org/wiki/RFC" target="_blank" rel="external"> 文档 </a> 中章节 3.6.2 指出：</p>
<blockquote>
<p>If a CNAME RR is present at a node, no other data should be present; this ensuresthat the data for a canonical name and its aliases cannot be different.</p>
</blockquote>
<p>意思是说如果 CNAME 资源记录出现在一个域名节点，为了确保不会出现不同的解析结果，这个域名节点将不再接受其他记录值。<br>所以我在域名商那里的 DNS 添加解析时出现了问题（我用的是 Freenom 的免费顶级域名、以及 FreenomDNS）。</p>
<blockquote>
<p>实际上除了 CNAME 和 MX 不能共存外，已经注册了 CNAME 类型的域名记录是不能再注册除 DNSSEC 相关类型记录（RRSIG、NSEC 等）之外的任何其他类型记录（包括 MX、A、NS 等记录），理由同上。</p>
</blockquote>
<p>怎么办？谷歌后的结果是 CloudXNS 提供私有解析服务。而且 CloudXNS 的 DNS 解析服务还是免费的。</p>
<blockquote>
<p>还不赶快换过去（滑稽）</p>
</blockquote>
<p>在域名商那边切换 NameServer 到 CloudXNS 的 NS，然后在 CloudXNS 这边提交如下解析记录：</p>
<ul>
<li>首先，用 CNAME 解析 www 到我的主机商</li>
<li>然后把 @用 CloudXNS 用他们的私有解析方案 LINK 添加记录“www@neofelhz.ga”</li>
</ul>
<blockquote>
<p>LINK 可以隐藏当前这一层的配置，直接接管下一层的结果。</p>
</blockquote>
<ul>
<li>最后添加 MX 记录解析到网易的域名邮箱</li>
</ul>
<p>这样就实现了 MX 和 CNAME 共存了。<br>当然，我提前就申请并安装好了 SSL 证书，保护我的 www 域名。</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;为了防止滥用，我的主机商没有给邮箱权限。意思就是，如果我要用邮箱就必须用域名邮箱服务。于是我注册了网易域名企业邮箱服务（腾讯域名邮箱不支持.ga 域名后缀支持）。&lt;br&gt;如果使用邮箱，我就需要在域名解析处添加一条 MX 记录网易域名邮箱这
    
    </summary>
    
      <category term="博客栈" scheme="https://blog.nfz.moe/categories/%E5%8D%9A%E5%AE%A2%E6%A0%88/"/>
    
    
      <category term="DNS" scheme="https://blog.nfz.moe/tags/DNS/"/>
    
      <category term="域名解析" scheme="https://blog.nfz.moe/tags/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Typecho Hexo WordPress 比较</title>
    <link href="https://blog.nfz.moe/archives/typecho-hexo-wordpress-compare.html"/>
    <id>https://blog.nfz.moe/archives/typecho-hexo-wordpress-compare.html</id>
    <published>2016-11-11T10:56:02.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>如今独立博客驱动程序这么多，到底应该如何选择倒成为一个问题。新搭建博客的小白肯定会眼花缭乱，不知道如何选择。所以我就用我自己的经历来谈谈该怎么选择。<br>本文也就讨论三个比较主流的 blog CMS —— Typecho、WordPress 和 Hexo。</p>
<h1 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h1><p>我接触 WordPress 时是因为那时候刚接触 DaoCloud 提供的 Docker 服务，在进行测试时我选择了 WordPress 的 dockerfile 。WordPress 也是很多人选择的 Blog 程序。它有很多特点：</p>
<ul>
<li>安装方便—— 5 分钟手动安装；绝大部分主机商都会支持 WordPress 一键安装！</li>
<li>插件特别多——你不需要敲任何代码！</li>
<li>主题特别多——你可以找到几乎所有你喜欢的样式，而且大部分都是免费的！</li>
<li>使用非常简单——一切操作都可以在后台页面实现！</li>
</ul>
<p>对于小白或者一般的用户，WordPress 是一个不二选择，不需要折腾。<br>对于经常流传的 WordPress 访问很慢、性能很差，我觉得这不是 WordPress 的锅。事实上一个博客的访问快慢取决于：</p>
<ul>
<li>主机的性能</li>
<li>插件的多少</li>
<li>插件是否编码规范</li>
<li>主题编码是否规范</li>
</ul>
<p>引用一下别人做的测试的结果，在相同主机配置（127.0.0.1）下运行 WordPress 和 Typecho 的性能测试就明白了。</p>
<blockquote>
<ul>
<li>wordpress  load: 1.12s</li>
<li>typecho    load: 1.02s</li>
</ul>
</blockquote>
<p>关于数据库查询次数我直接忽略，毕竟面向小白用户，你只需告诉他 blog 最终的加载时间即可，从上图可以看出，在单 IP/PV 下他们之间的加载耗时差距几乎可以忽略不计。<br>我们现在使用 jmeter 做一下压力测试，同上一样的场景，同时 1000 的迸发。</p>
<blockquote>
<ul>
<li>wordpress load: 1.90s</li>
<li>typecho   load: 1.71s</li>
</ul>
</blockquote>
<p>从中我们可以得出结论，只要你的站点不是数十万级 PV 的话，这两个 blog 程序都是没有任何性能差距的，可以说他们是一样的！</p>
<h1 id="Typecho"><a href="#Typecho" class="headerlink" title="Typecho"></a>Typecho</h1><p>这也是我正在使用的 Blog 程序——最大特点就是简洁（安装包大小不过 1500k ，程序只需要 6 张数据表即可运行），此外还支持原生 MarkDown 。但是产品迭代太慢——8 年来才发布 6 个版本，现在才 1.0（14.10.10）</p>
<blockquote>
<p>最新的开发版是今年 7 月提交的 commit ，我用的就是开发版本。</p>
</blockquote>
<p>Typecho 还有的问题就是，相比 WordPress ，Typecho 算是比较冷门的 blog 驱动程序。所以做不到很多 WordPress 的很多花里胡哨的功能，也没有这么多插件。所以我博客的一些效果都是我自己修改 Typecho 源码实现的。</p>
<blockquote>
<p>有的人说 Typecho 需要有一定 php 基础才能使用，其实这是不确切的。php 简单得如同自然语言一般，Typecho 的源码只要有一点点 html 语言的基础，就可以毫不费力地读懂。</p>
</blockquote>
<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>这是我的镜像站使用的 Blog 驱动程序，基于 node.js 的静态博客，可以实现几秒内生成和渲染上百个静态网页。<br>和 Typecho 和 WordPress 有一套后台程序不同，Hexo 需要在你的本地安装 Hexo 基本组件和 node.js , 并且需要用 Git 命令行来生成博客。生成静态 html 文件需要手动发布到你的主机，或者到你的 Github 或者 Coding 。<br>Hexo 的特点就在于是静态博客，所有的文章和页面都在用 html 实现，所以可以托管到 Coding 或者 Github 上，开启 pages 服务，从而免去了购买和维护主机的麻烦。但是所有的配置都需要借助 <code>_config.yml</code> ，而且撰写新文章、发布博客等命令都需要用到 Git 命令行来实现，所以对于一般的小白来说是比较困难的，更适合极客使用。<br>另外还有一点，就是 Hexo 的主题文件、文章都是放在本地的，所以并不能方便的随时随地写文章、发布博客。虽然可以用 GitHub 或者 Coding 来托管博客文件，用 Git 来管理版本，把发布和生成博客的操作架设在专门的 CI 上，但是结果却是更加复杂了。</p>
<h1 id="So…"><a href="#So…" class="headerlink" title="So…"></a>So…</h1><p>从简洁性来说，Hexo 自然是最简洁的，Typecho 也是非常简洁的，WordPress 显得则比较臃肿了（个人感觉 WordPress 更像一个小型的 CMS 了，也有很多人把 WordPress 当成小型论坛用）。<br>从易用性来说，WordPress 和 Typecho 的后台系统和编辑器自然是很方便的（WordPress 的后台也很方便和多功能，Typecho 的后台会简洁很多），Hexo 的用 yml 文件配置的方法自然会比较麻烦一些，而且不能方便地随时随地配置、撰写和发布博客。<br>从扩展性来说，小白和不愿意折腾的更适合 WordPress ，有多如牛毛的插件和主题，安装插件也很简单；程序员这样的极客和追求极致简洁的极客更适合用 Hexo ，你可以直接用 <code>npm install</code> 指令安装插件、用 <code>npm install</code> 或者 <code>git clone</code> 指令安装主题；介于两者之间的可以选择 Typecho （Typecho 也算是比较灵活的了，虽然插件不算太多，但是很多东西可以自己简单修改一下 Typecho 源码就行了）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;如今独立博客驱动程序这么多，到底应该如何选择倒成为一个问题。新搭建博客的小白肯定会眼花缭乱，不知道如何选择。所以我就用我自己的经历来谈谈该怎么选择。&lt;br&gt;本文也就讨论三个比较主流的 blog CMS —— Typecho、WordPre
    
    </summary>
    
      <category term="博客栈" scheme="https://blog.nfz.moe/categories/%E5%8D%9A%E5%AE%A2%E6%A0%88/"/>
    
    
      <category term="博客" scheme="https://blog.nfz.moe/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="https://blog.nfz.moe/tags/Hexo/"/>
    
      <category term="Typecho" scheme="https://blog.nfz.moe/tags/Typecho/"/>
    
      <category term="WordPress" scheme="https://blog.nfz.moe/tags/WordPress/"/>
    
  </entry>
  
  <entry>
    <title>全站开启 HSTS</title>
    <link href="https://blog.nfz.moe/archives/enable-hsts.html"/>
    <id>https://blog.nfz.moe/archives/enable-hsts.html</id>
    <published>2016-10-15T12:39:00.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>HSTS 是 HTTP Strict Transport Security （HTTP 严格安全传输）的缩写。开启了这项设置以后，大部分浏览器会强制性地使用 HTTPS 来请求资源，能够更加有效地保护网站和用户的数据安全。</p>
<a id="more"></a>
<p>一般情况（未启用 HSTS），浏览器会允许用户在了解了安全风险之后继续使用不安全的连接来访问，但如果启用了 HSTS，则不允许忽略，所以如果你要启用 https ，得一定要 <strong> 很长期使用 HTTPS</strong>，或者像我一样，成为一个 https 控。</p>
<h1 id="启用 HSTS"><a href="# 启用 HSTS" class="headerlink" title="启用 HSTS"></a>启用 HSTS</h1><p>HSTS 是一个响应头，格式如下：</p>
<pre><code>Strict-Transport-Security: max-age=31536000; includeSubDomains; preload;
</code></pre><ul>
<li>max-age，单位是秒，用来告诉浏览器在指定时间内，这个网站必须通过 HTTPS 协议来访问。也就是对于这个网站的 HTTP 地址，浏览器需要先在本地替换为 HTTPS 之后再发送请求。</li>
<li>includeSubDomains ，可选参数，如果指定这个参数，表明这个网站所有子域名也必须通过 HTTPS 协议来访问。</li>
<li>preload ，可选参数，预加载到浏览器缓存。</li>
</ul>
<h1 id="配置 HSTS"><a href="# 配置 HSTS" class="headerlink" title="配置 HSTS"></a>配置 HSTS</h1><p>HSTS 这个响应头只能用于 HTTPS 响应；网站必须使用默认的 443 端口；必须使用域名，不能是 IP。而且启用 HSTS 之后，<strong>一旦网站证书错误，用户无法选择忽略。</strong>（这意味着你需要及时给证书续命）<br>添加 HSTS 支持其实很简单，修改一下 Web 服务器的配置，增加一个 HTTP 头就行。</p>
<blockquote>
<p>举个例子，这个域名目前使用的是：</p>
<pre><code>Strict-Transport-Security: max-age=15552000; includeSubDomains; preload max-age=15552000
</code></pre><p>告诉浏览器缓存这条规则 180 天；includeSubDomains 对子域名也使用相同的规则；preload 允许将这条规则内置进浏览器。</p>
</blockquote>
<h1 id="Apache 配置 HSTS"><a href="#Apache 配置 HSTS" class="headerlink" title="Apache 配置 HSTS"></a>Apache 配置 HSTS</h1><p>只需在 .htaccess 加入以下代码即可</p>
<pre class="line-numbers language-apache"><code class="language-apache">Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" env=HTTPS
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="申请 -HSTS-Preload-List"><a href="# 申请 -HSTS-Preload-List" class="headerlink" title="申请 HSTS Preload List"></a>申请 HSTS Preload List</h1><p>HSTS 必须要在浏览器访问过你的网站一次以后才会生效，如果希望提前生效，需要申请 HSTS Preloading List。<br>目前这个 Preload List 由 Google Chrome 维护，Chrome、Firefox、Safari、IE 11 和 Microsoft Edge 都在使用。如果要想把自己的域名加进这个列表，首先需要满足以下条件：</p>
<ul>
<li>拥有合法的证书（如果使用 SHA-1 证书，过期时间必须早于 2016 年）</li>
<li>将所有 HTTP 流量重定向到 HTTPS</li>
<li>确保所有子域名都启用了 HTTPS</li>
<li>输出 HSTS 响应头</li>
<li>max-age 不能低于 18 周（10886400 秒）</li>
<li>必须指定 includeSubdomains 参数</li>
<li>必须指定 preload 参数</li>
</ul>
<p>觉得妥了可以去 <a href="https://hstspreload.appspot.com" target="_blank" rel="external">HSTS Preload List</a> 这个页面申请。<br>我的域名已经去申请加入预加载列表了。如果能通过，将会是很吼的！</p>
<blockquote>
<p>特别提醒：对于 HSTS 以及 HSTS Preload List ，如果你不能确保永远提供 HTTPS 服务，就不要启用。因为一旦 HSTS 生效，<strong>你再想把网站重定向为 HTTP ，之前的老用户会被无限重定向，唯一的办法是换新域名。</strong></p>
</blockquote>
<hr>
<p>本站已经加入了 HSTS Preload List。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HSTS 是 HTTP Strict Transport Security （HTTP 严格安全传输）的缩写。开启了这项设置以后，大部分浏览器会强制性地使用 HTTPS 来请求资源，能够更加有效地保护网站和用户的数据安全。&lt;/p&gt;
    
    </summary>
    
      <category term="博客栈" scheme="https://blog.nfz.moe/categories/%E5%8D%9A%E5%AE%A2%E6%A0%88/"/>
    
    
      <category term="安全" scheme="https://blog.nfz.moe/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="HSTS" scheme="https://blog.nfz.moe/tags/HSTS/"/>
    
      <category term="SSL" scheme="https://blog.nfz.moe/tags/SSL/"/>
    
      <category term="HTTPS" scheme="https://blog.nfz.moe/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>Snapdragon 615 Tweak 3.0 单刷包</title>
    <link href="https://blog.nfz.moe/archives/snapdragon-615-tweak-3-patch.html"/>
    <id>https://blog.nfz.moe/archives/snapdragon-615-tweak-3-patch.html</id>
    <published>2016-10-03T14:07:00.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="声明"><a href="# 声明" class="headerlink" title="声明"></a>声明</h1><ol>
<li>本单刷包的效果受到使用环境和条件不同而存在差异。</li>
<li>这个单刷包只是我做作业烦了的国庆献礼，并不是我“复出”了。</li>
<li>请仔细阅读这个帖子里的每一句话，如果无法做到，请 <strong> 大声朗读本帖</strong>，确保你不会错过任何有用信息。</li>
<li>本单刷包骁龙 615 通用（但如果是 MIUI 的话，我写的其中一层温控可能不起作用）</li>
<li>本单刷包采用 <strong>CC 3.0 NC-NY-SA Unported</strong> 知识共享协议进行保护，使用、演绎和转发请注明来源，并且不得用于商业用途（获取报酬等）。本人保留采用法律手段的权利。</li>
</ol>
<h1 id="致谢"><a href="# 致谢" class="headerlink" title="致谢"></a>致谢 </h1><p> 感谢以下开源项目和个人！<br>转载搬运时请完整复制。</p>
<ul>
<li>Cyangenmod</li>
<li>Mokee Open Source Project</li>
<li>Parhelia</li>
</ul>
<h1 id="优化内容"><a href="# 优化内容" class="headerlink" title="优化内容"></a>优化内容</h1><ul>
<li>基于 Mokee for Z9mini 的 CPU 控制脚本（init.nubia.power.sh）重写的 init.qcom.post_boot.sh：<ul>
<li>修改频率 - 负载区间和升频阈值；</li>
<li>调整升频时间间隔；</li>
<li>修改 boost 参数；</li>
<li>针对 b.L 架构做的调整；</li>
<li>其它调速器参数的调整。</li>
</ul>
</li>
<li>全新 core_ctl 机制<ul>
<li>核心动态控制，CPU 根据负载、运行频率和处理器温度自动上线和离线。</li>
<li>大负载时最多六核全开；小负载时关闭全部大核，小核的数量 2-4 颗。</li>
</ul>
</li>
<li>由于未能找到开源的可供 msm8939 使用的 thermal-engine 二进制文件，所以既不能解放八核，也不能实现针对屏幕、摄像头、充电速度的全方面温控。<ul>
<li><strong>但是这并不是你们删除 thermal-engine 的理由！ thermal-engine 是手机的安全保障，不要轻信某些 romer 的言语就将其删除。A53 相比 A57 ，功耗就算再低也是会 boom 的。</strong></li>
</ul>
</li>
<li>重写的 ZRAM 压缩机制，当运存较满时自动压缩已占有预存，减轻运存压力。</li>
</ul>
<h1 id="效果"><a href="# 效果" class="headerlink" title="效果"></a>效果 </h1><p> 续航方面，轻度使用不间断亮屏可维持 6.5 小时，预计中度使用可坚持 5 小时，重度使用 4 小时。</p>
<h1 id="注意"><a href="# 注意" class="headerlink" title="注意"></a>注意 </h1><p> 由于本人修改了调速器参数、移植了 Core_ctl 机制，实现全自动控制 CPU ，所以请不要用任何内核调校或者带有 CPU 控制的高级设置进行调整，否则会失效。</p>
<h1 id="下载"><a href="# 下载" class="headerlink" title="下载"></a>下载 </h1><p><a href="https://static.neofelhz.space/powersavingspatch/SnapDragon-615-Tweak-3.0.zip" target="_blank" rel="external"> 点击下载 </a><br> 该下载地址为我的虚拟主机上的 CDN 提供，严格禁止外链！搬运时请使用百度云！</p>
<h1 id="反馈和获得支持"><a href="# 反馈和获得支持" class="headerlink" title="反馈和获得支持"></a>反馈和获得支持 </h1><p> 本人不再在论坛活跃了。</p>
<p>有反馈可以在 <a href="https://weibo.com/neoFelhz" target="_blank" rel="external"> 我的微博 </a> 上评论或者私信反馈，也可以在我的博客文章后面评论。</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;声明&quot;&gt;&lt;a href=&quot;# 声明&quot; class=&quot;headerlink&quot; title=&quot;声明&quot;&gt;&lt;/a&gt;声明&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;本单刷包的效果受到使用环境和条件不同而存在差异。&lt;/li&gt;
&lt;li&gt;这个单刷包只是我做作业
    
    </summary>
    
      <category term="分享镜" scheme="https://blog.nfz.moe/categories/%E5%88%86%E4%BA%AB%E9%95%9C/"/>
    
    
      <category term="Android" scheme="https://blog.nfz.moe/tags/Android/"/>
    
      <category term="温控" scheme="https://blog.nfz.moe/tags/%E6%B8%A9%E6%8E%A7/"/>
    
      <category term="省电" scheme="https://blog.nfz.moe/tags/%E7%9C%81%E7%94%B5/"/>
    
      <category term="单刷包" scheme="https://blog.nfz.moe/tags/%E5%8D%95%E5%88%B7%E5%8C%85/"/>
    
      <category term="降温" scheme="https://blog.nfz.moe/tags/%E9%99%8D%E6%B8%A9/"/>
    
  </entry>
  
  <entry>
    <title>在 Android 上安装 V4A FX 版 | XHIFI 版</title>
    <link href="https://blog.nfz.moe/archives/install-v4a-on-android.html"/>
    <id>https://blog.nfz.moe/archives/install-v4a-on-android.html</id>
    <published>2016-10-03T13:07:00.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>ViPER4Android 是一款音效神器，有着惊人的效果，可以改善大部分人的音乐体验——前提是你懂得怎么调节。<br>ViPER4Android 和分成两个版本，一个是 FX 版，一个是 XHiFi 版。后者已经在 2013 年时停止更新，前者最近刚刚更新了 2.5.0.5 版。<br>两个版本有些不同。XHiFi 版主打音频还原和调整，FX 主打音频渲染和效果。</p>
<h1 id="安装环境"><a href="# 安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><ul>
<li>Android 2.3+</li>
<li>完整 Root 支持（不支持 CM 或魔趣的内置 root ）</li>
<li>完整 system/xbin/Busybox 支持</li>
</ul>
<h1 id="资源下载"><a href="# 资源下载" class="headerlink" title="资源下载"></a>资源下载 </h1><h2 id="单刷包"><a href="# 单刷包" class="headerlink" title="单刷包"></a> 单刷包 </h2><p> 单刷包就是什么麻烦都不需要，直接用第三方 recovery 直接刷入即可，可以省去各种安装的麻烦。但是就不能和 XHiFi 版共存了。<br>-</p>
<blockquote>
<p>ViPER4Android FX 2.5.0.5 单刷包 <br>2.5.0.5 单刷包转载至蝰蛇论坛。<br><a href="https://dl.neofz.ga/ViPERAudio/Viper4Android-V2.5.0.5.zip" target="_blank" rel="external"> 点此下载</a></p>
</blockquote>
<p>-</p>
<blockquote>
<p>ViPER4Android FX 2.4.0.1 单刷包 <br>2.4.0.1 单刷包由我 neoFelhz 制作，内置的是魔趣版 Material Design 界面的 apk 。<br><a href="https://dl.neofz.ga/ViPERAudio/Viper4Android-v2.4.0.1-Mokee.zip" target="_blank" rel="external"> 点此下载</a></p>
</blockquote>
<h2 id="安装包"><a href="# 安装包" class="headerlink" title="安装包"></a>安装包 </h2><p> 如果你坚持要自己手动安装的话，你需要这些资源。</p>
<ul>
<li><a href="http://coolapk.com/apk/com.vipercn.viper4android_v2" target="_blank" rel="external">ViPER4Android FX 2.4.0.1</a></li>
<li><a href="http://coolapk.com/apk/com.audlabs.viperfx" target="_blank" rel="external">ViPER FX 2.5.0.5</a></li>
<li><a href="https://dl.neofz.ga/ViPERAudio/ViPER4Android_XHiFi.apk" target="_blank" rel="external">ViPER4Android XHiFi 2.1.0.1-1</a><blockquote>
<p>注意，2.1.0.1-1 版本仅供 Android4.0+ 。</p>
</blockquote>
</li>
</ul>
<h1 id="手动安装步骤"><a href="# 手动安装步骤" class="headerlink" title="手动安装步骤"></a>手动安装步骤</h1><ol>
<li>首先，冻结或者卸载手机内自带的音效，避免冲突。CM 内内置的是 AudioFX，国内厂商一般选择杜比或者 SRS ，等等。</li>
<li>在 SuperSU 的设置内把这个选项的勾去掉。<br><img src="https://ooo.0o0.ooo/2016/12/22/585be8b6a0ae7.png" alt="0000023.png"></li>
<li>去掉 Selinux 保护。用 <a href="http://coolapk.com/apk/com.mrbimc.selinux" target="_blank" rel="external">Selinux Mode Changer</a> 切换到 Permssive 模式，而且以后要用 V4 音效也必须切换。如果你觉得这样太麻烦，你可以这样做：在 /system/etc/init.qcom.post_boot.sh 里加一句：<code>setenforce 0</code>就解决了。</li>
<li>安装 <a href="http://coolapk.com/apk/com.jrummy.busybox.installer.pro" target="_blank" rel="external">BusyBox</a> ，注意要安装到 system/xbin 下！</li>
<li>打开 V4 音效的 apk，安装你想要的驱动。</li>
<li>如果想要 FX 版和 XHIFI 版共存，就要先安装 XHIFI 版，驱动选择最后一项——“带 NEON 的 A 系列”。然后重启。</li>
<li>重启后检查 XHIFI 版的驱动状态是否为正常。如果是，就继续安装 FX 的驱动。安装完以后重启，再检查一下 XHIFI 和 FX 版的驱动是否正常。如果驱动不正常，应该就是 selinux 的问题或者 root 不完整的问题。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ViPER4Android 是一款音效神器，有着惊人的效果，可以改善大部分人的音乐体验——前提是你懂得怎么调节。&lt;br&gt;ViPER4Android 和分成两个版本，一个是 FX 版，一个是 XHiFi 版。后者已经在 2013 年时停止更新，前者最近刚刚更新了 2.5.0.
    
    </summary>
    
      <category term="分享镜" scheme="https://blog.nfz.moe/categories/%E5%88%86%E4%BA%AB%E9%95%9C/"/>
    
    
      <category term="Android" scheme="https://blog.nfz.moe/tags/Android/"/>
    
      <category term="Root" scheme="https://blog.nfz.moe/tags/Root/"/>
    
      <category term="蝰蛇音效" scheme="https://blog.nfz.moe/tags/%E8%9D%B0%E8%9B%87%E9%9F%B3%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>莱卡回家</title>
    <link href="https://blog.nfz.moe/archives/laikai-home.html"/>
    <id>https://blog.nfz.moe/archives/laikai-home.html</id>
    <published>2016-10-02T09:20:00.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>11 月 3 日是个特别的日子。1957 年 11 月 3 日，前苏联发射了 Sputnik-2 号卫星，这是第二颗进入地球轨道的人造卫星，也是人类发射的第一颗载有活物的卫星。消息发布后，西方世界一片哗然，在美国小得可怜的首枚人造卫星发射之前，苏联的举动彻底夯实了其航天第一强国的地位。美国中情局对此作了大量分析，纠结于苏联卫星究竟是否带了活物之间。在确信苏联发射了活狗，原已令西方震惊，但这只狗的结局，更成为后来数十年的科学悬案。<br> 那只随 Sputnik-2 升空的三岁流浪雌性混血萨摩耶犬名叫莱卡。作为第一只进入太空的地球生物，莱卡名垂青史，但它的结局却着实悲惨。从一开始，苏联人就没打算让它回来。10 月 4 日苏联发射首枚人造卫星后一星期后，赫鲁晓夫就建议再次发射更为复杂的卫星，作为伟大十月革命 40 周年献礼，这意味着工程技术人员只有 3 周时间来设计和制造新的火箭及卫星。这次苏联决定发射生物上天。<br> 一切为了进度， Sputnik-2 使用了 Sputnik-1 的部分备件，为了最大限度提高载荷能力，火箭的部分设备甚至也被拆除。科罗廖夫的助手鲍里斯·切尔托克在回忆中这样写道，“一切火箭技术开发的传统都被抛弃，第二颗卫星的开发根本未经详细设计，或者说根本没有设计。”卫星的大部分部件都是赶工制造的，工程师们甚至被派到工厂协助工人赶工，许多部件甚至省略了蓝图环节。紧张的工期甚至不允许工程师设计出可靠的生命保障系统，更不消说为莱卡铺就一条回家的路。</p>
<p> 发射升空过程中，监测系统显示莱卡的心率达到了每分钟 260 次，比平时高 3 倍，呼吸频率也超出正常水平 4～5 倍，但顽强的莱卡还是活了下来，成功进入轨道。入轨后，载荷舱头锥成功分离，但有些部件却分离失败。造成的一个恶劣后果就是，热控制系统无法正常工作。此外，一些隔热材料被撕裂，舱内温度很快升至 40 度以上。据信在死于焦躁和高热之前，莱卡顶多活了两天，西方人甚至认为只有几个小时，根本不像苏联人宣布的那样长。莱卡用自己的生命告诉人类科学家，通过合理的防护措施，人类能够在太空环境下生存。这个代价对人类而言不大，但对莱卡而言不小。<br> 莱卡的悲惨结局，固然可以归结为当时尚不成熟的返回卫星技术，但更为重要的原因，是美苏当时心急火燎的太空竞赛，而竞赛背后，是东西方阵营意识形态的激烈冲突。但无论如何，我们起码可以给莱卡更有尊严的死亡方式，一支安乐死制剂就足以实现。遗憾的是，1957 年 11 月 3 日的那次发射，这些都没有被详尽计划。<br> 每每看到关于莱卡的记述，我都会对身边动物平添几分敬意，提醒自己善待它们。为了人类的文明征程，它们已经付出了太多，我们不能与此同时再让他们成为我们野蛮举止的牺牲。<br> 莱卡，回家吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;11 月 3 日是个特别的日子。1957 年 11 月 3 日，前苏联发射了 Sputnik-2 号卫星，这是第二颗进入地球轨道的人造卫星，也是人类发射的第一颗载有活物的卫星。消息发布后，西方世界一片哗然，在美国小得可怜的首枚人造卫星发射
    
    </summary>
    
      <category term="自言语" scheme="https://blog.nfz.moe/categories/%E8%87%AA%E8%A8%80%E8%AF%AD/"/>
    
    
      <category term="莱卡" scheme="https://blog.nfz.moe/tags/%E8%8E%B1%E5%8D%A1/"/>
    
      <category term="太空" scheme="https://blog.nfz.moe/tags/%E5%A4%AA%E7%A9%BA/"/>
    
  </entry>
  
  <entry>
    <title>Android 切换 F2FS 文件系统</title>
    <link href="https://blog.nfz.moe/archives/switch-f2fs-file-system-for-android.html"/>
    <id>https://blog.nfz.moe/archives/switch-f2fs-file-system-for-android.html</id>
    <published>2016-10-01T08:55:00.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>F2FS 如今也是折腾 Android 的玩家口中的一个常见词汇。虽然 2014 年起就已经有 ROM 对其提供支持，但是一加发布了原生支持 F2FS 的氢 OS 7.0，和华为重金聘用了 F2FS 文件系统开发人员的新闻，又重新把 F2FS 推上了热点。</p>
<h1 id="警告"><a href="# 警告" class="headerlink" title="警告"></a>警告 </h1><p> 切换文件系统为 F2FS 是一项有风险的行为。如果你的 ROM 的内核不能够支持 F2FS 文件系统，那么有可能导致一系列问题！这些问题并不是由 F2FS 文件系统引起！</p>
<h1 id="Why-F2FS"><a href="#Why-F2FS" class="headerlink" title="Why F2FS?"></a>Why F2FS?</h1><h2 id="F2FS- 是什么"><a href="#F2FS- 是什么" class="headerlink" title="F2FS 是什么"></a>F2FS 是什么</h2><p>F2FS ，即 “Flash-Friendly File System”，是一种新的文件系统，用于 NAND 闪存一类的储存设备，甚至可以自移动设备广泛应用至服务器。三星应用了日志结构档案系统的概念，使它更适合用于储存设备。</p>
<h2 id="F2FS- 的优点"><a href="#F2FS- 的优点" class="headerlink" title="F2FS 的优点"></a>F2FS 的优点</h2><p>F2FS 相对目前主流的 EXT3/4 格式，</p>
<ul>
<li>更好的加密特性；</li>
<li>更快的读取速度；</li>
<li>加快针对零碎小文件的读写速度；</li>
<li>对固态存储的寿命保护；</li>
<li>娱乐兔跑分 UX 性能可以增加 3000 多分（<del>不重要</del>）。</li>
</ul>
<h1 id="How-to-F2FS"><a href="#How-to-F2FS" class="headerlink" title="How to F2FS?"></a>How to F2FS?</h1><h2 id="选择合适的 ROM"><a href="# 选择合适的 ROM" class="headerlink" title="选择合适的 ROM"></a>选择合适的 ROM</h2><p>首先你得选择一个支持 F2FS 的 ROM 。比如说我的 nubia Z9 max 的 NubiaUI 并不支持 F2FS ，但是适配的 Mokee 和 CM 都是支持的。</p>
<h2 id="刷入一个第三方 -recovery"><a href="# 刷入一个第三方 -recovery" class="headerlink" title="刷入一个第三方 recovery"></a>刷入一个第三方 recovery</h2><p>最好是 TWRP 。因为 TWRP 支持可视化和触摸操作，也支持文件系统转换等很多功能。TWRP 支持 F2FS 的版本是 2.8.6.1+ 。本人使用的是 TWRP3.0.2-2-stalence-nx510j-unofficial 。</p>
<h2 id="备份数据"><a href="# 备份数据" class="headerlink" title="备份数据"></a>备份数据 </h2><p> 备份你的数据，包括使用钛备份应用数据，用 TWRP 备份存储 system、data 分区。<br>把内部存储和外部存储的数据也全部拷贝到电脑上。</p>
<blockquote>
<p>现在绝大部分手机都已经实现了 data 分区和内置存储合并，这样一旦转换 data 分区的文件系统以后，内置存储也会被清空。</p>
</blockquote>
<h2 id="切换分区"><a href="# 切换分区" class="headerlink" title="切换分区"></a>切换分区</h2><ol>
<li>在 TWRP 下，先清除下述分区的内容：cache、data、system（可选）。</li>
<li>“高级清除菜单”，勾选 Data ，“修复或转换文件系统”，“转换文件系统”，选择 F2FS 。</li>
<li>用同样的方法，转换 Cache 分区为 F2FS 。</li>
<li>对于 System 分区要特别注意，有的 ROM 不支持 System 分区为 F2FS ，而且刷 ROM 前刷机脚本也没有提示或者自动转换分区功能。所以一旦转换 System 分区以后无法开机，你可以直接退回 TWRP ，把 System 再转换回 ext4 ，重新刷入 ROM 一遍即可。</li>
</ol>
<p>全部转换以后，再用 TWRP 看一下分区是不是已经转换好了。然后就可以享受 F2FS 给你带来的丝滑的感受了</p>
<h2 id="还原数据"><a href="# 还原数据" class="headerlink" title="还原数据"></a>还原数据 </h2><p> 先把 TWRP 文件夹拷回手机（这个文件夹中有分区备份文件），然后在 TWRP 的设置中，把“使用 rm-rf 指令代替格式化”的选项勾上，以便实现跨文件系统还原分区，然后再用 TWRP 还原 system 和 data 分区。</p>
<p>当分区还原完以后就可以开机进系统测试一下，如果一切正常，就再把存储内的数据拷回手机即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;F2FS 如今也是折腾 Android 的玩家口中的一个常见词汇。虽然 2014 年起就已经有 ROM 对其提供支持，但是一加发布了原生支持 F2FS 的氢 OS 7.0，和华为重金聘用了 F2FS 文件系统开发人员的新闻，又重新把 F2FS 推上了热点。&lt;/p&gt;
&lt;h1 
    
    </summary>
    
      <category term="分享镜" scheme="https://blog.nfz.moe/categories/%E5%88%86%E4%BA%AB%E9%95%9C/"/>
    
    
      <category term="Android" scheme="https://blog.nfz.moe/tags/Android/"/>
    
      <category term="TWRP" scheme="https://blog.nfz.moe/tags/TWRP/"/>
    
      <category term="F2FS" scheme="https://blog.nfz.moe/tags/F2FS/"/>
    
      <category term="文件系统" scheme="https://blog.nfz.moe/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>安卓通用 root 教程</title>
    <link href="https://blog.nfz.moe/archives/android-general-root-guidence.html"/>
    <id>https://blog.nfz.moe/archives/android-general-root-guidence.html</id>
    <published>2016-10-01T03:53:00.000Z</published>
    <updated>2017-05-14T09:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>本 Root 教程适用于绝大部分安卓机型。当然，不能解锁 Bootloader，不能刷入第三方 recovery 如 TWRP 的机型不适用。</p>
<a id="more"></a>
<h1 id="楔子"><a href="# 楔子" class="headerlink" title="楔子"></a>楔子 </h1><p> 如今还看到有人问用一键 root 工具不能 root ，怎么用一键 root 的问题。<br>首先不讨论这些一键 root 是什么样的存在：</p>
<ol>
<li>他们会窃取你的隐私、给你弄一堆你卸不掉的应用、破坏系统什么的；</li>
<li>一键 root 的原理是通过寻找系统漏洞来获取 root ，如今 android 5.0 开始，系统的漏洞已经很少了，而且谷歌每个月都会更新一次到两次安全补丁。一键 root 基本已经不可能。<br>实际上 root 总有方法的。虽然需要一些折腾，但是毕竟提高了门槛，让不会玩机的小白远离 root ，不是件坏事，反而是好事。</li>
</ol>
<h1 id="下载工具"><a href="# 下载工具" class="headerlink" title="下载工具"></a>下载工具</h1><ul>
<li>ADB 工具包</li>
</ul>
<blockquote>
<p>这个是 cofface 制作的，原发布在移动叔叔论坛。</p>
</blockquote>
<p><a href="https://eyun.baidu.com/s/3mirXA2W" target="_blank" rel="external">下载链接</a> 密码：cxIZ</p>
<ul>
<li>SuperSU 单刷包</li>
</ul>
<blockquote>
<p>我提供的是 SuperSU 2.78 RS1 版本，即 chainfire 自己制作的 2.78 版。为什么不用“官方”（即 CCMT 收购了 SuperSU 以后发布的版本）的 SuperSU ，而要去用原作者 ChainFire 制作的版本，可以去看我的博客《CCMT 收购 SuperSU 以后》</p>
</blockquote>
<p><a href="https://eyun.baidu.com/s/3c1fvvK" target="_blank" rel="external">下载链接</a> 密码：QMsK</p>
<h1 id="解锁手机 -Bootloader"><a href="# 解锁手机 -Bootloader" class="headerlink" title="解锁手机 Bootloader"></a>解锁手机 Bootloader</h1><p>有的手机可以在开发者选项内解锁——关于手机页面连续点击版本号 7 次，退回去在开发者选项，找到 OEM 解锁那个开关打开、确认即可。<br>有的手机没有这个开关的，则可以打开 USB 调试，连接电脑，选择一律使用此电脑进行调试；然后在电脑上准备一个 adb 工具包。在电脑上运行 adb ，依次输入：</p>
<pre><code>adb devices // 在弹出的列表中确认是不是你的机型
adb reboot bootloader // 重启到 bootloader 模式，等待手机进入 bootloader 模式为止
fastboot oem unlock // 解开 bootloader 解锁
</code></pre><p>如果提示 failed ，那么加几个参数试一试。</p>
<blockquote>
<p>比如 nubia 机型解锁就需要参数，比如华为机型需要申请解锁码并输入。如果还是不行，那么你的手机不能解 BL 锁，你就可以靠边了，你的手机不能 root。</p>
</blockquote>
<p>无论成功与否，输入：</p>
<pre><code>fastboot reboot // 重启回系统
</code></pre><blockquote>
<p>当然，有的机型有人制作了第三方 rec 一键刷入功能，这种情况下工具内都已经自带解锁了，就不需要这么麻烦了。</p>
</blockquote>
<h1 id="刷入第三方 -recovery"><a href="# 刷入第三方 -recovery" class="headerlink" title="刷入第三方 recovery"></a>刷入第三方 recovery</h1><p>rec 是 recovery 的简称，可以用来，呃，官方的 recovery 一般情况下用来彻底清除手机的数据恢复出厂（传说中的双清），还可以用来升级系统。<br>第三方 rec 还可以用来刷第三方 ROM （即刷机），刷单刷包，备份系统分区，刷 xposed 框架，刷谷歌服务套件。。。</p>
<p>准备好一个第三方 recovery ，这个需要你们自己去找。</p>
<p>如果有 romer 已经做好的第三方 rec 一键刷入工具，那就可以直接用工具，按照提示刷入。<br>如果给的只有 img 文件，那么把 img 文件重命名为 recovery.img ，拷贝到 ADB 工具的文件夹下，手机连接电脑，打开 USB 调试模式。在电脑上用 ADB 工具依次输入：</p>
<pre><code>adb devices
adb reboot bootloader
fastboot flash recovery recovery.img // 刷入 recovery 的镜像文件
fastboot reboot
</code></pre><p>接下来，下载一个 SuperSU 单刷包。<br>下载下来，拷贝到手机里头去。<br>最后一步，刷入这个单刷包。</p>
<pre><code>adb devices
adb reboot recovery // 进入 recovery 模式
</code></pre><p>在 recovery 模式下，不双清，直接刷入这个 zip 文件。等到刷入完成以后，重启回系统即可。<br>回到系统会发现桌面上多了一个图标： “SuperSU” 这个就是 root 管理软件，软件自带中文。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本 Root 教程适用于绝大部分安卓机型。当然，不能解锁 Bootloader，不能刷入第三方 recovery 如 TWRP 的机型不适用。&lt;/p&gt;
    
    </summary>
    
      <category term="分享镜" scheme="https://blog.nfz.moe/categories/%E5%88%86%E4%BA%AB%E9%95%9C/"/>
    
    
      <category term="Android" scheme="https://blog.nfz.moe/tags/Android/"/>
    
      <category term="Root" scheme="https://blog.nfz.moe/tags/Root/"/>
    
      <category term="recovery" scheme="https://blog.nfz.moe/tags/recovery/"/>
    
  </entry>
  
</feed>
